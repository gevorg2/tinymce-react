import * as Type from './Type';
var Arr = {
    contains: function (values, value) {
        return values.indexOf(value) > -1;
    }
};
var Obj = {
    keys: function (obj) {
        return Object.keys(obj);
    }
};
var pass = function () {
    return ({ eq: true, why: function () { return ''; } });
};
var fail = function (why) {
    return ({ eq: false, why: why });
};
var failCompare = function (x, y, prefix) {
    return fail(function () { return (prefix || 'Values were different') + ': [' + String(x) + '] vs [' + String(y) + ']'; });
};
var isEquatableType = function (x) {
    return Arr.contains(['undefined', 'boolean', 'number', 'string', 'function', 'xml', 'null'], x);
};
var compareArrays = function (x, y) {
    if (x.length !== y.length) {
        return failCompare(x.length, y.length, 'Array lengths were different');
    }
    var _loop_1 = function (i) {
        var result = doCompare(x[i], y[i]);
        if (!result.eq) {
            return { value: fail(function () { return 'Array elements ' + i + ' were different: ' + result.why(); }) };
        }
    };
    for (var i = 0; i < x.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return pass();
};
var sortArray = function (x) {
    var y = x.slice();
    y.sort();
    return y;
};
var sortedKeys = function (o) {
    return sortArray(Obj.keys(o));
};
var compareObjects = function (x, y) {
    var constructorX = x.constructor;
    var constructorY = y.constructor;
    if (constructorX !== constructorY) {
        return failCompare(constructorX, constructorY, 'Constructors were different');
    }
    var keysX = sortedKeys(x);
    var keysY = sortedKeys(y);
    var keysResult = compareArrays(keysX, keysY);
    if (!keysResult.eq) {
        return failCompare(JSON.stringify(keysX), JSON.stringify(keysY), 'Object keys were different');
    }
    var _loop_2 = function (i) {
        if (x.hasOwnProperty(i)) {
            var xValue = x[i];
            var yValue = y[i];
            var valueResult_1 = doCompare(xValue, yValue);
            if (!valueResult_1.eq) {
                return { value: fail(function () { return 'Objects were different for key: [' + i + ']: ' + valueResult_1.why(); }) };
            }
        }
    };
    for (var i in x) {
        var state_2 = _loop_2(i);
        if (typeof state_2 === "object")
            return state_2.value;
    }
    return pass();
};
var doCompare = function (x, y) {
    if (x === y)
        return pass();
    var typeX = Type.typeOf(x);
    var typeY = Type.typeOf(y);
    if (typeX !== typeY)
        return failCompare(typeX, typeY, 'Types were different');
    if (isEquatableType(typeX)) {
        if (x !== y)
            return failCompare(x, y, 'Reference equality failed');
    }
    else if (x == null) {
        if (y !== null)
            return failCompare(x, y, 'Both values were not null');
    }
    else if (typeX === 'array') {
        var arrayResult = compareArrays(x, y);
        if (!arrayResult.eq)
            return arrayResult;
    }
    else if (typeX === 'object') {
        var objectResult = compareObjects(x, y);
        if (!objectResult.eq)
            return objectResult;
    }
    return pass();
};
export var compare = function (x, y) {
    var result = doCompare(x, y);
    var bar = '-----------------------------------------------------------------------';
    return {
        eq: result.eq,
        why: function () { return result.why() + '\n' + bar + '\n' + JSON.stringify(x) + '\n' + bar + '\n' + JSON.stringify(y) + '\n' + bar + '\n'; }
    };
};
//# sourceMappingURL=Compare.js.map