import { Testable, Pprint } from '@ephox/dispute';
import { TestLabel } from './TestLabel';
import { TestError } from '@ephox/bedrock-common';
var eq = function (message, expected, actual, tt) {
    if (tt === void 0) { tt = Testable.tAny; }
    var result = tt.eq(expected, actual);
    if (!result) {
        var sMessage = TestLabel.asString(message);
        var ppExpected = Pprint.render(expected, tt);
        var ppActual = Pprint.render(actual, tt);
        throw TestError.pprintAssertionError(sMessage, ppExpected, ppActual);
    }
};
var throws = function (message, f, expected) {
    var token = {};
    try {
        f();
        // noinspection ExceptionCaughtLocallyJS
        throw token;
    }
    catch (e) {
        if (e === token) {
            throw new Error('Expected function to throw, but it didn\'t.\n' + TestLabel.asString(message));
        }
        if (expected !== undefined) {
            eq(message, expected, e);
        }
    }
};
var throwsError = function (message, f, expected) {
    var token = {};
    try {
        f();
        // noinspection ExceptionCaughtLocallyJS
        throw token;
    }
    catch (e) {
        if (e === token) {
            throw new Error('Expected function to throw, but it didn\'t.\n' + TestLabel.asString(message));
        }
        if (expected !== undefined) {
            eq(message, expected, e.message);
        }
    }
};
var succeeds = function (message, f) {
    try {
        f();
    }
    catch (e) {
        throw new Error('Expected function to not throw, but it did.\n' + TestLabel.asString(message));
    }
};
var fail = function (message) {
    throw new Error('Test failed\n' + TestLabel.asString(message));
};
export { eq, throws, throwsError, succeeds, fail };
//# sourceMappingURL=NewAssert.js.map