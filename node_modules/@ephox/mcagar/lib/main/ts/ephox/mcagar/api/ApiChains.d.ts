import { Chain, Cursors, StructAssert } from '@ephox/agar';
import { Editor } from '../alien/EditorTypes';
import { Presence } from './TinyApis';
export interface ApiChains {
    cNodeChanged: <T extends Editor>() => Chain<T, T>;
    cSetContent: <T extends Editor>(html: string) => Chain<T, T>;
    cSetRawContent: <T extends Editor>(html: string) => Chain<T, T>;
    cSetSelectionFrom: <T extends Editor>(spec: Cursors.CursorSpec | Cursors.RangeSpec) => Chain<T, T>;
    cSetSelection: <T extends Editor>(startPath: number[], soffset: number, finishPath: number[], foffset: number) => Chain<T, T>;
    cSetCursor: <T extends Editor>(elementPath: number[], offset: number) => Chain<T, T>;
    cDeleteSetting: <T extends Editor>(key: string) => Chain<T, T>;
    cSetSetting: <T extends Editor>(key: string, value: any) => Chain<T, T>;
    cGetContent: Chain<Editor, string>;
    cExecCommand: <T extends Editor>(command: string, value?: any) => Chain<T, T>;
    cAssertContent: <T extends Editor>(expected: string) => Chain<T, T>;
    cAssertContentPresence: <T extends Editor>(expected: Presence) => Chain<T, T>;
    cAssertContentStructure: <T extends Editor>(expected: StructAssert) => Chain<T, T>;
    cSelect: <T extends Editor>(selector: string, path: number[]) => Chain<T, T>;
    cFocus: Chain<Editor, Editor>;
    cAssertSelection: <T extends Editor>(startPath: number[], soffset: number, finishPath: number[], foffset: number) => Chain<T, T>;
}
export declare const ApiChains: ApiChains;
//# sourceMappingURL=ApiChains.d.ts.map