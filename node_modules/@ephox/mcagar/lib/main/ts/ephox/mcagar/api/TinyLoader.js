import { __assign } from "tslib";
import { Option, Strings, Type } from '@ephox/katamari';
import 'tinymce';
import * as Loader from '../loader/Loader';
import { setTinymceBaseUrl } from '../loader/Urls';
var setupBaseUrl = function (tinymce, settings) {
    if (settings.base_url) {
        setTinymceBaseUrl(tinymce, settings.base_url);
    }
    else if (!Type.isString(tinymce.baseURL) || !Strings.contains(tinymce.baseURL, '/project/')) {
        setTinymceBaseUrl(tinymce, "/project/node_modules/tinymce");
    }
};
var setupLight = function (callback, settings, success, failure) {
    var nuSettings = __assign({ toolbar: '', menubar: false, statusbar: false }, settings);
    Loader.setup({
        preInit: setupBaseUrl,
        run: callback,
        success: success,
        failure: failure
    }, nuSettings, Option.none());
};
var setup = function (callback, settings, success, failure) {
    Loader.setup({
        preInit: setupBaseUrl,
        run: callback,
        success: success,
        failure: failure
    }, settings, Option.none());
};
var setupFromElement = function (callback, settings, element, success, failure) {
    Loader.setup({
        preInit: setupBaseUrl,
        run: callback,
        success: success,
        failure: failure
    }, settings, Option.some(element));
};
export { setup, setupLight, setupFromElement };
//# sourceMappingURL=TinyLoader.js.map