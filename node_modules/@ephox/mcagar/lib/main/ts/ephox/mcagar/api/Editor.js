import { __assign } from "tslib";
import { Chain } from '@ephox/agar';
import { setTimeout } from '@ephox/dom-globals';
import { Global, Id, Strings, Type } from '@ephox/katamari';
import { Attr, Body, Element, Insert, Remove, Selectors } from '@ephox/sugar';
import 'tinymce';
import { setTinymceBaseUrl } from '../loader/Urls';
var cFromElement = function (element, settings) {
    return Chain.async(function (_, next, die) {
        var nuSettings = __assign({ toolbar_mode: 'wrap' }, settings);
        var randomId = Id.generate('tiny-loader');
        Attr.set(element, 'id', randomId);
        if (!Body.inBody(element)) {
            Insert.append(Body.body(), element);
        }
        var tinymce = Global.tinymce;
        if (nuSettings.base_url) {
            setTinymceBaseUrl(tinymce, nuSettings.base_url);
        }
        else if (!Type.isString(tinymce.baseURL) || !Strings.contains(tinymce.baseURL, '/project/')) {
            setTinymceBaseUrl(Global.tinymce, "/project/node_modules/tinymce");
        }
        tinymce.init(__assign(__assign({}, nuSettings), { selector: '#' + randomId, setup: function (editor) {
                if (Type.isFunction(nuSettings.setup)) {
                    nuSettings.setup(editor);
                }
                editor.on('SkinLoaded', function () {
                    setTimeout(function () {
                        next(editor);
                    }, 0);
                });
                editor.on('SkinLoadError', function (e) {
                    die(e.message);
                });
            } }));
    });
};
var cFromHtml = function (html, settings) {
    var element = html ? Element.fromHtml(html) : Element.fromTag(settings.inline ? 'div' : 'textarea');
    return cFromElement(element, settings);
};
var cFromSettings = function (settings) {
    return cFromHtml(null, settings);
};
var cRemove = Chain.op(function (editor) {
    var id = editor.id;
    editor.remove();
    Selectors.one('#' + id).each(Remove.remove);
});
var cCreate = cFromSettings({});
var cCreateInline = cFromSettings({ inline: true });
export { cFromHtml, cFromElement, cFromSettings, cCreate, cCreateInline, cRemove };
//# sourceMappingURL=Editor.js.map