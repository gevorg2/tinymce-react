import { Step } from '@ephox/agar';
import { Node as DomNode } from '@ephox/dom-globals';
import { Editor } from '../alien/EditorTypes';
declare type SyncTestCallback<T> = (initValue: T) => void;
declare type AsyncTestCallback<T> = (initValue: T, done: () => void, die: (err?: any) => void) => void;
declare type Offset = 'after' | 'afterNextCharacter' | number;
declare const test: <T>(message: string, fn: SyncTestCallback<T>) => (initValue: T) => Step<unknown, unknown>;
declare const asyncTest: <T>(message: string, fn: AsyncTestCallback<T>) => (initValue: T) => Step<unknown, unknown>;
declare const createSuite: <T = any>() => {
    test(message: string, fn: SyncTestCallback<T>): void;
    asyncTest(message: string, fn: AsyncTestCallback<T>): void;
    toSteps(initValue: T): Step<any, any>[];
};
declare const execCommand: <T extends Editor = Editor>(editor: T, cmd: string, ui?: boolean | undefined, value?: any) => void;
declare const setSelection: <T extends Editor = Editor>(editor: T, startSelector: string, startOffset: Offset, endSelector?: string | undefined, endOffset?: number | "after" | "afterNextCharacter" | undefined) => void;
declare const trimBrs: (html: string) => string;
declare const equalDom: <T extends DomNode>(actual: T, expected: T, message?: string | undefined) => void;
declare const equal: <T>(actual: T, expected: T, message?: string | undefined) => void;
declare const strictEqual: <T>(actual: T, expected: T, message?: string | undefined) => void;
declare const deepEqual: <T>(actual: T, expected: T, message?: string | undefined) => void;
export { test, asyncTest, createSuite, execCommand, setSelection, trimBrs, equal, equalDom, strictEqual, deepEqual };
//# sourceMappingURL=LegacyUnit.d.ts.map