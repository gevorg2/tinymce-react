import { Chain, Cursors, Step, StructAssert } from '@ephox/agar';
import { Editor } from '../alien/EditorTypes';
export interface Presence {
    [selector: string]: number;
}
export interface TinyApis {
    sSetContent: <T>(html: string) => Step<T, T>;
    sSetRawContent: <T>(html: string) => Step<T, T>;
    sFocus: <T>() => Step<T, T>;
    sNodeChanged: <T>() => Step<T, T>;
    sAssertContent: <T>(expected: string) => Step<T, T>;
    sAssertContentPresence: <T>(expected: Presence) => Step<T, T>;
    sAssertContentStructure: <T>(expected: StructAssert) => Step<T, T>;
    sAssertSelection: <T>(startPath: number[], soffset: number, finishPath: number[], foffset: number) => Step<T, T>;
    sSetCursor: <T>(elementPath: number[], offset: number) => Step<T, T>;
    sSetSelectionFrom: <T>(spec: Cursors.CursorSpec | Cursors.RangeSpec) => Step<T, T>;
    sSetSelection: <T>(startPath: number[], soffset: number, finishPath: number[], foffset: number) => Step<T, T>;
    sSelect: <T>(selector: string, path: number[]) => Step<T, T>;
    sDeleteSetting: <T>(key: string) => Step<T, T>;
    sSetSetting: <T>(key: string, value: any) => Step<T, T>;
    sExecCommand: <T>(command: string, value?: any) => Step<T, T>;
    sTryAssertFocus: <T>() => Step<T, T>;
    cNodeChanged: <T>() => Chain<T, T>;
    cGetContent: <T>() => Chain<T, string>;
}
export declare const TinyApis: (editor: Editor) => TinyApis;
//# sourceMappingURL=TinyApis.d.ts.map