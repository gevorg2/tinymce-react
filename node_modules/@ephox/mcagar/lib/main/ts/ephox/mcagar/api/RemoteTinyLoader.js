import { TestLogs } from '@ephox/agar';
import { Arr, FutureResult, Option, Result } from '@ephox/katamari';
import { Attr, Body, DomEvent, Element, Insert } from '@ephox/sugar';
import * as Loader from '../loader/Loader';
import { setTinymceBaseUrl } from '../loader/Urls';
var setupBaseUrl = function (tinymce, settings) {
    if (settings.base_url) {
        setTinymceBaseUrl(tinymce, settings.base_url);
    }
};
var loadScript = function (url) {
    return FutureResult.nu(function (resolve) {
        var script = Element.fromTag('script');
        Attr.set(script, 'referrerpolicy', 'origin');
        Attr.set(script, 'src', url);
        var onLoad = DomEvent.bind(script, 'load', function () {
            onLoad.unbind();
            onError.unbind();
            resolve(Result.value(url));
        });
        var onError = DomEvent.bind(script, 'error', function () {
            onLoad.unbind();
            onError.unbind();
            resolve(Result.error(new Error('Failed to load script: ' + url)));
        });
        Insert.append(Body.body(), script);
    });
};
var loadScripts = function (urls, success, failure) {
    var result = Arr.foldl(urls, function (acc, url) {
        return acc.bindFuture(function () { return loadScript(url); });
    }, FutureResult.pure(''));
    result.get(function (res) {
        res.fold(function (e) { return failure(e, TestLogs.init()); }, success);
    });
};
var setup = function (callback, urls, settings, success, failure) {
    loadScripts(urls, function () {
        Loader.setup({
            preInit: setupBaseUrl,
            run: callback,
            success: success,
            failure: failure
        }, settings, Option.none());
    }, failure);
};
var setupFromElement = function (callback, urls, settings, element, success, failure) {
    loadScripts(urls, function () {
        Loader.setup({
            preInit: setupBaseUrl,
            run: callback,
            success: success,
            failure: failure
        }, settings, Option.some(element));
    }, failure);
};
export { setup, setupFromElement };
//# sourceMappingURL=RemoteTinyLoader.js.map