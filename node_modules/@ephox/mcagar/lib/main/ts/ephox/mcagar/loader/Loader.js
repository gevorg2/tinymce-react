import { __assign } from "tslib";
import { console, document, setTimeout } from '@ephox/dom-globals';
import { Arr, Fun, Global, Id } from '@ephox/katamari';
import { Attr, Body, Element, Insert, Remove, SelectorFilter } from '@ephox/sugar';
var createTarget = function (inline) { return Element.fromTag(inline ? 'div' : 'textarea'); };
var removeTinymceElements = function () {
    // NOTE: Don't remove the link/scripts added, as those are part of the global tinymce which we don't clean up
    var elements = Arr.flatten([
        // Some older versions of tinymce leaves elements behind in the dom
        SelectorFilter.all('.mce-notification,.mce-window,#mce-modal-block'),
        // TinyMCE leaves inline editor content_styles in the dom
        SelectorFilter.children(Element.fromDom(document.head), 'style')
    ]);
    Arr.each(elements, Remove.remove);
};
var setup = function (callbacks, settings, elementOpt) {
    var target = elementOpt.getOrThunk(function () { return createTarget(settings.inline); });
    var randomId = Id.generate('tiny-loader');
    Attr.set(target, 'id', randomId);
    if (!Body.inBody(target)) {
        Insert.append(Body.body(), target);
    }
    var teardown = function () {
        tinymce.remove();
        Remove.remove(target);
        removeTinymceElements();
    };
    // Agar v. ??? supports logging
    var onSuccess = function (v, logs) {
        teardown();
        // We may want to continue the logs for multiple editor
        // loads in the same test
        callbacks.success(v, logs);
    };
    // Agar v. ??? supports logging
    var onFailure = function (err, logs) {
        // tslint:disable-next-line:no-console
        console.log('Tiny Loader error: ', err);
        // Do no teardown so that the failed test still shows the editor. Important for selection
        callbacks.failure(err, logs);
    };
    var settingsSetup = settings.setup !== undefined ? settings.setup : Fun.noop;
    var tinymce = Global.tinymce;
    if (!tinymce) {
        callbacks.failure('Failed to get global tinymce instance');
    }
    else {
        callbacks.preInit(tinymce, settings);
        tinymce.init(__assign(__assign({}, settings), { selector: '#' + randomId, setup: function (editor) {
                // Execute the setup called by the test.
                settingsSetup(editor);
                editor.on('SkinLoaded', function () {
                    setTimeout(function () {
                        callbacks.run(editor, onSuccess, onFailure);
                    }, 0);
                });
                editor.on('SkinLoadError', function (e) {
                    callbacks.failure(e.message);
                });
            } }));
    }
};
export { setup };
//# sourceMappingURL=Loader.js.map