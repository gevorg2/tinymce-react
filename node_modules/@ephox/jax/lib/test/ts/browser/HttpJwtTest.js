import { Arr, FutureResult, Result } from '@ephox/katamari';
import { UnitTest, assert } from '@ephox/bedrock-client';
import { console } from '@ephox/dom-globals';
import * as HttpJwt from 'ephox/jax/core/HttpJwt';
import { DataType } from 'ephox/jax/core/DataType';
/* tslint:disable:no-console */
var expectError = function (label, response, expectedCalls, actualCalls) {
    return FutureResult.nu(function (callback) {
        response.get(function (res) {
            res.fold(function (err) {
                console.log(label, 'successfully failed');
                assert.eq(expectedCalls, actualCalls);
                actualCalls = [];
                callback(Result.value({}));
            }, function (val) {
                callback(Result.error('Unexpected value in test: ' + label));
            });
        });
    });
};
var expectValue = function (label, value, response, expectedCalls, actualCalls) {
    return FutureResult.nu(function (callback) {
        response.get(function (res) {
            res.fold(function (err) {
                callback(Result.error(new Error(err.message)));
            }, function (val) {
                try {
                    assert.eq(value, val);
                    console.log(label, 'passed with ', val);
                    assert.eq(expectedCalls, actualCalls);
                    actualCalls = [];
                    callback(Result.value({}));
                }
                catch (err) {
                    callback(Result.error(err));
                }
            });
        });
    });
};
UnitTest.asynctest('HttpTest', function (success, failure) {
    var invalidCalls = [];
    var validCalls = [];
    var fakeFactory = function (calls) { return function (fresh) {
        if (fresh) {
            calls.push('fresh');
            return FutureResult.value('token');
        }
        else {
            calls.push('cached');
            return FutureResult.value('token');
        }
    }; };
    var responses = [
        expectError('GET on invalid url', HttpJwt.get({
            url: '/custom/jax/sample/token/invalid',
            responseType: DataType.JSON,
        }, fakeFactory(invalidCalls)), ['cached', 'fresh'], invalidCalls),
        expectValue('GET on valid url', {}, HttpJwt.get({
            url: '/custom/jax/sample/token/valid',
            responseType: DataType.JSON,
        }, fakeFactory(validCalls)), ['cached'], validCalls)
    ];
    Arr.foldr(responses, function (res, rest) {
        return rest.bindFuture(function () {
            return res;
        });
    }, FutureResult.pure({})).get(function (v) {
        v.fold(function (err) {
            failure(err);
        }, function (_) {
            success();
        });
    });
});
//# sourceMappingURL=HttpJwtTest.js.map