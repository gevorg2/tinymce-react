import { Future, Option } from '@ephox/katamari';
import * as JsonResponse from './JsonResponse';
import { DataType } from './DataType';
import { readBlobAsText } from './BlobReader';
// can't get responseText of a blob, throws a DomException. Need to use FileReader.
// request.response can be null if the server provided no content in the error response.
var getBlobError = function (request) { return Option.from(request.response).map(readBlobAsText).getOr(Future.pure('no response content')); };
var fallback = function (request) { return Future.pure(request.response); };
var getResponseText = function (responseType, request) {
    // for errors, the responseText is json if it can be, fallback if it can't
    switch (responseType) {
        case DataType.JSON: return JsonResponse.create(request.response).fold(function () { return fallback(request); }, Future.pure);
        case DataType.Blob: return getBlobError(request);
        case DataType.Text: return fallback(request);
        default: return fallback(request);
    }
};
export var handle = function (url, responseType, request) {
    return getResponseText(responseType, request).map(function (responseText) {
        var message = request.status === 0 ? 'Unknown HTTP error (possible cross-domain request)' : "Could not load url " + url + ": " + request.statusText;
        return {
            message: message,
            status: request.status,
            responseText: responseText
        };
    });
};
//# sourceMappingURL=ResponseError.js.map