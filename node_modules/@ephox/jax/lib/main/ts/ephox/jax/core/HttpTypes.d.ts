import { FutureResult } from '@ephox/katamari';
import { ResponseBodyDataTypes, RequestBody, ResponseBody } from './HttpData';
import { HttpError } from './HttpError';
export declare const enum HttpMethod {
    Get = "get",
    Post = "post",
    Delete = "delete",
    Patch = "patch",
    Put = "put"
}
export declare type ProgressFunction = (loaded: number, total: number) => void;
export declare type LoadedProgressFunction = (loaded: number) => void;
export interface HttpRequest<T extends ResponseBodyDataTypes> {
    responseType: T;
    body: RequestBody;
    url: string;
    method: HttpMethod;
    query?: Record<string, string>;
    progress?: ProgressFunction;
    headers?: Record<string, string>;
    credentials?: boolean;
}
export interface HttpResponse<T extends ResponseBody> {
    headers: Record<string, string>;
    statusCode: number;
    body: T;
}
export declare type JwtToken = string;
export declare type JwtTokenFactory = (fresh: boolean) => FutureResult<JwtToken, HttpError>;
declare type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
export declare type PostPutInit<T extends ResponseBodyDataTypes> = Omit<HttpRequest<T>, 'method'>;
export declare type GetDelInit<T extends ResponseBodyDataTypes> = Omit<HttpRequest<T>, 'method' | 'body'>;
export interface DownloadHttpRequest {
    url: string;
    progress?: LoadedProgressFunction;
    headers?: Record<string, string>;
    credentials?: boolean;
}
export {};
//# sourceMappingURL=HttpTypes.d.ts.map