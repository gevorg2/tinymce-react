import { JwtTokenFactory, HttpRequest } from './HttpTypes';
import { FutureResult } from '@ephox/katamari';
import { ResponseTypeMap } from './HttpData';
import { HttpError } from './HttpError';
export declare const post: <T extends import("./DataType").DataType.JSON | import("./DataType").DataType.Blob | import("./DataType").DataType.Text>(init: Pick<HttpRequest<T>, "progress" | "body" | "responseType" | "url" | "query" | "headers" | "credentials">, tokenFactory: JwtTokenFactory) => FutureResult<ResponseTypeMap[T], HttpError>;
export declare const put: <T extends import("./DataType").DataType.JSON | import("./DataType").DataType.Blob | import("./DataType").DataType.Text>(init: Pick<HttpRequest<T>, "progress" | "body" | "responseType" | "url" | "query" | "headers" | "credentials">, tokenFactory: JwtTokenFactory) => FutureResult<ResponseTypeMap[T], HttpError>;
export declare const get: <T extends import("./DataType").DataType.JSON | import("./DataType").DataType.Blob | import("./DataType").DataType.Text>(init: Pick<HttpRequest<T>, "progress" | "responseType" | "url" | "query" | "headers" | "credentials">, tokenFactory: JwtTokenFactory) => FutureResult<ResponseTypeMap[T], HttpError>;
export declare const del: <T extends import("./DataType").DataType.JSON | import("./DataType").DataType.Blob | import("./DataType").DataType.Text>(init: Pick<HttpRequest<T>, "progress" | "responseType" | "url" | "query" | "headers" | "credentials">, tokenFactory: JwtTokenFactory) => FutureResult<ResponseTypeMap[T], HttpError>;
//# sourceMappingURL=HttpJwt.d.ts.map