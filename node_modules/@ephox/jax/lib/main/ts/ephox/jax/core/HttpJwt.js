import { __assign } from "tslib";
import * as Http from './Http';
import { FutureResult } from '@ephox/katamari';
var headers = function (headersInput, token) {
    var authHeader = { Authorization: 'Bearer ' + token };
    return headersInput ? __assign(__assign({}, headersInput), authHeader) : authHeader;
};
var requestFreshToken = function (tokenFactory) { return tokenFactory(true); };
var requestCachedToken = function (tokenFactory) { return tokenFactory(false); };
var tryAgain = function (tokenFactory, runMethod) { return function (error) {
    return error.status === 401 /* Unauthorized */ ? requestFreshToken(tokenFactory).bindFuture(runMethod) : FutureResult.error(error);
}; };
var runWithToken = function (runMethod, tokenFactory) {
    return requestCachedToken(tokenFactory)
        .bindFuture(function (token) { return runMethod(token).bind(function (result) { return result.fold(tryAgain(tokenFactory, runMethod), FutureResult.pure); }); });
};
export var post = function (init, tokenFactory) {
    return runWithToken(function (token) { return Http.post(__assign(__assign({}, init), { headers: headers(init.headers, token) })); }, tokenFactory);
};
export var put = function (init, tokenFactory) {
    return runWithToken(function (token) { return Http.put(__assign(__assign({}, init), { headers: headers(init.headers, token) })); }, tokenFactory);
};
export var get = function (init, tokenFactory) {
    return runWithToken(function (token) { return Http.get(__assign(__assign({}, init), { headers: headers(init.headers, token) })); }, tokenFactory);
};
export var del = function (init, tokenFactory) {
    return runWithToken(function (token) { return Http.del(__assign(__assign({}, init), { headers: headers(init.headers, token) })); }, tokenFactory);
};
//# sourceMappingURL=HttpJwt.js.map