import { Blob } from '@ephox/dom-globals';
import { FutureResult } from '@ephox/katamari';
import * as HttpTypes from './HttpTypes';
import { HttpError } from './HttpError';
import { DataType } from './DataType';
import { ResponseTypeMap } from './HttpData';
declare const send: <T extends DataType.JSON | DataType.Blob | DataType.Text>(init: HttpTypes.HttpRequest<T>) => FutureResult<ResponseTypeMap[T], HttpError>;
declare const post: <T extends DataType.JSON | DataType.Blob | DataType.Text>(init: Pick<HttpTypes.HttpRequest<T>, "progress" | "body" | "responseType" | "url" | "query" | "headers" | "credentials">) => FutureResult<ResponseTypeMap[T], HttpError>;
declare const put: <T extends DataType.JSON | DataType.Blob | DataType.Text>(init: Pick<HttpTypes.HttpRequest<T>, "progress" | "body" | "responseType" | "url" | "query" | "headers" | "credentials">) => FutureResult<ResponseTypeMap[T], HttpError>;
declare const get: <T extends DataType.JSON | DataType.Blob | DataType.Text>(init: Pick<HttpTypes.HttpRequest<T>, "progress" | "responseType" | "url" | "query" | "headers" | "credentials">) => FutureResult<ResponseTypeMap[T], HttpError>;
declare const del: <T extends DataType.JSON | DataType.Blob | DataType.Text>(init: Pick<HttpTypes.HttpRequest<T>, "progress" | "responseType" | "url" | "query" | "headers" | "credentials">) => FutureResult<ResponseTypeMap[T], HttpError>;
declare const download: (init: HttpTypes.DownloadHttpRequest) => FutureResult<Blob, HttpError>;
export { send, post, put, get, del, download };
//# sourceMappingURL=Http.d.ts.map