import { Range, Window, Node as DomNode } from '@ephox/dom-globals';
import { Option } from '@ephox/katamari';
import Element from '../../api/node/Element';
import { Situ } from '../../api/selection/Situ';
import { StructRect } from '../../api/selection/Rect';
declare const selectNodeContents: (win: Window, element: Element<DomNode>) => Range;
declare const selectNodeContentsUsing: (rng: Range, element: Element<DomNode>) => void;
declare const isWithin: (outerRange: Range, innerRange: Range) => boolean;
declare const create: (win: Window) => Range;
declare const replaceWith: (rng: Range, fragment: Element<DomNode>) => void;
declare const relativeToNative: (win: Window, startSitu: Situ, finishSitu: Situ) => Range;
declare const exactToNative: (win: Window, start: Element<DomNode>, soffset: number, finish: Element<DomNode>, foffset: number) => Range;
declare const deleteContents: (rng: Range) => void;
declare const cloneFragment: (rng: Range) => Element<import("@ephox/dom-globals").DocumentFragment>;
declare const getFirstRect: (rng: Range) => Option<StructRect>;
declare const getBounds: (rng: Range) => Option<StructRect>;
declare const toString: (rng: Range) => string;
export { create, replaceWith, selectNodeContents, selectNodeContentsUsing, relativeToNative, exactToNative, deleteContents, cloneFragment, getFirstRect, getBounds, isWithin, toString, };
//# sourceMappingURL=NativeRange.d.ts.map