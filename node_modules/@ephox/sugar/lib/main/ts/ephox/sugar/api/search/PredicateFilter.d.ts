import Element from '../node/Element';
import { Node as DomNode } from '@ephox/dom-globals';
declare const all: {
    <T extends DomNode = DomNode>(predicate: (e: Element<DomNode>) => e is Element<T>): Element<T>[];
    (predicate: (e: Element<DomNode>) => boolean): Element<DomNode>[];
};
declare const ancestors: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>, isRoot?: (e: Element<DomNode>) => boolean): Element<T>[];
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean, isRoot?: (e: Element<DomNode>) => boolean): Element<DomNode>[];
};
declare const siblings: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>): Element<T>[];
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean): Element<DomNode>[];
};
declare const children: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>): Element<T>[];
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean): Element<DomNode>[];
};
declare const descendants: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>): Element<T>[];
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean): Element<DomNode>[];
};
export { all, ancestors, siblings, children, descendants, };
//# sourceMappingURL=PredicateFilter.d.ts.map