import { Arr, Fun, Option, Struct, Type } from '@ephox/katamari';
import Recurse from '../../alien/Recurse';
import * as Compare from '../dom/Compare';
import Element from '../node/Element';
// The document associated with the current element
var owner = function (element) {
    return Element.fromDom(element.dom().ownerDocument);
};
var documentElement = function (element) {
    return Element.fromDom(element.dom().ownerDocument.documentElement);
};
// The window element associated with the element
var defaultView = function (element) {
    return Element.fromDom(element.dom().ownerDocument.defaultView);
};
var parent = function (element) {
    return Option.from(element.dom().parentNode).map(Element.fromDom);
};
var findIndex = function (element) {
    return parent(element).bind(function (p) {
        // TODO: Refactor out children so we can avoid the constant unwrapping
        var kin = children(p);
        return Arr.findIndex(kin, function (elem) {
            return Compare.eq(element, elem);
        });
    });
};
var parents = function (element, isRoot) {
    var stop = Type.isFunction(isRoot) ? isRoot : Fun.never;
    // This is used a *lot* so it needs to be performant, not recursive
    var dom = element.dom();
    var ret = [];
    while (dom.parentNode !== null && dom.parentNode !== undefined) {
        var rawParent = dom.parentNode;
        var p = Element.fromDom(rawParent);
        ret.push(p);
        if (stop(p) === true) {
            break;
        }
        else {
            dom = rawParent;
        }
    }
    return ret;
};
var siblings = function (element) {
    // TODO: Refactor out children so we can just not add self instead of filtering afterwards
    var filterSelf = function (elements) {
        return Arr.filter(elements, function (x) {
            return !Compare.eq(element, x);
        });
    };
    return parent(element).map(children).map(filterSelf).getOr([]);
};
var offsetParent = function (element) {
    return Option.from(element.dom().offsetParent).map(Element.fromDom);
};
var prevSibling = function (element) {
    return Option.from(element.dom().previousSibling).map(Element.fromDom);
};
var nextSibling = function (element) {
    return Option.from(element.dom().nextSibling).map(Element.fromDom);
};
var prevSiblings = function (element) {
    // This one needs to be reversed, so they're still in DOM order
    return Arr.reverse(Recurse.toArray(element, prevSibling));
};
var nextSiblings = function (element) {
    return Recurse.toArray(element, nextSibling);
};
var children = function (element) {
    return Arr.map(element.dom().childNodes, Element.fromDom);
};
var child = function (element, index) {
    var cs = element.dom().childNodes;
    return Option.from(cs[index]).map(Element.fromDom);
};
var firstChild = function (element) {
    return child(element, 0);
};
var lastChild = function (element) {
    return child(element, element.dom().childNodes.length - 1);
};
var childNodesCount = function (element) {
    return element.dom().childNodes.length;
};
var hasChildNodes = function (element) {
    return element.dom().hasChildNodes();
};
var spot = Struct.immutable('element', 'offset');
var leaf = function (element, offset) {
    var cs = children(element);
    return cs.length > 0 && offset < cs.length ? spot(cs[offset], 0) : spot(element, offset);
};
export { owner, defaultView, documentElement, parent, findIndex, parents, siblings, prevSibling, offsetParent, prevSiblings, nextSibling, nextSiblings, children, child, firstChild, lastChild, childNodesCount, hasChildNodes, leaf, };
//# sourceMappingURL=Traverse.js.map