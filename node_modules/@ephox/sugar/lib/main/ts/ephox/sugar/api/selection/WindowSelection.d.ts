import { Range, Window, Node as DomNode, Element as DomElement } from '@ephox/dom-globals';
import { Option } from '@ephox/katamari';
import Element from '../node/Element';
import { Selection } from './Selection';
import { SimRange } from './SimRange';
import { Situ } from './Situ';
declare const findWithin: (win: Window, selection: Selection, selector: string) => Element<DomElement>[];
declare const setExact: (win: Window, start: Element<DomNode>, soffset: number, finish: Element<DomNode>, foffset: number) => void;
declare const setRelative: (win: Window, startSitu: Situ, finishSitu: Situ) => void;
declare const toNative: (selection: Selection) => Range;
declare const setToElement: (win: Window, element: Element<DomNode>) => void;
declare const forElement: (win: Window, element: Element<DomNode>) => SimRange;
declare const getExact: (win: Window) => Option<SimRange>;
declare const get: (win: Window) => Option<Selection>;
declare const getFirstRect: (win: Window, selection: Selection) => Option<import("./Rect").StructRect>;
declare const getBounds: (win: Window, selection: Selection) => Option<import("./Rect").StructRect>;
declare const getAtPoint: (win: Window, x: number, y: number) => Option<SimRange>;
declare const getAsString: (win: Window, selection: Selection) => string;
declare const clear: (win: Window) => void;
declare const clone: (win: Window, selection: Selection) => Element<import("@ephox/dom-globals").DocumentFragment>;
declare const replace: (win: Window, selection: Selection, elements: Element<DomNode>[]) => void;
declare const deleteAt: (win: Window, selection: Selection) => void;
declare const isCollapsed: (start: Element<DomNode>, soffset: number, finish: Element<DomNode>, foffset: number) => boolean;
export { setExact, getExact, get, setRelative, toNative, setToElement, clear, clone, replace, deleteAt, forElement, getFirstRect, getBounds, getAtPoint, findWithin, getAsString, isCollapsed, };
//# sourceMappingURL=WindowSelection.d.ts.map