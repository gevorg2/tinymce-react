import Element from '../node/Element';
import { Node as DomNode, Element as DomElement } from '@ephox/dom-globals';
import { Option } from '@ephox/katamari';
declare const first: <T extends DomElement = DomElement>(selector: string) => Option<Element<T>>;
declare const ancestor: <T extends DomElement = DomElement>(scope: Element<DomNode>, selector: string, isRoot?: (e: Element<DomNode>) => boolean) => Option<Element<T>>;
declare const sibling: <T extends DomElement = DomElement>(scope: Element<DomNode>, selector: string) => Option<Element<T>>;
declare const child: <T extends DomElement = DomElement>(scope: Element<DomNode>, selector: string) => Option<Element<T>>;
declare const descendant: <T extends DomElement = DomElement>(scope: Element<DomNode>, selector: string) => Option<Element<T>>;
declare const closest: <T extends DomElement = DomElement>(scope: Element<DomNode>, selector: string, isRoot?: (e: Element<DomNode>) => boolean) => Option<Element<T>>;
export { first, ancestor, sibling, child, descendant, closest, };
//# sourceMappingURL=SelectorFind.d.ts.map