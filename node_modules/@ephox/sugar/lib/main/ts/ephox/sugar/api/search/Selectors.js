import { Arr, Option } from '@ephox/katamari';
import Element from '../node/Element';
import * as NodeTypes from '../node/NodeTypes';
import { document } from '@ephox/dom-globals';
var ELEMENT = NodeTypes.ELEMENT;
var DOCUMENT = NodeTypes.DOCUMENT;
var is = function (element, selector) {
    var dom = element.dom();
    if (dom.nodeType !== ELEMENT) {
        return false;
    }
    else {
        var elem = dom;
        if (elem.matches !== undefined) {
            return elem.matches(selector);
        }
        else if (elem.msMatchesSelector !== undefined) {
            return elem.msMatchesSelector(selector);
        }
        else if (elem.webkitMatchesSelector !== undefined) {
            return elem.webkitMatchesSelector(selector);
        }
        else if (elem.mozMatchesSelector !== undefined) {
            // cast to any as mozMatchesSelector doesn't exist in TS DOM lib
            return elem.mozMatchesSelector(selector);
        }
        else {
            throw new Error('Browser lacks native selectors');
        } // unfortunately we can't throw this on startup :(
    }
};
var bypassSelector = function (dom) {
    // Only elements and documents support querySelector
    return dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT ||
        // IE fix for complex queries on empty nodes: http://jsfiddle.net/spyder/fv9ptr5L/
        dom.childElementCount === 0;
};
var all = function (selector, scope) {
    var base = scope === undefined ? document : scope.dom();
    return bypassSelector(base) ? [] : Arr.map(base.querySelectorAll(selector), Element.fromDom);
};
var one = function (selector, scope) {
    var base = scope === undefined ? document : scope.dom();
    return bypassSelector(base) ? Option.none() : Option.from(base.querySelector(selector)).map(Element.fromDom);
};
export { all, is, one, };
//# sourceMappingURL=Selectors.js.map