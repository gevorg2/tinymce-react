import { console } from '@ephox/dom-globals';
import { Arr, Obj, Option, Type } from '@ephox/katamari';
import * as Node from '../node/Node';
var rawSet = function (dom, key, value) {
    /*
     * JQuery coerced everything to a string, and silently did nothing on text node/null/undefined.
     *
     * We fail on those invalid cases, only allowing numbers and booleans.
     */
    if (Type.isString(value) || Type.isBoolean(value) || Type.isNumber(value)) {
        dom.setAttribute(key, value + '');
    }
    else {
        // tslint:disable-next-line:no-console
        console.error('Invalid call to Attr.set. Key ', key, ':: Value ', value, ':: Element ', dom);
        throw new Error('Attribute value was not simple');
    }
};
var set = function (element, key, value) {
    rawSet(element.dom(), key, value);
};
var setAll = function (element, attrs) {
    var dom = element.dom();
    Obj.each(attrs, function (v, k) {
        rawSet(dom, k, v);
    });
};
var get = function (element, key) {
    var v = element.dom().getAttribute(key);
    // undefined is the more appropriate value for JS, and this matches JQuery
    return v === null ? undefined : v;
};
var getOpt = function (element, key) {
    return Option.from(get(element, key));
};
var has = function (element, key) {
    var dom = element.dom();
    // return false for non-element nodes, no point in throwing an error
    return dom && dom.hasAttribute ? dom.hasAttribute(key) : false;
};
var remove = function (element, key) {
    element.dom().removeAttribute(key);
};
var hasNone = function (element) {
    var attrs = element.dom().attributes;
    return attrs === undefined || attrs === null || attrs.length === 0;
};
var clone = function (element) {
    // TypeScript really doesn't like NamedNodeMap as array
    return Arr.foldl(element.dom().attributes, function (acc, attr) {
        acc[attr.name] = attr.value;
        return acc;
    }, {});
};
var transferOne = function (source, destination, attr) {
    // NOTE: We don't want to clobber any existing attributes
    if (has(source, attr) && !has(destination, attr)) {
        set(destination, attr, get(source, attr));
    }
};
// Transfer attributes(attrs) from source to destination, unless they are already present
var transfer = function (source, destination, attrs) {
    if (!Node.isElement(source) || !Node.isElement(destination)) {
        return;
    }
    Arr.each(attrs, function (attr) {
        transferOne(source, destination, attr);
    });
};
export { clone, set, setAll, get, getOpt, has, remove, hasNone, transfer, };
//# sourceMappingURL=Attr.js.map