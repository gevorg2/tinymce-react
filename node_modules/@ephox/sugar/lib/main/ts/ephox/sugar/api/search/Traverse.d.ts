import { HTMLElement, Node as DomNode, Element as DomElement } from '@ephox/dom-globals';
import { Option } from '@ephox/katamari';
import Element from '../node/Element';
declare const owner: (element: Element<DomNode>) => Element<import("@ephox/dom-globals").Document>;
declare const documentElement: (element: Element<DomNode>) => Element<HTMLElement>;
declare const defaultView: (element: Element<DomNode>) => Element<import("@ephox/dom-globals").Window>;
declare const parent: (element: Element<DomNode>) => Option<Element<DomNode>>;
declare const findIndex: (element: Element<DomNode>) => Option<number>;
declare const parents: (element: Element<DomNode>, isRoot?: (e: Element<DomNode>) => boolean) => Element<DomNode>[];
declare const siblings: (element: Element<DomNode>) => Element<DomNode & import("@ephox/dom-globals").ChildNode>[];
declare const offsetParent: (element: Element<HTMLElement>) => Option<Element<DomElement>>;
declare const prevSibling: (element: Element<DomNode>) => Option<Element<DomNode>>;
declare const nextSibling: (element: Element<DomNode>) => Option<Element<DomNode>>;
declare const prevSiblings: (element: Element<DomNode>) => Element<DomNode>[];
declare const nextSiblings: (element: Element<DomNode>) => Element<DomNode>[];
declare const children: (element: Element<DomNode>) => Element<DomNode & import("@ephox/dom-globals").ChildNode>[];
declare const child: (element: Element<DomNode>, index: number) => Option<Element<DomNode>>;
declare const firstChild: (element: Element<DomNode>) => Option<Element<DomNode>>;
declare const lastChild: (element: Element<DomNode>) => Option<Element<DomNode>>;
declare const childNodesCount: (element: Element<DomNode>) => number;
declare const hasChildNodes: (element: Element<DomNode>) => boolean;
declare const leaf: (element: Element<DomNode>, offset: number) => {
    element: () => Element<DomNode>;
    offset: () => number;
};
export { owner, defaultView, documentElement, parent, findIndex, parents, siblings, prevSibling, offsetParent, prevSiblings, nextSibling, nextSiblings, children, child, firstChild, lastChild, childNodesCount, hasChildNodes, leaf, };
//# sourceMappingURL=Traverse.d.ts.map