import { Node as DomNode } from '@ephox/dom-globals';
import { Option } from '@ephox/katamari';
import Element from '../node/Element';
declare const first: {
    <T extends DomNode = DomNode>(predicate: (e: Element<DomNode>) => e is Element<T>): Option<Element<T>>;
    (predicate: (e: Element<DomNode>) => boolean): Option<Element<DomNode>>;
};
declare const ancestor: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>, isRoot?: (e: Element<DomNode>) => boolean): Option<Element<T>>;
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean, isRoot?: (e: Element<DomNode>) => boolean): Option<Element<DomNode>>;
};
declare const closest: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>, isRoot?: (e: Element<DomNode>) => boolean): Option<Element<T>>;
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean, isRoot?: (e: Element<DomNode>) => boolean): Option<Element<DomNode>>;
};
declare const sibling: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>): Option<Element<T>>;
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean): Option<Element<DomNode>>;
};
declare const child: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>): Option<Element<T>>;
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean): Option<Element<DomNode>>;
};
declare const descendant: {
    <T extends DomNode = DomNode>(scope: Element<DomNode>, predicate: (e: Element<DomNode>) => e is Element<T>): Option<Element<T>>;
    (scope: Element<DomNode>, predicate: (e: Element<DomNode>) => boolean): Option<Element<DomNode>>;
};
export { first, ancestor, closest, sibling, child, descendant, };
//# sourceMappingURL=PredicateFind.d.ts.map