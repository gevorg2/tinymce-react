import Element from '../node/Element';
import { Node as DomNode, Element as DomElement, ChildNode } from '@ephox/dom-globals';
export interface AddressInAncestor<A, D, E> {
    ancestor: () => Element<A>;
    descendants: () => Element<D>[];
    element: () => Element<E>;
    index: () => number;
}
export interface AddressInParent<P, C, E> {
    parent: () => Element<P>;
    children: () => Element<C>[];
    element: () => Element<E>;
    index: () => number;
}
declare const childOf: (element: Element<DomNode>, ancestor: Element<DomNode>) => import("@ephox/katamari").Option<Element<DomNode>>;
declare const indexInParent: <E extends DomNode>(element: Element<E>) => import("@ephox/katamari").Option<AddressInParent<DomNode, DomNode & ChildNode, E & DomNode & ChildNode>>;
declare const indexOf: (elements: Element<DomNode>[], element: Element<DomNode>) => import("@ephox/katamari").Option<number>;
declare const selectorsInParent: <E extends DomNode, S extends DomElement = DomElement>(element: Element<E>, selector: string) => import("@ephox/katamari").Option<AddressInParent<DomNode, S, E & S>>;
declare const descendantsInAncestor: <E extends DomNode, A extends DomElement = DomElement, D extends DomElement = DomElement>(element: Element<E>, ancestorSelector: string, descendantSelector: string) => import("@ephox/katamari").Option<AddressInAncestor<A, D, E & D>>;
export { childOf, indexOf, indexInParent, selectorsInParent, descendantsInAncestor, };
//# sourceMappingURL=ElementAddress.d.ts.map