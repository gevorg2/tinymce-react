import * as TestError from './TestError';
import * as Differ from './Differ';
import { htmlentities } from './StringUtils';
/* Required to make <del> and <ins> stay as tags.*/
var processQUnit = function (html) {
    return (html
        .replace(/&lt;del&gt;/g, '<del>')
        .replace(/&lt;\/del&gt;/g, '</del>')
        .replace(/&lt;ins&gt;/g, '<ins>')
        .replace(/&lt;\/ins&gt;/g, '</ins>'));
};
var extractError = function (err) {
    return err === undefined ? new Error('no error given') : err.error;
};
var formatExtra = function (e) {
    if (!e.logs) {
        if (e.error && e.error.stack) {
            var lines = e.error.stack.split('\n').filter(function (line) {
                return line.indexOf('at') !== -1;
            });
            return '\n\nStack:\n' + lines.join('\n');
        }
        else {
            return '';
        }
    }
    else {
        var lines = e.logs.map(function (log) {
            return log.replace(/\n/g, '\\n').replace(/\r/g, '\\r');
        });
        return '\n\nLogs:\n' + lines.join('\n');
    }
};
var htmlDiffAssertionErrorHtml = function (e) {
    return "Test failure: " + e.message + "\nExpected: " + htmlentities(e.diff.expected) + "\nActual: " + htmlentities(e.diff.actual) + "\n\nHTML Diff: " + processQUnit(htmlentities(e.diff.comparison));
};
var htmlDiffAssertionErrorText = function (e) {
    // TODO: make this look more like the PprintAssertionError
    // TODO: get rid of the <ins> and <del> in the text output. Probably need to change the code that throws this.
    return "Test failure: " + e.message + "\nExpected: " + e.diff.expected + "\nActual: " + e.diff.actual + "\n\nHTML Diff: " + e.diff.comparison;
};
var pprintAssertionErrorHtml = function (e) {
    var dh = Differ.diffPrettyHtml(e.diff.actual, e.diff.expected);
    return "Test failure: " + e.message + "\nExpected: \n" + htmlentities(e.diff.expected) + "\nActual: \n" + htmlentities(e.diff.actual) + "\nDiff: \n" + dh;
};
export var pprintAssertionText = function (e) {
    var dh = Differ.diffPrettyText(e.diff.actual, e.diff.expected);
    return "Test failure: " + e.message + "\nExpected: \n" + e.diff.expected + "\nActual: \n" + e.diff.actual + "\nDiff: \n" + dh;
};
var assertionErrorHtml = function (e) {
    // TODO: make this look more like the PprintAssertionError
    return 'Assertion error' + (e.message ? ' [' + e.message + ']' : '') +
        ': [' + htmlentities(JSON.stringify(e.expected)) + '] ' + e.operator +
        ' [' + htmlentities(JSON.stringify(e.actual)) + ']';
};
var assertionErrorText = function (e) {
    // TODO: make this look more like the PprintAssertionError
    return 'Assertion error' + (e.message ? ' [' + e.message + ']' : '') +
        ': [' + (JSON.stringify(e.expected)) + '] ' + e.operator +
        ' [' + (JSON.stringify(e.actual)) + ']';
};
var mkHtml = function (e) {
    if (TestError.isHTMLDiffError(e)) {
        return htmlDiffAssertionErrorHtml(e);
    }
    else if (TestError.isPprintAssertionError(e)) {
        return pprintAssertionErrorHtml(e);
    }
    else if (TestError.isAssertionError(e)) {
        return assertionErrorHtml(e);
    }
    else if (e.name && e.message) {
        return htmlentities(e.name + ': ' + e.message);
    }
    else if (e.toString !== undefined) {
        return htmlentities(String(e));
    }
    else {
        return htmlentities(JSON.stringify(e));
    }
};
var mkText = function (e) {
    if (TestError.isHTMLDiffError(e)) {
        return htmlDiffAssertionErrorText(e);
    }
    else if (TestError.isPprintAssertionError(e)) {
        return pprintAssertionText(e);
    }
    else if (TestError.isAssertionError(e)) {
        return assertionErrorText(e);
    }
    else if (e.name && e.message) {
        return (e.name + ': ' + e.message);
    }
    else if (e.toString !== undefined) {
        return String(e);
    }
    else {
        return JSON.stringify(e);
    }
};
export var html = function (err) {
    var e = extractError(err);
    return mkHtml(e) + htmlentities(formatExtra(err));
};
export var text = function (err) {
    var e = extractError(err);
    return mkText(e) + formatExtra(err);
};
//# sourceMappingURL=Reporter.js.map