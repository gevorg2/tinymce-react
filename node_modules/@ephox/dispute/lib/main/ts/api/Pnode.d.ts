export interface Pnode {
    start: string;
    children: Pnode[];
    end: string;
}
export declare const pnode: (start: string, children: Pnode[], end: string) => Pnode;
export declare const single: (s: string) => Pnode;
export declare const setStart: (start: string) => (p: Pnode) => Pnode;
export declare const setChildren: (children: Pnode[]) => (p: Pnode) => Pnode;
export declare const setEnd: (end: string) => (p: Pnode) => Pnode;
export declare const modStart: (f: (s: string) => string) => (p: Pnode) => Pnode;
export declare const modChildren: (f: (cs: Pnode[]) => Pnode[]) => (p: Pnode) => Pnode;
export declare const modEnd: (f: (s: string) => string) => (p: Pnode) => Pnode;
export declare const prependStart: (s: string) => (p: Pnode) => Pnode;
export declare const appendEnd: (s: string) => (p: Pnode) => Pnode;
export declare const render: (n: Pnode) => string;
