import * as Show from './Show';
import * as ArrayUtil from '../core/ArrayUtil';
import * as ObjectUtil from '../core/ObjectUtil';
import * as StringUtil from '../core/StringUtil';
import * as Type from '../core/Type';
import * as Pnode from './Pnode';
export var pprint = function (f) { return ({ pprint: f }); };
export var render = function (a, pp) {
    var n = pp.pprint(a);
    return Pnode.render(n);
};
export var pprintShow = function (show) {
    return pprint(function (a) { return Pnode.single(show.show(a)); });
};
export var pprintUndefined = pprintShow(Show.showUndefined);
export var pprintNull = pprintShow(Show.showNull);
export var pprintString = pprintShow(Show.showString);
export var pprintBoolean = pprintShow(Show.showBoolean);
export var pprintNumber = pprintShow(Show.showNumber);
export var pprintFunction = pprintShow(Show.showFunction);
export var pprintStringCtor = pprintShow(Show.showStringCtor);
export var pprintJsonStringify = pprintShow(Show.showJsonStringify);
export var pprintArray = function (pprintA) { return pprint(function (xs) {
    var c = ArrayUtil.mapDelimit(xs, pprintA.pprint, Pnode.appendEnd(','));
    return Pnode.pnode('[', c, ']');
}); };
export var pprintRecord = function (pprintA) { return pprint(function (r) {
    var tuples = ObjectUtil.toTuples(r);
    var cnode = function (_a) {
        var k = _a[0], v = _a[1];
        var pv = pprintA.pprint(v);
        var start = StringUtil.doubleQuote(k) + ': ';
        return Pnode.prependStart(start)(pv);
    };
    var c = ArrayUtil.mapDelimit(tuples, cnode, Pnode.appendEnd(','));
    return Pnode.pnode('{', c, '}');
}); };
export var pprintAny = pprint(function (a) {
    if (Type.isUndefined(a)) {
        return pprintUndefined.pprint(a);
    }
    else if (Type.isNull(a)) {
        return pprintNull.pprint(a);
    }
    else if (Type.isNumber(a)) {
        return pprintNumber.pprint(a);
    }
    else if (Type.isBoolean(a)) {
        return pprintBoolean.pprint(a);
    }
    else if (Type.isFunction(a)) {
        return pprintFunction.pprint(a);
    }
    else if (Type.isString(a)) {
        return pprintString.pprint(a);
    }
    else if (Type.isArray(a)) {
        return pprintArray(pprintAny).pprint(a);
    }
    else if (Type.isObject(a)) {
        return pprintRecord(pprintAny).pprint(a);
    }
    else {
        return pprintStringCtor.pprint(a);
    }
});
//# sourceMappingURL=Pprint.js.map