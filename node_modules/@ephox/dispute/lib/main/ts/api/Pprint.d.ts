import * as Show from './Show';
import * as Pnode from './Pnode';
declare type Pnode = Pnode.Pnode;
declare type Show<A> = Show.Show<A>;
export interface Pprint<A> {
    pprint: (a: A) => Pnode;
}
export declare const pprint: <A>(f: (a: A) => Pnode.Pnode) => Pprint<A>;
export declare const render: <A>(a: A, pp: Pprint<A>) => string;
export declare const pprintShow: <A>(show: Show.Show<A>) => Pprint<A>;
export declare const pprintUndefined: Pprint<undefined>;
export declare const pprintNull: Pprint<null>;
export declare const pprintString: Pprint<string>;
export declare const pprintBoolean: Pprint<boolean>;
export declare const pprintNumber: Pprint<number>;
export declare const pprintFunction: Pprint<Function>;
export declare const pprintStringCtor: Pprint<any>;
export declare const pprintJsonStringify: Pprint<any>;
export declare const pprintArray: <A>(pprintA: Pprint<A>) => Pprint<ArrayLike<A>>;
export declare const pprintRecord: <A>(pprintA: Pprint<A>) => Pprint<Record<string, A>>;
export declare const pprintAny: Pprint<any>;
export {};
