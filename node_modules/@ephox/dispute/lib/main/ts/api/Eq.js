import * as Type from '../core/Type';
import * as ArrayUtil from '../core/ArrayUtil';
export var contramap = function (eqa, f) {
    return eq(function (x, y) { return eqa.eq(f(x), f(y)); });
};
export var eq = function (f) {
    return ({ eq: f });
};
export var tripleEq = eq(function (x, y) { return x === y; });
export var eqString = tripleEq;
export var eqBoolean = tripleEq;
export var eqNumber = tripleEq;
export var eqUndefined = tripleEq;
export var eqNull = tripleEq;
export var eqArray = function (eqa) { return eq(function (x, y) {
    if (x.length !== y.length) {
        return false;
    }
    var len = x.length;
    for (var i = 0; i < len; i++) {
        if (!eqa.eq(x[i], y[i])) {
            return false;
        }
    }
    return true;
}); };
// TODO: Make an Ord typeclass
var eqSortedArray = function (eqa, compareFn) {
    return contramap(eqArray(eqa), function (xs) { return ArrayUtil.sort(xs, compareFn); });
};
export var eqRecord = function (eqa) { return eq(function (x, y) {
    var kx = Object.keys(x);
    var ky = Object.keys(y);
    if (!eqSortedArray(eqString).eq(kx, ky)) {
        return false;
    }
    var len = kx.length;
    for (var i = 0; i < len; i++) {
        var q = kx[i];
        if (!eqa.eq(x[q], y[q])) {
            return false;
        }
    }
    return true;
}); };
export var eqAny = eq(function (x, y) {
    if (x === y) {
        return true;
    }
    var tx = Type.typeOf(x);
    var ty = Type.typeOf(y);
    if (tx !== ty) {
        return false;
    }
    if (Type.isEquatableType(tx)) {
        return x === y;
    }
    else if (tx === 'array') {
        return eqArray(eqAny).eq(x, y);
    }
    else if (tx === 'object') {
        return eqRecord(eqAny).eq(x, y);
    }
    return false;
});
//# sourceMappingURL=Eq.js.map