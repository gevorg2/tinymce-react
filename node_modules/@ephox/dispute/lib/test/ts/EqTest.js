import { eqAny, eqNull, eqUndefined, eqNumber, eqString, eqArray, eqRecord, contramap } from '../../main/ts/api/Eq';
import { assert } from 'chai';
import * as fc from 'fast-check';
describe('eqNull', function () {
    it('eqs', function () {
        assert.strictEqual(eqNull.eq(null, null), true);
        assert.strictEqual(eqNull.eq(null, 7), false);
        assert.strictEqual(eqNull.eq('x', 7), false);
    });
});
describe('eqUndefined', function () {
    it('eqs', function () {
        assert.strictEqual(eqUndefined.eq(undefined, undefined), true);
        assert.strictEqual(eqUndefined.eq(undefined, 7), false);
        assert.strictEqual(eqUndefined.eq('x', 7), false);
    });
});
describe('eqNumber', function () {
    it('eqs', function () {
        fc.assert(fc.property(fc.integer(), function (n) { return eqNumber.eq(n, n); }));
        fc.assert(fc.property(fc.integer(), function (n) { return !eqNumber.eq(n, n + 1); }));
    });
});
describe('eqString', function () {
    it('eqs', function () {
        fc.assert(fc.property(fc.string(), function (s) { return eqString.eq(s, s); }));
        fc.assert(fc.property(fc.string(), fc.char(), function (s, c) { return !eqString.eq(s, s + c); }));
        assert.strictEqual(eqString.eq('cat', 'cat'), true);
        assert.strictEqual(eqString.eq('', ''), true);
        assert.strictEqual(eqString.eq('', 'z'), false);
    });
});
describe('eqArrayNumber', function () {
    it('eqs', function () {
        fc.assert(fc.property(fc.array(fc.integer()), function (xs) { return eqArray(eqNumber).eq(xs, xs); }));
        fc.assert(fc.property(fc.array(fc.integer()), function (xs) { return eqArray(eqNumber).eq(xs, Array.prototype.slice.call(xs)); }));
        assert.strictEqual(eqArray(eqNumber).eq([], []), true);
        assert.strictEqual(eqArray(eqNumber).eq([1], [1]), true);
        assert.strictEqual(eqArray(eqNumber).eq([0], [1]), false);
    });
});
describe('eqArrayArray', function () {
    it('eqs', function () {
        fc.assert(fc.property(fc.array(fc.array(fc.string())), function (xss) { return eqArray(eqArray(eqString)).eq(xss, xss); }));
        fc.assert(fc.property(fc.array(fc.array(fc.string())), function (xss) { return eqArray(eqArray(eqString)).eq(xss, Array.prototype.slice.call(xss)); }));
        assert.strictEqual(eqArray(eqArray(eqString)).eq([], []), true);
        assert.strictEqual(eqArray(eqArray(eqString)).eq([[]], [[]]), true);
        assert.strictEqual(eqArray(eqArray(eqString)).eq([[], []], [[], []]), true);
        assert.strictEqual(eqArray(eqArray(eqString)).eq([['1'], []], [['1'], []]), true);
        assert.strictEqual(eqArray(eqArray(eqString)).eq([[''], []], [[''], []]), true);
        assert.strictEqual(eqArray(eqArray(eqString)).eq([[''], []], [['0'], []]), false);
    });
});
describe('eqRecord', function () {
    it('eqs', function () {
        assert.strictEqual(eqRecord(eqString).eq({}, {}), true);
        assert.strictEqual(eqRecord(eqString).eq({ a: '3' }, { a: '3' }), true);
        assert.strictEqual(eqRecord(eqString).eq({ a: '3' }, { b: '3' }), false);
        assert.strictEqual(eqRecord(eqString).eq({ a: '' }, { a: 'f' }), false);
        assert.strictEqual(eqRecord(eqArray(eqNumber)).eq({ a: [1, 7] }, { a: [1, 9] }), false);
        assert.strictEqual(eqRecord(eqArray(eqNumber)).eq({ a: [1, 7] }, { a: [1, 7] }), true);
    });
    it('eqs with different key order', function () {
        assert.strictEqual(eqRecord(eqString).eq({ a: 'cat', b: 'dog' }, { b: 'dog', a: 'cat' }), true);
    });
});
describe('eqAny', function () {
    it('eqs', function () {
        fc.assert(fc.property(fc.anything(), function (x) { return isNaN(x) || eqAny.eq(x, x); }));
        fc.assert(fc.property(fc.anything(), function (x) { return isNaN(x) || !eqAny.eq(x, { z: x }); }));
        assert.strictEqual(eqAny.eq(1, 1), true);
        assert.strictEqual(eqAny.eq(1, 2), false);
        assert.strictEqual(eqAny.eq(1, null), false);
        assert.strictEqual(eqAny.eq(1, undefined), false);
        assert.strictEqual(eqAny.eq(1, 'h'), false);
        assert.strictEqual(eqAny.eq(0, ''), false);
        assert.strictEqual(eqAny.eq(0, []), false);
        assert.strictEqual(eqAny.eq(0, { a: 'b' }), false);
        assert.strictEqual(eqAny.eq(0, function () {
            throw new Error();
        }), false);
        assert.strictEqual(eqAny.eq(undefined, undefined), true);
        assert.strictEqual(eqAny.eq(undefined, null), false);
        assert.strictEqual(eqAny.eq(undefined, 3), false);
        assert.strictEqual(eqAny.eq(undefined, 'cat'), false);
        assert.strictEqual(eqAny.eq(undefined, ''), false);
        assert.strictEqual(eqAny.eq(undefined, []), false);
        assert.strictEqual(eqAny.eq(undefined, {}), false);
        assert.strictEqual(eqAny.eq(undefined, { a: NaN }), false);
        assert.strictEqual(eqAny.eq(undefined, function () { return 3; }), false);
        assert.strictEqual(eqAny.eq([], []), true);
        assert.strictEqual(eqAny.eq([0], [0]), true);
        assert.strictEqual(eqAny.eq([[0]], [[0]]), true);
        assert.strictEqual(eqAny.eq([[[0]]], [[[0]]]), true);
        assert.strictEqual(eqAny.eq(['cat', { x: 3 }, 0, null, undefined], ['cat', { x: 3 }, 0, null, undefined]), true);
        assert.strictEqual(eqAny.eq(['cat', { x: 3, y: 8 }, 0, null, undefined], ['cat', { x: 3 }, 0, null, undefined]), false);
    });
    it('eqs with different key order', function () {
        assert.strictEqual(eqAny.eq({ a: 'cat', b: 'dog' }, { b: 'dog', a: 'cat' }), true);
    });
});
describe('contramap', function () {
    it('contramaps', function () {
        var eqNumbo = contramap(eqNumber, function (n) { return n.x; });
        var arb = fc.integer().map(function (x) { return ({ x: x }); });
        fc.assert(fc.property(arb, function (x) { return eqNumbo.eq(x, ({ x: x.x })); }));
        assert.strictEqual(eqNumbo.eq({ x: 3 }, { x: 3 }), true);
        assert.strictEqual(eqNumbo.eq({ x: 3 }, { x: 4 }), false);
    });
});
//# sourceMappingURL=EqTest.js.map