"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ImportUtils_1 = require("../utils/ImportUtils");
var Rule = /** @class */ (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions()));
    };
    Rule.metadata = {
        description: 'Disallows deep lib imports directly to a file within a @ephox package.',
        options: {},
        optionsDescription: '',
        requiresTypeInfo: false,
        ruleName: 'no-direct-imports',
        type: 'functionality',
        typescriptOnly: false
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
// tslint:disable-next-line:max-classes-per-file
var Walker = /** @class */ (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Walker.prototype.visitImportDeclaration = function (node) {
        var moduleSpecifier = ImportUtils_1.trimModulePath(node.moduleSpecifier.getText());
        if (ImportUtils_1.isInternalLibModule(moduleSpecifier) || ImportUtils_1.isInternalSrcModule(moduleSpecifier)) {
            this.addFailureAtNode(node.moduleSpecifier, "Direct import to " + moduleSpecifier + " is forbidden.");
        }
        _super.prototype.visitImportDeclaration.call(this, node);
    };
    return Walker;
}(Lint.RuleWalker));
//# sourceMappingURL=noDirectImportsRule.js.map