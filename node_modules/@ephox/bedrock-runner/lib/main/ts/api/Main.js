import { UrlParams } from '../core/UrlParams';
import { Reporter } from '@ephox/bedrock-common';
// webpack makes this available
var Global = window;
var makeSessionId = function () {
    return '' + Math.ceil((Math.random() * 100000000));
};
var chunk; // set during loadtests
var retries; // set during loadtests
var timeout; // set during loadtests
var globalTests = Global.__tests ? Global.__tests : [];
var params = UrlParams.parse(window.location.search, makeSessionId);
var makeUrl = function (session, offset, failed, retry) {
    var baseUrl = window.location.protocol + '//' + window.location.host + window.location.pathname;
    if (offset > 0) {
        var rt = (retry > 0 ? '&retry=' + retry : '');
        return baseUrl + '?session=' + session + '&offset=' + offset + '&failed=' + failed + rt;
    }
    else {
        return baseUrl;
    }
};
var noop = function () { };
var sendJson = function (url, data, onSuccess, onError) {
    if (onSuccess === void 0) { onSuccess = noop; }
    if (onError === void 0) { onError = noop; }
    // noinspection JSIgnoredPromiseFromCall
    $.ajax({
        method: 'post',
        url: url,
        dataType: 'json',
        success: onSuccess,
        error: onError,
        data: JSON.stringify(data),
    });
};
var sendKeepAlive = function (session, onSuccess, onError) {
    sendJson('/tests/alive', {
        session: session,
    }, onSuccess, onError);
};
var sendTestStart = function (session, file, name, onSuccess, onError) {
    sendJson('/tests/start', {
        totalTests: globalTests.length,
        session: session,
        file: file,
        name: name,
    }, onSuccess, onError);
};
var sendTestResult = function (session, file, name, passed, time, error, onSuccess, onError) {
    sendJson('/tests/result', {
        session: session,
        file: file,
        name: name,
        passed: passed,
        time: time,
        error: error,
    }, onSuccess, onError);
};
var sendDone = function (session, onSuccess, onError) {
    var getCoverage = function () { return typeof Global.__coverage__ === 'undefined' ? {} : Global.__coverage__; };
    sendJson('/tests/done', {
        session: session,
        coverage: getCoverage(),
    }, onSuccess, onError);
};
var passCount = 0;
var failCount = 0;
var summary = function () { return ({
    passed: passCount + (params.offset - params.failed),
    failed: failCount + params.failed,
}); };
var reporter = (function () {
    var current = $('<span />').addClass('progress').text(params.offset);
    var restartBtn = $('<button />').text('Restart').on('click', function () {
        var url = makeUrl('', 0, 0, 0);
        window.location.assign(url);
    });
    var retryBtn = $('<button />').text('Retry').on('click', function () {
        var sum = summary();
        var url = makeUrl(params.session, sum.passed + sum.failed - 1, sum.failed - 1, 0);
        window.location.assign(url);
    }).hide();
    var skipBtn = $('<button />').text('Skip').on('click', function () {
        var sum = summary();
        var url = makeUrl(params.session, sum.passed + sum.failed, sum.failed, 0);
        window.location.assign(url);
    }).hide();
    $(function () {
        $('body')
            .append($('<div />')
            .append($('<span />').text('Suite progress: '))
            .append(current)
            .append($('<span />').text('/'))
            .append($('<span />').text(globalTests.length))
            .append('&nbsp;&nbsp;&nbsp;')
            .append(restartBtn)
            .append('&nbsp;&nbsp;&nbsp;')
            .append(retryBtn)
            .append('&nbsp;&nbsp;&nbsp;')
            .append(skipBtn));
    });
    var initial = new Date();
    var stopOnFailure = false;
    var keepAliveTimer = setInterval(function () {
        sendKeepAlive(params.session, noop, function () {
            // if the server shutsdown stop trying to send messages
            clearInterval(keepAliveTimer);
        });
    }, 5000);
    var elapsed = function (since) {
        var end = new Date();
        var millis = end.getDate() - since.getDate();
        var seconds = Math.floor(millis / 1000);
        var point = Math.floor(millis - (seconds * 1000) / 100);
        var printable = point < 10 ? '00' + point :
            point < 100 ? '0' + point :
                '' + point;
        return seconds + '.' + printable + 's';
    };
    var test = function (file, name) {
        var starttime;
        var el;
        var output;
        var marker;
        var testfile;
        var nameSpan;
        var error;
        var time;
        var reported;
        var start = function (onDone) {
            starttime = new Date();
            el = $('<div />').addClass('test running');
            output = $('<div />').addClass('output');
            marker = $('<span />').text('[running]').addClass('result');
            testfile = $('<span />').text(file).addClass('testfile');
            nameSpan = $('<span />').text(name).addClass('name');
            error = $('<span />').addClass('error-container');
            time = $('<span />').addClass('time');
            output.append(marker, ' ', nameSpan, ' [', time, '] ', error, ' ', testfile);
            el.append(output);
            $('body').append(el);
            reported = false;
            sendTestStart(params.session, file, name, onDone, onDone);
        };
        var pass = function (onDone) {
            if (reported)
                return;
            reported = true;
            passCount++;
            el.removeClass('running').addClass('passed').addClass('hidden');
            marker.text('[passed]').addClass('passed');
            var testTime = elapsed(starttime);
            time.text(testTime);
            current.text(params.offset + passCount + failCount);
            sendTestResult(params.session, file, name, true, testTime, null, onDone, onDone);
        };
        var fail = function (e, onDone) {
            if (reported)
                return;
            reported = true;
            failCount++;
            el.removeClass('running').addClass('failed');
            marker.text('[failed]').addClass('failed');
            // Don't use .text() as it strips out newlines in IE, even when used
            // on a pre tag.
            var htmlError = Reporter.html(e);
            var textError = Reporter.text(e);
            var pre = $('<pre/>')
                .addClass('error')
                .html(htmlError);
            error.append(pre);
            var testTime = elapsed(starttime);
            time.text(testTime);
            current.text(params.offset + passCount + failCount);
            if (stopOnFailure) {
                current.text('\u274c @ ' + current.text());
                retryBtn.show();
                skipBtn.show();
            }
            sendTestResult(params.session, file, name, false, testTime, textError, onDone, onDone);
        };
        return {
            start: start,
            pass: pass,
            fail: fail,
        };
    };
    var done = function () {
        var setAsDone = function () {
            var totalTime = elapsed(initial);
            $('body').append('<div class="done">Test run completed in <span class="time">' + totalTime + '</span></div>');
            $('.passed.hidden').removeClass('hidden');
        };
        sendDone(params.session, setAsDone, setAsDone);
    };
    var setStopOnFailure = function (flag) {
        stopOnFailure = flag;
    };
    var shouldStopOnFailure = function () { return stopOnFailure; };
    return {
        summary: summary,
        test: test,
        done: done,
        setStopOnFailure: setStopOnFailure,
        shouldStopOnFailure: shouldStopOnFailure,
    };
})();
var initError = function (e) {
    $('body').append('<div class="failed done">ajax error: ' + JSON.stringify(e) + '</div>');
};
var runGlobalTests = function () {
    var loadNextChunk = function () {
        if (globalTests.length > (params.offset + chunk)) {
            var url = makeUrl(params.session, params.offset + chunk, reporter.summary().failed, 0);
            window.location.assign(url);
        }
        else {
            reporter.done();
            // for easy rerun reset the URL
            window.history.pushState({}, '', makeUrl(params.session, 0, 0, 0));
        }
    };
    var retryTest = function () {
        var sum = reporter.summary();
        window.location.assign(makeUrl(params.session, sum.passed + sum.failed - 1, sum.failed - 1, params.retry + 1));
    };
    var loadNextTest = function () {
        var sum = reporter.summary();
        window.location.assign(makeUrl(params.session, sum.passed + sum.failed, sum.failed, 0));
    };
    var afterFail = function () {
        if (reporter.shouldStopOnFailure()) {
            reporter.done();
            // make it easy to restart at this test
            var sum = reporter.summary();
            var url = makeUrl(params.session, sum.passed + sum.failed - 1, sum.failed - 1, 0);
            window.history.pushState({}, '', url);
        }
        else if (params.retry < retries) {
            retryTest();
        }
        else {
            loadNextTest();
        }
    };
    var loop = function (tests) {
        var test = tests.shift();
        if (test !== undefined) {
            var report_1 = reporter.test(test.filePath, test.name);
            var timer_1 = setTimeout(function () {
                report_1.fail({ error: new Error('Test ran too long'), logs: [] }, afterFail);
            }, timeout);
            try {
                report_1.start(function () {
                    test.test(function () {
                        clearTimeout(timer_1);
                        report_1.pass(function () {
                            if (params.retry > 0) {
                                params.retry = 0;
                                var url = makeUrl(params.session, params.offset, params.failed, params.retry);
                                window.history.pushState({}, '', url);
                            }
                            loop(tests);
                        });
                    }, function (e) {
                        clearTimeout(timer_1);
                        console.error(e.error || e);
                        report_1.fail(e, afterFail);
                    });
                });
            }
            catch (e) {
                clearTimeout(timer_1);
                console.error(e);
                report_1.fail(e, afterFail);
            }
        }
        else {
            loadNextChunk();
        }
    };
    loop(globalTests.slice(params.offset, params.offset + chunk));
};
var loadtests = function (data) {
    chunk = data.chunk;
    retries = data.retries;
    timeout = data.timeout;
    reporter.setStopOnFailure(data.stopOnFailure);
    if (data.mode === 'auto') {
        // Try to ensure the page has focus
        window.focus();
    }
    runGlobalTests();
};
var testrunner = function () {
    // delay this ajax call until after the reporter status elements are in the page
    $(function () {
        // noinspection JSIgnoredPromiseFromCall
        $.ajax({
            url: 'harness',
            dataType: 'json',
            success: loadtests,
            error: initError,
        });
    });
};
testrunner();
//# sourceMappingURL=Main.js.map