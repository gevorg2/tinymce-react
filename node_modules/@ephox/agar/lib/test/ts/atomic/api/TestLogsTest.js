import { Assert, UnitTest } from '@ephox/bedrock-client';
import { Arr } from '@ephox/katamari';
import { addLogEntry, addStackTrace, popLogLevel, pushLogLevel, TestLogEntryState, TestLogs } from 'ephox/agar/api/TestLogs';
UnitTest.test('TestLogsTest', function () {
    var logs = TestLogs.init();
    var addToLog = function (s) { return function (logs) {
        return addLogEntry(logs, s);
    }; };
    var assertLog = function (expected) { return function (logs) {
        Assert.eq('Checking logs', expected, logs.history);
        return logs;
    }; };
    var addTraceToLog = function (trace) { return function (logs) {
        return addStackTrace(logs, trace);
    }; };
    Arr.foldl([
        addToLog('alpha'),
        addTraceToLog({ stack: 'alpha-first' }),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: 'alpha-first' }
        ]),
        addTraceToLog({ stack: null }),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null }
        ]),
        addToLog('beta'),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            { message: 'beta', entries: [], state: TestLogEntryState.Original, trace: null }
        ]),
        pushLogLevel,
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [],
                trace: null
            }
        ]),
        addToLog('beta-1'),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [
                    { message: 'beta-1', entries: [], state: TestLogEntryState.Original, trace: null }
                ],
                trace: null
            }
        ]),
        pushLogLevel,
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Started,
                        entries: [],
                        trace: null
                    }
                ],
                trace: null
            }
        ]),
        addToLog('beta-1-1'),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Started,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    }
                ],
                trace: null
            }
        ]),
        popLogLevel,
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Finished,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    }
                ],
                trace: null
            }
        ]),
        addToLog('beta-2'),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Finished,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    },
                    {
                        message: 'beta-2',
                        state: TestLogEntryState.Original,
                        entries: [],
                        trace: null
                    }
                ],
                trace: null
            }
        ]),
        addTraceToLog({ stack: 'during beta-2' }),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Started,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Finished,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    },
                    {
                        message: 'beta-2',
                        state: TestLogEntryState.Original,
                        entries: [],
                        trace: 'during beta-2'
                    }
                ],
                trace: null
            }
        ]),
        popLogLevel,
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Finished,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Finished,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    },
                    {
                        message: 'beta-2',
                        state: TestLogEntryState.Original,
                        entries: [],
                        trace: 'during beta-2'
                    }
                ],
                trace: null
            }
        ]),
        addToLog('gamma'),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Finished,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Finished,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    },
                    {
                        message: 'beta-2',
                        state: TestLogEntryState.Original,
                        entries: [],
                        trace: 'during beta-2'
                    }
                ],
                trace: null
            },
            { message: 'gamma', entries: [], state: TestLogEntryState.Original, trace: null },
        ]),
        addTraceToLog({ stack: 'gamma-trace!' }),
        assertLog([
            { message: 'alpha', entries: [], state: TestLogEntryState.Original, trace: null },
            {
                message: 'beta',
                state: TestLogEntryState.Finished,
                entries: [
                    {
                        message: 'beta-1',
                        state: TestLogEntryState.Finished,
                        entries: [
                            { message: 'beta-1-1', entries: [], state: TestLogEntryState.Original, trace: null },
                        ],
                        trace: null
                    },
                    {
                        message: 'beta-2',
                        state: TestLogEntryState.Original,
                        entries: [],
                        trace: 'during beta-2'
                    }
                ],
                trace: null
            },
            { message: 'gamma', entries: [], state: TestLogEntryState.Original, trace: 'gamma-trace!' },
        ]),
    ], function (b, a) {
        var next = a(b);
        return next;
    }, logs);
});
//# sourceMappingURL=TestLogsTest.js.map