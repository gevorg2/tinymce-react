import { UnitTest } from '@ephox/bedrock-client';
import { document } from '@ephox/dom-globals';
import { Arr } from '@ephox/katamari';
import { PlatformDetection } from '@ephox/sand';
import { DomEvent, Element, Insert, Remove } from '@ephox/sugar';
import * as Assertions from 'ephox/agar/api/Assertions';
import { Chain } from 'ephox/agar/api/Chain';
import * as GeneralSteps from 'ephox/agar/api/GeneralSteps';
import * as Touch from 'ephox/agar/api/Touch';
import { Pipeline } from 'ephox/agar/api/Pipeline';
import { Step } from 'ephox/agar/api/Step';
import * as UiFinder from 'ephox/agar/api/UiFinder';
UnitTest.asynctest('TouchTest', function (success, failure) {
    var input = Element.fromTag('input');
    var container = Element.fromTag('container');
    var platform = PlatformDetection.detect();
    // Add to the DOM so focus calls happen
    Insert.append(Element.fromDom(document.body), container);
    var repository = [];
    var handlers = Arr.bind(['touchstart', 'touchend', 'touchmove', 'focus'], function (evt) {
        return [
            DomEvent.bind(container, evt, function () { return repository.push('container.' + evt); }),
            DomEvent.bind(input, evt, function () { return repository.push('input.' + evt); })
        ];
    });
    var clearRepository = Step.sync(function () { return repository = []; });
    var assertRepository = function (label, expected) { return Step.sync(function () { return Assertions.assertEq(label, expected, repository); }); };
    var runStep = function (label, expected, step) { return GeneralSteps.sequence([
        clearRepository,
        step,
        assertRepository(label, expected)
    ]); };
    var isUnfocusedFirefox = function () {
        // Focus events are not fired until the window has focus: https://bugzilla.mozilla.org/show_bug.cgi?id=566671
        return platform.browser.isFirefox() && !document.hasFocus();
    };
    Insert.append(container, input);
    Pipeline.async({}, [
        runStep('Initial test', [], Step.pass),
        runStep('point test', ['container.touchstart'], Step.sync(function () { return Touch.point('touchstart', container, 0, 0); })),
        runStep('sTrueTapOn (container > input)', 
        // IE seems to fire input.focus at the end.
        platform.browser.isIE() ? [
            'input.touchstart', 'container.touchstart',
            'input.touchend', 'container.touchend',
            'input.focus'
        ] : (isUnfocusedFirefox() ? [
            'input.touchstart', 'container.touchstart',
            'input.touchend', 'container.touchend'
        ] : [
            'input.focus',
            'input.touchstart', 'container.touchstart',
            'input.touchend', 'container.touchend'
        ]), Touch.sTrueTapOn(container, 'input')),
        runStep('cTap input', [
            'input.touchstart', 'container.touchstart',
            'input.touchend', 'container.touchend'
        ], Chain.asStep(container, [
            UiFinder.cFindIn('input'),
            Touch.cTap
        ])),
        runStep('cTouchStart input', ['input.touchstart', 'container.touchstart'], Chain.asStep(container, [
            UiFinder.cFindIn('input'),
            Touch.cTouchStart
        ])),
        runStep('cTouchEnd input', ['input.touchend', 'container.touchend'], Chain.asStep(container, [
            UiFinder.cFindIn('input'),
            Touch.cTouchEnd
        ])),
        runStep('cTouchMove input', ['input.touchmove', 'container.touchmove'], Chain.asStep(container, [
            UiFinder.cFindIn('input'),
            Touch.cTouchMove
        ])),
    ], function () {
        Arr.each(handlers, function (h) { h.unbind(); });
        Remove.remove(container);
        success();
    }, function (err) {
        Arr.each(handlers, function (h) { h.unbind(); });
        failure(err);
    });
});
//# sourceMappingURL=TouchTest.js.map