import { Assert, assert, UnitTest } from '@ephox/bedrock-client';
import { Body, DomEvent, Element, Insert, Remove, SelectorFind } from '@ephox/sugar';
import { Pipeline } from 'ephox/agar/api/Pipeline';
import { dragnDrop, dropFiles, isDraggable, sDragnDrop, sDropFiles } from 'ephox/agar/api/DragnDrop';
import { Step } from 'ephox/agar/api/Step';
import { GeneralSteps, Logger } from 'ephox/agar/api/Main';
import { createFile } from 'ephox/agar/api/Files';
import { Blob } from '@ephox/dom-globals';
UnitTest.test('DragDrop.isDraggable', function () {
    var check = function (expected, html) {
        assert.eq(expected, isDraggable(Element.fromHtml(html)));
    };
    check(false, '<div/>');
    check(false, '<a/>');
    check(false, '<a name="blah"/>');
    check(true, '<a href=""/>');
    check(true, '<a href="cat.com"/>');
    check(true, '<ol draggable="true" />');
    check(false, '<ol draggable="" />');
    check(false, '<ol draggable="false" />');
    check(true, '<img />');
});
UnitTest.asynctest('DragnDropTest', function (success, failure) {
    var dropzone = Element.fromHtml('<div class="dropzone"></div>');
    var draggable = Element.fromHtml('<div class="draggable" draggable="true"></div>');
    var store = [];
    var sClearStore = Step.sync(function () {
        store.splice(0);
    });
    var sAssertStoreItems = function (expectedStoreItems) { return Step.sync(function () {
        Assert.eq('Should have the expetec items', expectedStoreItems, store);
    }); };
    var dragStartUnbinder = DomEvent.bind(draggable, 'dragstart', function (evt) {
        var dataTransfer = evt.raw().dataTransfer;
        evt.kill();
        dataTransfer.setData('text', 'hello');
        store.push('dragstart');
    });
    var dragEnterUnbinder = DomEvent.bind(dropzone, 'dragenter', function (evt) {
        evt.kill();
        store.push('dragenter');
    });
    var dragOverUnbinder = DomEvent.bind(dropzone, 'dragover', function (evt) {
        evt.kill();
        store.push('dragover');
    });
    var dropUnbinder = DomEvent.bind(dropzone, 'drop', function (evt) {
        var dataTransfer = evt.raw().dataTransfer;
        evt.kill();
        if (dataTransfer.getData('text')) {
            store.push('drop text: ' + dataTransfer.getData('text'));
        }
        else {
            store.push("drop files: " + dataTransfer.files.length);
        }
    });
    var dragEndUnbinder = DomEvent.bind(draggable, 'dragend', function (evt) {
        store.push('dragend');
    });
    Insert.append(Body.body(), dropzone);
    Insert.append(Body.body(), draggable);
    Pipeline.async({}, [
        Logger.t('Drag/drop element with data using selectors', GeneralSteps.sequence([
            sClearStore,
            sDragnDrop('.draggable', '.dropzone'),
            sAssertStoreItems(['dragstart', 'dragenter', 'dragover', 'drop text: hello', 'dragend'])
        ])),
        Logger.t('Drag/drop element with data using elements', GeneralSteps.sequence([
            sClearStore,
            Step.sync(function () {
                var from = SelectorFind.descendant(Body.body(), '.draggable').getOrDie('Could not find from element.');
                var to = SelectorFind.descendant(Body.body(), '.dropzone').getOrDie('Could not find to element.');
                dragnDrop(from, to);
            }),
            sAssertStoreItems(['dragstart', 'dragenter', 'dragover', 'drop text: hello', 'dragend'])
        ])),
        Logger.t('Drop files using selector', GeneralSteps.sequence([
            sClearStore,
            sDropFiles([
                createFile('a.txt', 123, new Blob([''], { type: 'text/plain' })),
                createFile('b.html', 123, new Blob([''], { type: 'text/html' }))
            ], '.dropzone'),
            sAssertStoreItems(['dragenter', 'dragover', 'drop files: 2'])
        ])),
        Logger.t('Drop files using element', GeneralSteps.sequence([
            sClearStore,
            Step.sync(function () {
                var to = SelectorFind.descendant(Body.body(), '.dropzone').getOrDie('Could not find to element.');
                dropFiles([
                    createFile('a.txt', 123, new Blob([''], { type: 'text/plain' })),
                    createFile('b.html', 123, new Blob([''], { type: 'text/html' }))
                ], to);
            }),
            sAssertStoreItems(['dragenter', 'dragover', 'drop files: 2'])
        ]))
    ], function () {
        Remove.remove(dropzone);
        Remove.remove(draggable);
        dropUnbinder.unbind();
        dragStartUnbinder.unbind();
        dragOverUnbinder.unbind();
        dragEnterUnbinder.unbind();
        dragEndUnbinder.unbind();
        success();
    }, failure);
});
//# sourceMappingURL=DragnDropTest.js.map