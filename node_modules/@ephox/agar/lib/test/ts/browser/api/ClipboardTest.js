import { Assert, UnitTest } from '@ephox/bedrock-client';
import { navigator } from '@ephox/dom-globals';
import { Cell, Option } from '@ephox/katamari';
import { Body, DomEvent, Element, Insert, Remove } from '@ephox/sugar';
import { cCopy, cCut, sPasteDataTransfer, sPasteFiles, sPasteItems } from 'ephox/agar/api/Clipboard';
import { createFileFromString } from 'ephox/agar/api/Files';
import { Chain, Logger, Step, ChainSequence, StepSequence } from 'ephox/agar/api/Main';
import { Pipeline } from 'ephox/agar/api/Pipeline';
if (!/phantom/i.test(navigator.userAgent)) {
    UnitTest.asynctest('ClipboardTest', function (success, failure) {
        var pastebin = Element.fromHtml('<div class="pastebin"></div>');
        var pasteState = Cell(Option.none());
        Insert.append(Body.body(), pastebin);
        var cutUnbinder = DomEvent.bind(pastebin, 'cut', function (evt) {
            var dataTransfer = evt.raw().clipboardData;
            dataTransfer.setData('text/plain', 'cut-data');
        });
        var copyUnbinder = DomEvent.bind(pastebin, 'copy', function (evt) {
            var dataTransfer = evt.raw().clipboardData;
            dataTransfer.setData('text/plain', 'copy-data');
        });
        var pasteUnbinder = DomEvent.bind(pastebin, 'paste', function (evt) {
            var dataTransfer = evt.raw().clipboardData;
            pasteState.set(Option.some(dataTransfer));
        });
        Pipeline.runStep({}, StepSequence.sequenceSame([
            Logger.t('Paste text and html items', StepSequence.sequenceSame([
                sPasteItems({
                    'text/plain': 'Hello world!',
                    'text/html': '<b>Hello world!</b>'
                }, '.pastebin'),
                Step.sync(function () {
                    var dataTransfer = pasteState.get().getOrDie('Could not get dataTransfer from state');
                    Assert.eq('Should be expected plain text', 'Hello world!', dataTransfer.getData('text/plain'));
                    Assert.eq('Should be expected html', '<b>Hello world!</b>', dataTransfer.getData('text/html'));
                })
            ])),
            Logger.t('Paste text and html files', StepSequence.sequenceSame([
                sPasteFiles([
                    createFileFromString('a.txt', 123, 'Hello world!', 'text/plain'),
                    createFileFromString('a.html', 123, '<b>Hello world!</b>', 'text/html')
                ], '.pastebin'),
                Step.sync(function () {
                    var dataTransfer = pasteState.get().getOrDie('Could not get dataTransfer from state');
                    Assert.eq('Should be expected mime type', 'text/plain', dataTransfer.items[0].type);
                    Assert.eq('Should be expected mime type', 'text/plain', dataTransfer.files[0].type);
                    Assert.eq('Should be expected mime type', 'text/html', dataTransfer.items[1].type);
                    Assert.eq('Should be expected mime type', 'text/html', dataTransfer.files[1].type);
                })
            ])),
            Logger.t('Paste using dataTransfer mutator', StepSequence.sequenceSame([
                sPasteDataTransfer(function (dataTransfer) {
                    dataTransfer.items.add(createFileFromString('a.txt', 123, 'Hello world!', 'text/plain'));
                    dataTransfer.items.add('<b>Hello world!</b>', 'text/html');
                }, '.pastebin'),
                Step.sync(function () {
                    var dataTransfer = pasteState.get().getOrDie('Could not get dataTransfer from state');
                    Assert.eq('Should be expected mime type', 'text/plain', dataTransfer.items[0].type);
                    Assert.eq('Should be expected mime type', 'file', dataTransfer.items[0].kind);
                    Assert.eq('Should be expected mime type', 'text/html', dataTransfer.items[1].type);
                    Assert.eq('Should be expected mime type', 'string', dataTransfer.items[1].kind);
                })
            ])),
            Logger.t('Cut', Chain.isolate(pastebin, ChainSequence.sequence([
                cCut,
                Chain.op(function (dataTransfer) {
                    Assert.eq('Should be extected cut data', 'cut-data', dataTransfer.getData('text/plain'));
                })
            ]))),
            Logger.t('Copy', Chain.isolate(pastebin, ChainSequence.sequence([
                cCopy,
                Chain.op(function (dataTransfer) {
                    Assert.eq('Should be extected copy data', 'copy-data', dataTransfer.getData('text/plain'));
                })
            ])))
        ]), function () {
            cutUnbinder.unbind();
            copyUnbinder.unbind();
            pasteUnbinder.unbind();
            Remove.remove(pastebin);
            success();
        }, failure);
    });
}
//# sourceMappingURL=ClipboardTest.js.map