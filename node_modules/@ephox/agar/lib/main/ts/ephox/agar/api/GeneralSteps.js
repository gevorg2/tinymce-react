import { clearInterval, setInterval, setTimeout } from '@ephox/dom-globals';
import { Pipeline } from './Pipeline';
import { Step } from './Step';
// This module needs tests
var sequence = function (steps) {
    return Step.raw(function (value, next, die, initLogs) {
        Pipeline.async(value, steps, next, die, initLogs);
    });
};
var repeat = function (amount, step) {
    var steps = [];
    for (var i = 0; i < amount; i++) {
        steps.push(step);
    }
    return steps;
};
var sequenceRepeat = function (amount, step) {
    var steps = repeat(amount, step);
    return sequence(steps);
};
// TODO deprecate? This function is weird and we don't seem to use it.
var repeatUntil = function (label, repeatStep, successStep, numAttempts) { return Step.raw(function (value, next, die, logs) {
    var again = function (num) {
        if (num <= 0) {
            die(label + '\nRan out of attempts', logs);
        }
        else {
            repeatStep.runStep(value, function () {
                // Any fancy setting of log here? Or ignore previous attempts?
                successStep.runStep(value, next, function () {
                    again(num - 1);
                }, logs);
            }, die, logs);
        }
    };
    again(numAttempts);
}); };
var waitForPredicate = function (label, interval, amount, predicate) {
    return Step.async(function (next, die) {
        if (predicate()) {
            // Must use a setTimeout here otherwise FontSizeTest gets 'too much recursion' on Firefox
            setTimeout(function () {
                next();
            });
            return;
        }
        var counter = 0;
        var timer = setInterval(function () {
            counter += interval;
            try {
                if (predicate()) {
                    clearInterval(timer);
                    next();
                    return;
                }
            }
            catch (err) {
                clearInterval(timer);
                die(err);
                return;
            }
            if (counter > amount) {
                clearInterval(timer);
                die('Waited for ' + label + ' for ' + amount + '(' + counter + '/' + interval + ') ms. Predicate condition failed.');
            }
        }, interval);
    });
};
export { sequence, repeatUntil, waitForPredicate, repeat, sequenceRepeat };
//# sourceMappingURL=GeneralSteps.js.map