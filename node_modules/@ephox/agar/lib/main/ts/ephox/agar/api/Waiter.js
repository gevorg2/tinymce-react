import * as Guard from './Guard';
import { Step } from './Step';
import { Chain } from './Chain';
var defaultAmount = 3000;
var defaultInterval = 10;
var sTryUntilPredicate = function (label, p, interval, amount) {
    if (interval === void 0) { interval = defaultInterval; }
    if (amount === void 0) { amount = defaultAmount; }
    return sTryUntil(label, Step.predicate(p), interval, amount);
};
var sTryUntil = function (label, step, interval, amount) {
    if (interval === void 0) { interval = defaultInterval; }
    if (amount === void 0) { amount = defaultAmount; }
    return Step.control(step, Guard.tryUntil(label, interval, amount));
};
var sTryUntilNot = function (label, step, interval, amount) {
    if (interval === void 0) { interval = defaultInterval; }
    if (amount === void 0) { amount = defaultAmount; }
    return Step.control(step, Guard.tryUntilNot(label, interval, amount));
};
var sTimeout = function (label, step, limit) {
    if (limit === void 0) { limit = defaultAmount; }
    return Step.control(step, Guard.timeout(label, limit));
};
var cTryUntilPredicate = function (label, p, interval, amount) {
    if (interval === void 0) { interval = defaultInterval; }
    if (amount === void 0) { amount = defaultAmount; }
    return cTryUntil(label, Chain.predicate(p), interval, amount);
};
var cTryUntil = function (label, chain, interval, amount) {
    if (interval === void 0) { interval = defaultInterval; }
    if (amount === void 0) { amount = defaultAmount; }
    return Chain.control(chain, Guard.tryUntil(label, interval, amount));
};
var cTryUntilNot = function (label, chain, interval, amount) {
    if (interval === void 0) { interval = defaultInterval; }
    if (amount === void 0) { amount = defaultAmount; }
    return Chain.control(chain, Guard.tryUntilNot(label, interval, amount));
};
var cTimeout = function (label, chain, limit) {
    if (limit === void 0) { limit = defaultAmount; }
    return Chain.control(chain, Guard.timeout(label, limit));
};
export { sTryUntilPredicate, sTryUntil, sTryUntilNot, sTimeout, cTryUntilPredicate, cTryUntil, cTryUntilNot, cTimeout };
//# sourceMappingURL=Waiter.js.map