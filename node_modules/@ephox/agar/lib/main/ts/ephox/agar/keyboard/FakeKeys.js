import { PlatformDetection } from '@ephox/sand';
var isNewKeyModifiers = function (modifiers) {
    return 'shiftKey' in modifiers || 'metaKey' in modifiers || 'ctrlKey' in modifiers || 'altKey' in modifiers;
};
var newModifiers = function (modifiers) { return isNewKeyModifiers(modifiers) ? modifiers :
    { shiftKey: modifiers.shift, metaKey: modifiers.meta, ctrlKey: modifiers.ctrl, altKey: modifiers.alt }; };
// Take from Orwellophile's answer on
// http://stackoverflow.com/questions/10455626/keydown-simulation-in-chrome-fires-normally-but-not-the-correct-key
var keyevent = function (type, doc, value, modifiers, focus) {
    var domDoc = doc.dom();
    var mod = newModifiers(modifiers);
    var oEvent = domDoc.createEvent('KeyboardEvent');
    var getter = function () { return value; };
    var defineGetter = function (obj, key, propGetter) {
        Object.defineProperty(obj, key, { get: propGetter, enumerable: true });
    };
    var dispatcher = focus !== undefined ? focus : doc;
    var platform = PlatformDetection.detect();
    if (platform.browser.isSafari() || platform.browser.isIE()) {
        safari(type, doc, value, mod, dispatcher);
    }
    else {
        if (platform.browser.isChrome() || platform.browser.isEdge() || platform.browser.isFirefox()) {
            defineGetter(oEvent, 'keyCode', getter);
            defineGetter(oEvent, 'which', getter);
            defineGetter(oEvent, 'shiftKey', function () { return mod.shiftKey === true; });
            defineGetter(oEvent, 'metaKey', function () { return mod.metaKey === true; });
            defineGetter(oEvent, 'ctrlKey', function () { return mod.ctrlKey === true; });
            defineGetter(oEvent, 'altKey', function () { return mod.altKey === true; });
        }
        var canBubble = true;
        var cancellable = true;
        var ctrlKey = mod.ctrlKey === true;
        var altKey = mod.altKey === true;
        var shiftKey = mod.shiftKey === true;
        var metaKey = mod.metaKey === true;
        if (oEvent.initKeyboardEvent) {
            // Note: typescript thinks the arguments are wrong so we should probably test it
            oEvent.initKeyboardEvent(type, canBubble, cancellable, domDoc.defaultView, ctrlKey, altKey, shiftKey, metaKey, value, value);
        }
        else {
            // this is unknown to typescript
            oEvent.initKeyEvent(type, canBubble, cancellable, domDoc.defaultView, ctrlKey, altKey, shiftKey, metaKey, value, type === 'keypress' && platform.browser.isFirefox() ? value : 0);
        }
        dispatcher.dom().dispatchEvent(oEvent);
    }
};
var safari = function (type, doc, value, modifiers, dispatcher) {
    var oEvent = doc.dom().createEvent('Events');
    oEvent.initEvent(type, true, true);
    oEvent.which = value;
    oEvent.keyCode = value;
    oEvent.shiftKey = modifiers.shiftKey === true;
    oEvent.ctrlKey = modifiers.ctrlKey === true;
    oEvent.metaKey = modifiers.metaKey === true;
    oEvent.altKey = modifiers.altKey === true;
    dispatcher.dom().dispatchEvent(oEvent);
};
export { newModifiers, keyevent };
//# sourceMappingURL=FakeKeys.js.map