declare type Task = () => void;
export interface Cleaner {
    add: (task: Task) => void;
    run: () => void;
    wrap: <T extends any[], U>(fn: (...a: T) => U) => (...args: T) => U;
}
export declare const Cleaner: () => {
    add: (task: Task) => void;
    run: () => void;
    wrap: <T extends any[], U>(fn: (...a: T) => U) => (...args: T) => U;
};
export {};
//# sourceMappingURL=Cleaner.d.ts.map