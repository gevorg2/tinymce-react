import { Chain, UiFinder, NamedChain } from '@ephox/agar';
import { Arr } from '@ephox/katamari';
import { Body, Node, Attr } from '@ephox/sugar';
import { dispatchDndEvent, createDragstartEvent, createDragEvent, createDragenterEvent, createDragoverEvent, createDropEvent, createDragendEvent, isDefaultPrevented, getWindowFromElement } from '../dragndrop/DndEvents';
import { createDataTransfer, getDragImage } from '../datatransfer/DataTransfer';
var isDraggable = function (element) {
    var name = Node.name(element);
    return (name === 'img' ||
        name === 'a' && Attr.has(element, 'href') ||
        Attr.get(element, 'draggable') === 'true');
};
var checkDefaultPrevented = function (evt) {
    if (isDefaultPrevented(evt) === false) {
        throw new Error("preventDefault was not called on drag event: " + evt.type);
    }
};
var dragnDrop = function (from, to) {
    var fromWin = getWindowFromElement(from);
    var toWin = getWindowFromElement(to);
    var fromRect = from.dom().getBoundingClientRect();
    var toRect = from.dom().getBoundingClientRect();
    var transfer = createDataTransfer();
    if (isDraggable(from) === false) {
        throw new Error('Can not drag a non draggable element.');
    }
    dispatchDndEvent(createDragstartEvent(fromWin, fromRect.left, fromRect.top, transfer), from);
    dispatchDndEvent(createDragEvent(fromWin, fromRect.left, fromRect.top, transfer), from);
    checkDefaultPrevented(dispatchDndEvent(createDragenterEvent(toWin, toRect.left, toRect.top, transfer), to));
    checkDefaultPrevented(dispatchDndEvent(createDragoverEvent(toWin, toRect.left, toRect.top, transfer), to));
    checkDefaultPrevented(dispatchDndEvent(createDropEvent(toWin, toRect.left, toRect.top, transfer), to));
    dispatchDndEvent(createDragendEvent(fromWin, fromRect.left, fromRect.top, transfer), from);
};
var dropFiles = function (files, to) {
    var toWin = getWindowFromElement(to);
    var toRect = to.dom().getBoundingClientRect();
    var transfer = createDataTransfer();
    Arr.each(files, function (file) {
        transfer.items.add(file);
    });
    dispatchDndEvent(createDragenterEvent(toWin, toRect.left, toRect.top, transfer), to);
    dispatchDndEvent(createDragoverEvent(toWin, toRect.left, toRect.top, transfer), to);
    checkDefaultPrevented(dispatchDndEvent(createDropEvent(toWin, toRect.left, toRect.top, transfer), to));
};
var cDragnDrop = function (fromSelector, toSelector) {
    return NamedChain.asChain([
        NamedChain.direct(NamedChain.inputName(), UiFinder.cFindIn(fromSelector), 'from'),
        NamedChain.direct(NamedChain.inputName(), UiFinder.cFindIn(toSelector), 'to'),
        Chain.op(function (obj) { return dragnDrop(obj.from, obj.to); }),
        NamedChain.output(NamedChain.inputName())
    ]);
};
var sDragnDrop = function (fromSelector, toSelector) {
    return Chain.asStep(Body.body(), [cDragnDrop(fromSelector, toSelector)]);
};
var sDropFiles = function (files, toSelector) {
    return Chain.asStep(Body.body(), [
        UiFinder.cFindIn(toSelector),
        cDropFiles(files)
    ]);
};
var cDropFiles = function (files) {
    return Chain.op(function (elm) {
        dropFiles(files, elm);
    });
};
export { isDraggable, dragnDrop, dropFiles, cDragnDrop, sDragnDrop, sDropFiles, cDropFiles, getDragImage };
//# sourceMappingURL=DragnDrop.js.map