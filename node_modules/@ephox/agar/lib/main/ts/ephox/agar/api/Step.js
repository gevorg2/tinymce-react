import { console } from '@ephox/dom-globals';
import * as AsyncActions from '../pipe/AsyncActions';
import * as GeneralActions from '../pipe/GeneralActions';
import { Pipe } from '../pipe/Pipe';
import { addLogging } from './Guard';
import { addLogEntry } from './TestLogs';
var raw = function (f) {
    return ({ runStep: Pipe(f) });
};
var stateful = function (f) {
    return raw(function (value, next, die, logs) {
        f(value, function (nextValue) { return next(nextValue, logs); }, function (err) { return die(err, logs); });
    });
};
// Chiefly used for limiting things with timeouts.
var control = function (step, guard) {
    return raw(function (value, next, die, logs) {
        guard(step.runStep, value, next, die, logs);
    });
};
var sync = function (f) {
    return raw(function (value, next, die, logs) {
        f();
        next(value, logs);
    });
};
var async = function (f) {
    return raw(function (value, next, die, logs) {
        f(function () { return next(value, logs); }, function (err) { return die(err, logs); });
    });
};
// Convenience functions
var debugging = sync(GeneralActions.debug);
var log = function (message) {
    return raw(function (value, next, die, logs) {
        // tslint:disable-next-line:no-console
        console.log(message);
        next(value, addLogEntry(logs, message));
    });
};
var label = function (label, chain) {
    return control(chain, addLogging(label));
};
var wait = function (amount) {
    return async(AsyncActions.delay(amount));
};
var fail = function (message) {
    return async(AsyncActions.fail(message));
};
var pass = sync(GeneralActions.pass);
var predicate = function (p) {
    return stateful(function (value, next, die) {
        p(value) ? next(value) : die('predicate did not succeed');
    });
};
export var Step = {
    stateful: stateful,
    control: control,
    sync: sync,
    async: async,
    debugging: debugging,
    log: log,
    label: label,
    wait: wait,
    fail: fail,
    pass: pass,
    raw: raw,
    predicate: predicate
};
//# sourceMappingURL=Step.js.map