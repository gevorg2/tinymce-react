import { Chain } from './Chain';
import { Arr } from '@ephox/katamari';
export var compose = function (sab, sbc) {
    // don't Pipe them - assume that the base actions have already been piped
    return ({
        runChain: function (a, next, die, logs) {
            return sab.runChain(a, function (b, blogs) { return sbc.runChain(b, next, die, blogs); }, die, logs);
        }
    });
};
/*
Code partly generated in GHCi:

:m + Data.List
:m + Control.Monad
putStrLn $ intercalate " |\n" $ (\n -> (\x -> "[" ++ x ++ ", Chain<A" ++ (show n) ++ ", T>]") $ intercalate ", " $ (\m -> "Chain<A" ++ (show m) ++ ", A" ++ (show (m + 1)) ++ ">") <$> [1..n-1]) <$> [1..100]
 */
export var sequence = function (Chains) {
    var s = Chains;
    return sequenceUnsafe(s);
};
export var sequenceSame = function (Chains) {
    return sequenceUnsafe(Chains);
};
export var sequenceUnsafe = function (Chains) {
    return Chains.length === 0 ? Chain.identity : Arr.foldl(Chains, function (acc, Chain) { return compose(acc, Chain); }, Chain.identity);
};
//# sourceMappingURL=ChainSequence.js.map