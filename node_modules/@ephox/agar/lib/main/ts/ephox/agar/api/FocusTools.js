import { Result } from '@ephox/katamari';
import { Compare, Focus, Traverse, Truncate } from '@ephox/sugar';
import * as SizzleFind from '../alien/SizzleFind';
import { Chain } from './Chain';
import * as Guard from './Guard';
import * as Logger from './Logger';
import * as UiControls from './UiControls';
import * as UiFinder from './UiFinder';
import * as Waiter from './Waiter';
var cGetFocused = Chain.binder(function (doc) {
    return Focus.active(doc).fold(function () { return Result.error('Could not find active element'); }, Result.value);
});
var cSetFocused = Chain.op(Focus.focus);
var cGetOwnerDoc = Chain.mapper(Traverse.owner);
var sIsOn = function (label, element) {
    return Chain.asStep(element, [
        cGetOwnerDoc,
        cGetFocused,
        Chain.binder(function (active) {
            return Compare.eq(element, active) ? Result.value(active) : Result.error(label + '\nExpected focus: ' + Truncate.getHtml(element) + '\nActual focus: ' + Truncate.getHtml(active));
        })
    ]);
};
var sIsOnSelector = function (label, doc, selector) {
    return Logger.t(label + ": sIsOnSelector(" + selector + ")", Chain.asStep(doc, [
        cGetFocused,
        Chain.binder(function (active) {
            return SizzleFind.matches(active, selector) ? Result.value(active) : Result.error(label + '\nExpected focus $("' + selector + '")]\nActual focus: ' + Truncate.getHtml(active));
        })
    ]));
};
var sTryOnSelector = function (label, doc, selector) {
    return Logger.t(label + '. Focus did not match: ' + selector, Waiter.sTryUntil('Waiting for focus', sIsOnSelector(label, doc, selector), 10, 4000));
};
var cSetFocus = function (label, selector) {
    // Input: container
    return Chain.fromChains([
        Chain.control(UiFinder.cFindIn(selector), Guard.addLogging(label)),
        cSetFocused
    ]);
};
var cSetActiveValue = function (newValue) {
    // Input: container
    return Chain.fromChains([
        cGetOwnerDoc,
        cGetFocused,
        UiControls.cSetValue(newValue)
    ]);
};
// Input: container
var cGetActiveValue = Chain.fromChains([
    cGetOwnerDoc,
    cGetFocused,
    UiControls.cGetValue
]);
var sSetFocus = function (label, container, selector) {
    return Chain.asStep(container, [cSetFocus(label, selector)]);
};
var sSetActiveValue = function (doc, newValue) {
    return Chain.asStep(doc, [
        cGetFocused,
        UiControls.cSetValue(newValue)
    ]);
};
export { sSetActiveValue, sSetFocus, sIsOn, sIsOnSelector, sTryOnSelector, cSetFocus, cSetActiveValue, cGetActiveValue, cGetFocused };
//# sourceMappingURL=FocusTools.js.map