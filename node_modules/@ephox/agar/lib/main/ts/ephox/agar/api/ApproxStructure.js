import { Arr, Obj } from '@ephox/katamari';
import { Attr, Classes, Css, Element, Node, Traverse } from '@ephox/sugar';
import * as ApproxComparisons from '../assertions/ApproxComparisons';
import * as ApproxStructures from '../assertions/ApproxStructures';
var structApi = {
    element: ApproxStructures.element,
    text: ApproxStructures.text,
    anything: ApproxStructures.anything,
    either: ApproxStructures.either,
    repeat: ApproxStructures.repeat,
    zeroOrOne: ApproxStructures.zeroOrOne,
    zeroOrMore: ApproxStructures.zeroOrMore,
    oneOrMore: ApproxStructures.oneOrMore,
    theRest: ApproxStructures.theRest,
};
var strApi = {
    is: ApproxComparisons.is,
    startsWith: ApproxComparisons.startsWith,
    contains: ApproxComparisons.contains,
    none: ApproxComparisons.none
};
var arrApi = {
    not: ApproxComparisons.not,
    has: ApproxComparisons.has,
    hasPrefix: ApproxComparisons.hasPrefix
};
var build = function (f) {
    return f(structApi, strApi, arrApi);
};
var getAttrsExcept = function (node, exclude) {
    return Obj.bifilter(Attr.clone(node), function (value, key) { return !Arr.contains(exclude, key); }).t;
};
var toAssertableObj = function (obj) {
    return Obj.map(obj, ApproxComparisons.is);
};
var toAssertableArr = function (arr) {
    return Arr.map(arr, ApproxComparisons.has);
};
var fromElement = function (node) {
    if (Node.isElement(node)) {
        return ApproxStructures.element(Node.name(node), {
            children: Arr.map(Traverse.children(node), fromElement),
            attrs: toAssertableObj(getAttrsExcept(node, ['style', 'class'])),
            styles: toAssertableObj(Css.getAllRaw(node)),
            classes: toAssertableArr(Classes.get(node))
        });
    }
    else {
        return ApproxStructures.text(ApproxComparisons.is(Node.value(node)), true);
    }
};
var fromHtml = function (html) {
    return fromElement(Element.fromHtml(html));
};
export { build, fromHtml, fromElement };
//# sourceMappingURL=ApproxStructure.js.map