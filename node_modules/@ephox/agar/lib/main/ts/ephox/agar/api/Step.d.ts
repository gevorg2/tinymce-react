import { DieFn, NextFn, RunFn } from '../pipe/Pipe';
import { GuardFn } from './Guard';
import { TestLogs } from './TestLogs';
export interface Step<T, U> {
    runStep: (value: T, next: NextFn<U>, die: DieFn, logs: TestLogs) => void;
}
export declare const Step: {
    stateful: <T, U>(f: (v: T, next: (v: U) => void, die: (err: any) => void) => void) => Step<T, U>;
    control: <T_1, U_1, V>(step: Step<T_1, U_1>, guard: GuardFn<T_1, U_1, V>) => Step<T_1, V>;
    sync: <T_2>(f: () => void) => Step<T_2, T_2>;
    async: <T_3>(f: (next: () => void, die: (err: any) => void) => void) => Step<T_3, T_3>;
    debugging: Step<any, any>;
    log: <T_4>(message: string) => Step<T_4, T_4>;
    label: <T_5, U_2>(label: string, chain: Step<T_5, U_2>) => Step<T_5, U_2>;
    wait: <T_6>(amount: number) => Step<T_6, T_6>;
    fail: <T_7>(message: string) => Step<T_7, T_7>;
    pass: Step<any, any>;
    raw: <T_8, U_3>(f: RunFn<T_8, U_3>) => Step<T_8, U_3>;
    predicate: <T_9>(p: (value: T_9) => boolean) => Step<T_9, T_9>;
};
//# sourceMappingURL=Step.d.ts.map