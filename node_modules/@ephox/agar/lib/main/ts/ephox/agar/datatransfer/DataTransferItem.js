import { Fun, Id, Option } from '@ephox/katamari';
import { isInProtectedMode } from './Mode';
var dataId = Id.generate('data');
var setData = function (item, data) {
    var itemObj = item;
    itemObj[dataId] = data;
};
var getData = function (item) {
    var itemObj = item;
    return Option.from(itemObj[dataId]);
};
var createDataTransferItemFromFile = function (dataTransfer, file) {
    var transferItem = {
        kind: 'file',
        type: file.type,
        getAsString: Fun.noop,
        getAsFile: function () {
            if (isInProtectedMode(dataTransfer) === false) {
                return file;
            }
            else {
                return null;
            }
        },
        // Not supported on all browsers but needed since the dom-globals type has it
        webkitGetAsEntry: Fun.noop
    };
    return transferItem;
};
var createDataTransferItemFromString = function (dataTransfer, type, data) {
    var transferItem = {
        kind: 'string',
        type: type,
        getAsString: function (callback) {
            if (isInProtectedMode(dataTransfer) === false) {
                callback(data);
            }
        },
        getAsFile: Fun.constant(null),
        // Not supported on all browsers but needed since the dom-globals type has it
        webkitGetAsEntry: Fun.noop
    };
    setData(transferItem, data);
    return transferItem;
};
export { createDataTransferItemFromFile, createDataTransferItemFromString, getData };
//# sourceMappingURL=DataTransferItem.js.map