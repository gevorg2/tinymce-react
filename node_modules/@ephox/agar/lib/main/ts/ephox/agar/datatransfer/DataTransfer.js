import { Arr, Type, Id, Option } from '@ephox/katamari';
import { createDataTransferItemList } from './DataTransferItemList';
import { createFileList } from '../file/FileList';
import { getData } from './DataTransferItem';
import { setReadWriteMode, isInProtectedMode, isInReadWriteMode } from './Mode';
var imageId = Id.generate('image');
var validDropEffects = ['none', 'copy', 'link', 'move'];
var validEffectAlloweds = ['none', 'copy', 'copyLink', 'copyMove', 'link', 'linkMove', 'move', 'all', 'uninitialized'];
var setDragImage = function (transfer, imageData) {
    var dt = transfer;
    dt[imageId] = imageData;
};
var getDragImage = function (transfer) {
    var dt = transfer;
    return Option.from(dt[imageId]);
};
var normalize = function (format) {
    var lcFormat = format.toLowerCase();
    if (lcFormat === 'text') {
        return 'text/plain';
    }
    else if (lcFormat === 'url') {
        return 'text/uri-list';
    }
    else {
        return lcFormat;
    }
};
var createDataTransfer = function () {
    var dropEffect = 'move';
    var effectAllowed = 'all';
    var items;
    var dataTransfer = {
        get dropEffect() {
            return dropEffect;
        },
        set dropEffect(effect) {
            if (Arr.contains(validDropEffects, effect)) {
                dropEffect = effect;
            }
        },
        get effectAllowed() {
            return effectAllowed;
        },
        set effectAllowed(allowed) {
            if (Arr.contains(validEffectAlloweds, allowed)) {
                effectAllowed = allowed;
            }
        },
        get items() {
            return items;
        },
        get files() {
            if (isInProtectedMode(dataTransfer)) {
                return createFileList([]);
            }
            var files = Arr.bind(Arr.from(items), function (item) {
                return item.kind === 'file' ? [item.getAsFile()] : [];
            });
            return createFileList(files);
        },
        get types() {
            var types = Arr.map(Arr.from(items), function (item) { return item.type; });
            var hasFiles = Arr.exists(Arr.from(items), function (item) { return item.kind === 'file'; });
            return types.concat(hasFiles ? ['Files'] : []);
        },
        setDragImage: function (image, x, y) {
            if (isInReadWriteMode(dataTransfer)) {
                setDragImage(dataTransfer, { image: image, x: x, y: y });
            }
        },
        getData: function (format) {
            if (isInProtectedMode(dataTransfer)) {
                return '';
            }
            return Arr.find(Arr.from(items), function (item) { return item.type === normalize(format); }).bind(function (item) { return getData(item); }).getOr('');
        },
        setData: function (format, data) {
            if (isInReadWriteMode(dataTransfer)) {
                dataTransfer.clearData(normalize(format));
                items.add(data, normalize(format));
            }
            return true; // Standard says void dom-globals says boolean
        },
        clearData: function (format) {
            if (isInReadWriteMode(dataTransfer)) {
                var normalizedFormat_1 = normalize(format);
                if (Type.isString(normalizedFormat_1)) {
                    Arr.findIndex(Arr.from(items), function (item) { return item.type === normalizedFormat_1; }).each(function (idx) {
                        items.remove(idx);
                    });
                }
                else {
                    for (var i = items.length; i >= 0; i--) {
                        if (items[i].kind === 'string') {
                            items.remove(i);
                        }
                    }
                }
            }
            return true; // Standard says void dom-globals says boolean
        }
    };
    items = createDataTransferItemList(dataTransfer);
    setReadWriteMode(dataTransfer);
    return dataTransfer;
};
export { createDataTransfer, getDragImage };
//# sourceMappingURL=DataTransfer.js.map