import { Element } from '@ephox/sugar';
import { Chain } from './Chain';
export interface CursorRange {
    start: () => Element<any>;
    soffset: () => number;
    finish: () => Element<any>;
    foffset: () => number;
}
export interface CursorPath {
    startPath: () => number[];
    soffset: () => number;
    finishPath: () => number[];
    foffset: () => number;
}
declare type RangeConstructor = (obj: {
    start: Element<any>;
    soffset: number;
    finish: Element<any>;
    foffset: number;
}) => CursorRange;
declare const range: RangeConstructor;
declare type PathConstructor = (obj: {
    startPath: number[];
    soffset: number;
    finishPath: number[];
    foffset: number;
}) => CursorPath;
declare const path: PathConstructor;
export interface CursorSpec {
    element: number[];
    offset: number;
}
export interface RangeSpec {
    start: CursorSpec;
    finish?: CursorSpec;
}
declare const pathFrom: (spec: CursorSpec | RangeSpec) => CursorPath;
declare const cFollowPath: (calcPath: CursorPath) => Chain<Element<any>, CursorRange>;
declare const cFollowCursor: (elementPath: number[], offset: number) => Chain<Element<any>, CursorRange>;
declare const cFollow: (elementPath: number[]) => Chain<Element<any>, Element<any>>;
declare const cToRange: Chain<{
    start: Element<any>;
    soffset: number;
    finish: Element<any>;
    foffset: number;
}, CursorRange>;
declare const cToPath: Chain<{
    startPath: number[];
    soffset: number;
    finishPath: number[];
    foffset: number;
}, CursorPath>;
declare const calculate: (container: Element<any>, calcPath: CursorPath) => CursorRange;
declare const calculateOne: (container: Element<any>, calcPath: number[]) => Element<any>;
export { range, path, pathFrom, cFollow, cFollowPath, cFollowCursor, cToRange, cToPath, calculate, calculateOne };
//# sourceMappingURL=Cursors.d.ts.map