import { Touch, TouchEvent, UIEvent, window } from '@ephox/dom-globals';
import { Location, Node, Traverse } from '@ephox/sugar';
var point = function (type, element, x, y) {
    var touch = {
        identifier: Date.now(),
        target: element.dom(),
        clientX: x,
        clientY: y,
        pageX: x,
        pageY: y,
        radiusX: 2.5,
        radiusY: 2.5,
        rotationAngle: 10,
        force: 0.5,
    };
    // Adapted from https://stackoverflow.com/a/42447620/11275515
    if (typeof TouchEvent === 'function' && typeof Touch === 'function') {
        // @ts-ignore
        var touchAction = new Touch(touch);
        var ev = new TouchEvent(type, {
            cancelable: true,
            bubbles: true,
            view: window,
            touches: [touchAction],
            targetTouches: [],
            changedTouches: [touchAction]
        });
        element.dom().dispatchEvent(ev);
    }
    else {
        // No native touch event support, so we need to simulate with a UIEvent
        var ev = void 0;
        if (typeof UIEvent === 'function') {
            ev = new UIEvent(type, {
                cancelable: true,
                bubbles: true,
                view: window
            });
        }
        else {
            // IE 11 doesn't support the UIEvent constructor, so we need to fallback to using createEvent
            ev = element.dom().ownerDocument.createEvent('UIEvent');
            ev.initUIEvent(type, true, true, window, null);
        }
        // Patch in the touch properties
        ev.touches = [touch];
        ev.targetTouches = [];
        ev.changedTouches = [touch];
        element.dom().dispatchEvent(ev);
    }
};
var touch = function (eventType) { return function (element) {
    var position = Location.absolute(Node.isText(element) ? Traverse.parent(element).getOrDie() : element);
    point(eventType, element, position.left(), position.top());
}; };
var touchAt = function (eventType) { return function (dx, dy) { return function (element) {
    var position = Location.absolute(Node.isText(element) ? Traverse.parent(element).getOrDie() : element);
    point(eventType, element, position.left() + dx, position.top() + dy);
}; }; };
var touchstart = touch('touchstart');
var touchstartAt = touchAt('touchstart');
var touchend = touch('touchend');
var touchendAt = touchAt('touchend');
var touchmove = touch('touchmove');
var touchmoveTo = touchAt('touchmove');
export { touchstart, touchstartAt, touchend, touchendAt, touchmove, touchmoveTo, point };
//# sourceMappingURL=Touches.js.map