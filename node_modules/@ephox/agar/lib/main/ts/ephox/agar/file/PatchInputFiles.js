import { HTMLInputElement, document } from '@ephox/dom-globals';
import { Cell, Option } from '@ephox/katamari';
import { GeneralSteps, Chain } from '@ephox/agar';
import { createFileList } from './FileList';
var inputPrototypeState = Cell(Option.none());
var createChangeEvent = function (win) {
    var event = document.createEvent('CustomEvent');
    event.initCustomEvent('change', true, true, null);
    event.view = win;
    event.ctrlKey = false;
    event.altKey = false;
    event.shiftKey = false;
    event.metaKey = false;
    event.button = 0;
    event.relatedTarget = null;
    event.screenX = 0;
    event.screenY = 0;
    return event;
};
var cPatchInputElement = function (files) { return Chain.op(function () {
    var currentProps = {
        files: Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'files'),
        click: HTMLInputElement.prototype.click
    };
    inputPrototypeState.set(Option.some(currentProps));
    Object.defineProperty(HTMLInputElement.prototype, 'files', {
        get: function () { return createFileList(files); }
    });
    HTMLInputElement.prototype.click = function () {
        this.dispatchEvent(createChangeEvent(this.ownerDocument.defaultView));
    };
}); };
var cUnpatchInputElement = Chain.op(function () {
    inputPrototypeState.get().each(function (props) {
        Object.defineProperty(HTMLInputElement.prototype, 'files', props.files);
        HTMLInputElement.prototype.click = props.click;
    });
});
var sRunOnPatchedFileInput = function (files, step) {
    return GeneralSteps.sequence([
        Chain.asStep({}, [cPatchInputElement(files)]),
        step,
        Chain.asStep({}, [cUnpatchInputElement]),
    ]);
};
var cRunOnPatchedFileInput = function (files, chain) {
    return Chain.fromChains([
        cPatchInputElement(files),
        chain,
        cUnpatchInputElement
    ]);
};
export { sRunOnPatchedFileInput, cRunOnPatchedFileInput };
//# sourceMappingURL=PatchInputFiles.js.map