import { document } from '@ephox/dom-globals';
import { setReadWriteMode, setReadOnlyMode, setProtectedMode } from '../datatransfer/Mode';
import { PlatformDetection } from '@ephox/sand';
var platform = PlatformDetection.detect();
var createDndEvent = function (name) { return function (win, x, y, dataTransfer) {
    var event = document.createEvent('CustomEvent');
    event.initCustomEvent(name, true, true, null);
    event.view = win;
    event.ctrlKey = false;
    event.altKey = false;
    event.shiftKey = false;
    event.metaKey = false;
    event.button = 0;
    event.relatedTarget = null;
    event.screenX = win.screenX + x;
    event.screenY = win.screenY + y;
    event.dataTransfer = dataTransfer;
    // IE doesn't update the defaultPrevented state for some reason
    // and it's read only so we need to have a different property
    if (platform.browser.isIE()) {
        var orgPreventDefault_1 = event.preventDefault;
        event.preventDefault = function () {
            event.ieDefaultPrevented = true;
            orgPreventDefault_1.call(event);
        };
    }
    return event;
}; };
var createDragoverEvent = createDndEvent('dragover');
var createDragendEvent = createDndEvent('dragend');
var createDragstartEvent = createDndEvent('dragstart');
var createDragleaveEvent = createDndEvent('dragleave');
var createDragenterEvent = createDndEvent('dragenter');
var createDropEvent = createDndEvent('drop');
var createDragEvent = createDndEvent('drag');
var isDefaultPrevented = function (evt) {
    return evt.defaultPrevented || evt.hasOwnProperty('ieDefaultPrevented');
};
var dispatchDndEvent = function (event, target) {
    if (event.type === 'dragstart') {
        setReadWriteMode(event.dataTransfer);
    }
    else if (event.type === 'drop') {
        setReadOnlyMode(event.dataTransfer);
    }
    else {
        setProtectedMode(event.dataTransfer);
    }
    target.dom().dispatchEvent(event);
    return event;
};
var getWindowFromElement = function (element) {
    return element.dom().ownerDocument.defaultView;
};
export { createDndEvent, createDragoverEvent, createDragendEvent, createDragstartEvent, createDragleaveEvent, createDragenterEvent, createDropEvent, createDragEvent, isDefaultPrevented, dispatchDndEvent, getWindowFromElement };
//# sourceMappingURL=DndEvents.js.map