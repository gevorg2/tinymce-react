import { console } from '@ephox/dom-globals';
import { Arr } from '@ephox/katamari';
import * as ErrorTypes from '../alien/ErrorTypes';
import { Step } from './Step';
import { addLogEntry, popLogLevel, pushLogLevel } from './TestLogs';
var t = function (label, f) {
    var enrich = function (err) { return ErrorTypes.enrichWith(label, err); };
    return Step.raw(function (value, next, die, logs) {
        var updatedLogs = pushLogLevel(addLogEntry(logs, label));
        var dieWith = function (err, newLogs) { return die(enrich(err), popLogLevel(newLogs)); };
        try {
            return f.runStep(value, function (v, newLogs) { return next(v, popLogLevel(newLogs)); }, dieWith, updatedLogs);
        }
        catch (err) {
            dieWith(err, updatedLogs);
        }
    });
};
var sync = function (label, f) {
    var enrich = function (err) { return ErrorTypes.enrichWith(label, err); };
    try {
        return f();
    }
    catch (err) {
        throw enrich(err);
    }
};
var ts = function (label, fs) {
    if (fs.length === 0) {
        return fs;
    }
    return Arr.map(fs, function (f, i) { return t(label + '(' + i + ')', f); });
};
var spec = function (msg) {
    // TMP, WIP
    // tslint:disable-next-line:no-console
    console.log(msg);
};
export { t, ts, sync, spec };
//# sourceMappingURL=Logger.js.map