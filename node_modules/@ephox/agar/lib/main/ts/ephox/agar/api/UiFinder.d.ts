import { Result } from '@ephox/katamari';
import { Element } from '@ephox/sugar';
import { Chain } from './Chain';
import { Step } from './Step';
import { TestLabel } from '@ephox/bedrock-client';
declare const findIn: (container: Element<any>, selector: string) => Result<Element<any>, TestLabel>;
declare const findAllIn: (container: Element<any>, selector: string) => Element<any>[];
declare const cWaitFor: (message: string, selector: string) => Chain<Element<any>, Element<any>>;
declare const sWaitFor: <T>(message: string, container: Element<any>, selector: string) => Step<T, T>;
declare const cWaitForVisible: (message: string, selector: string) => Chain<Element<any>, Element<any>>;
declare const cWaitForHidden: (message: string, selector: string) => Chain<Element<any>, Element<any>>;
declare const sWaitForVisible: <T>(message: string, container: Element<any>, selector: string) => Step<T, T>;
declare const sWaitForHidden: <T>(message: string, container: Element<any>, selector: string) => Step<T, T>;
declare const cWaitForState: (message: string, selector: string, predicate: (element: Element<any>) => boolean) => Chain<Element<any>, Element<any>>;
declare const sExists: <T>(container: Element<any>, selector: string) => Step<T, T>;
declare const sNotExists: <T>(container: Element<any>, selector: string) => Step<T, T>;
declare const cExists: (selector: string) => Chain<Element<any>, Element<any>>;
declare const cNotExists: (selector: string) => Chain<Element<any>, Element<any>>;
declare const cFindIn: (selector: string) => Chain<Element<any>, Element<any>>;
declare const cFindAllIn: (selector: string) => Chain<Element<any>, Element<any>[]>;
export { findIn, findAllIn, sExists, sNotExists, sWaitFor, sWaitForVisible, sWaitForHidden, cExists, cNotExists, cWaitFor, cWaitForVisible, cWaitForHidden, cWaitForState, cFindIn, cFindAllIn };
//# sourceMappingURL=UiFinder.d.ts.map