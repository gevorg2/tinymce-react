import { console } from '@ephox/dom-globals';
import { Thunk } from '@ephox/katamari';
import Jsc from '@ephox/wrap-jsverify';
import { Step } from '../api/Step';
import { TestLogs } from '../api/TestLogs';
var logNoPromises = Thunk.cached(function () {
    // tslint:disable-next-line:no-console
    console.warn('No native promise support on browser to run async property tests. Skipping!');
});
var fakePromise = function () {
    var self = {
        then: function (fs) {
            logNoPromises();
            fs(true);
            return self;
        }
    };
    return self;
};
var stepToPromise = function (step) {
    return function (input) {
        // tslint:disable-next-line:no-unimported-promise
        return typeof Promise !== 'undefined' ? new Promise(function (resolve, reject) {
            step.runStep(input, function () {
                resolve(true);
                // Not sure what to do about logging for this.
            }, reject, TestLogs.init());
        }) : fakePromise();
    };
};
// Maybe wrap in the same way Jsc does for console output with ticks and crosses.
var sAsyncProperty = function (name, arbitraries, statefulStep, _options) {
    var options = _options !== undefined ? _options : {};
    return Step.async(function (next, die) {
        Jsc.asyncProperty(name, arbitraries, stepToPromise(statefulStep), options).then(next, die);
    });
};
export { sAsyncProperty };
//# sourceMappingURL=PropertySteps.js.map