import { Obj, Option } from '@ephox/katamari';
import { Compare, Element, Truncate } from '@ephox/sugar';
import { elementQueue } from '../assertions/ApproxStructures';
import * as Differ from '../assertions/Differ';
import * as ApproxStructure from './ApproxStructure';
import { Chain } from './Chain';
import * as Logger from './Logger';
import { Step } from './Step';
import * as UiFinder from './UiFinder';
import { Assert, TestLabel } from '@ephox/bedrock-client';
var toStep = function (method) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return Step.sync(function () {
            method.apply(undefined, args);
        });
    };
};
var toChain = function (method) {
    return function (label, expected) {
        return Chain.op(function (actual) {
            method.call(undefined, label, expected, actual);
        });
    };
};
var textError = function (label, expected, actual) {
    var err = new Error(label);
    err.diff = {
        expected: expected,
        actual: actual,
        comparison: Differ.htmlDiff(expected, actual)
    };
    err.label = label;
    err.name = 'HtmlAssertion';
    return err;
};
var assertHtml = function (label, expected, actual) {
    if (expected !== actual) {
        throw textError(TestLabel.asString(label), expected, actual);
    }
};
var assertStructure = function (label, expected, container) {
    Logger.sync(label, function () {
        if (expected.type === 'advanced') {
            expected.doAssert(elementQueue([container], Option.none()));
        }
        else {
            expected.doAssert(container);
        }
    });
};
var assertHtmlStructure = function (label, expected, actual) {
    assertStructure(label, ApproxStructure.fromHtml(expected), Element.fromHtml(actual));
};
var assertHtmlStructure2 = function (label, expected, actual) {
    assertStructure(label, ApproxStructure.fromHtml(expected), actual);
};
var assertPresence = function (label, expected, container) {
    Obj.each(expected, function (num, selector) {
        var actual = UiFinder.findAllIn(container, selector).length;
        Assert.eq(TestLabel.concat('Did not find ' + num + ' of ' + selector + ', found: ' + actual + '. Test: ', label), num, actual);
    });
};
var assertEq = Assert.eq;
var assertDomEq = function (label, expected, actual) {
    Assert.eq(TestLabel.concat(label, function () { return '\nExpected : ' + Truncate.getHtml(expected) + '\nActual: ' + Truncate.getHtml(actual); }), true, Compare.eq(expected, actual));
};
var sAssertEq = toStep(Assert.eq);
var sAssertHtml = toStep(assertHtml);
var sAssertPresence = toStep(assertPresence);
var sAssertStructure = toStep(assertStructure);
var cAssertEq = toChain(Assert.eq);
var cAssertDomEq = toChain(assertDomEq);
var cAssertHtml = toChain(assertHtml);
var cAssertPresence = toChain(assertPresence);
var cAssertHtmlStructure = toChain(assertHtmlStructure2);
var cAssertStructure = toChain(assertStructure);
export { assertEq, assertDomEq, assertHtml, assertPresence, assertHtmlStructure, assertStructure, sAssertEq, sAssertHtml, sAssertPresence, sAssertStructure, cAssertEq, cAssertDomEq, cAssertHtml, cAssertPresence, cAssertHtmlStructure, cAssertStructure };
//# sourceMappingURL=Assertions.js.map