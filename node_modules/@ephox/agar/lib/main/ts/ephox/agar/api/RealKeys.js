import { Adt, Arr, Struct } from '@ephox/katamari';
import { newModifiers } from '../keyboard/FakeKeys';
import * as SeleniumAction from '../server/SeleniumAction';
var adt = Adt.generate([
    { combo: ['modifiers', 'letter'] },
    { text: ['s'] },
    { backspace: [] }
]);
var modifierList = Struct.immutableBag([], [
    'ctrlKey',
    'metaKey',
    'shiftKey',
    'altKey'
]);
var toSimpleFormat = function (keys) {
    return Arr.map(keys, function (key) { return key.fold(function (modifiers, letter) { return ({
        combo: {
            ctrlKey: modifiers.ctrlKey().getOr(false),
            shiftKey: modifiers.shiftKey().getOr(false),
            metaKey: modifiers.metaKey().getOr(false),
            altKey: modifiers.altKey().getOr(false),
            key: letter
        }
    }); }, function (s) { return ({ text: s }); }, function () { return ({ text: '\u0008' }); }); });
};
var sSendKeysOn = function (selector, keys) {
    return SeleniumAction.sPerform('/keys', {
        selector: selector,
        keys: toSimpleFormat(keys)
    });
};
var combo = function (modifiers, letter) {
    var mods = modifierList(newModifiers(modifiers));
    return adt.combo(mods, letter);
};
var backspace = adt.backspace;
var text = adt.text;
export var RealKeys = {
    combo: combo,
    backspace: backspace,
    text: text,
    sSendKeysOn: sSendKeysOn
    // TODO: sSendKeysTo (and sSendKeys) which tags the element so that it can pass through a selector
};
//# sourceMappingURL=RealKeys.js.map