import { Option } from 'ephox/katamari/api/Option';
import { Result } from 'ephox/katamari/api/Result';
import { Future } from 'ephox/katamari/api/Future';
import fc from 'fast-check';
declare type Arbitrary<A> = fc.Arbitrary<A>;
export declare const arbResultError: <A, E>(arbE: Arbitrary<E>) => Arbitrary<Result<A, E>>;
export declare const arbResultValue: <A, E>(arbA: Arbitrary<A>) => Arbitrary<Result<A, E>>;
export declare const arbResult: <A, E>(arbA: Arbitrary<A>, arbE: Arbitrary<E>) => Arbitrary<Result<A, E>>;
export declare const arbOptionNone: <T>() => fc.Arbitrary<Option<unknown>>;
export declare const arbOptionSome: <T>(at: Arbitrary<T>) => fc.Arbitrary<Option<T>>;
export declare const arbOption: <T>(at: Arbitrary<T>) => fc.Arbitrary<Option<unknown>>;
export declare const arbNegativeInteger: () => import("fast-check/lib/ts3.2/check/arbitrary/definition/ArbitraryWithShrink").ArbitraryWithShrink<number>;
export declare const arbFutureNow: <A>(arbA: Arbitrary<A>) => Arbitrary<Future<A>>;
export declare const arbFutureSoon: <A>(arbA: Arbitrary<A>) => Arbitrary<Future<A>>;
export declare const arbFutureNever: <A>() => Arbitrary<Future<A>>;
export declare const arbFutureNowOrSoon: <A>(arbA: Arbitrary<A>) => Arbitrary<Future<A>>;
export {};
//# sourceMappingURL=ArbDataTypes.d.ts.map