import { __spreadArrays } from "tslib";
import { Assert, UnitTest } from '@ephox/bedrock-client';
import fc from 'fast-check';
import { Option, Options, OptionInstances, Arr, Fun } from 'ephox/katamari/api/Main';
var tOption = OptionInstances.tOption;
UnitTest.test('Arr.findMap of empty is none', function () {
    Assert.eq('eq', Option.none(), Arr.findMap([], Fun.die('‚ä•')), tOption());
});
UnitTest.test('Arr.findMap of non-empty is first if f is Option.some', function () {
    fc.assert(fc.property(fc.integer(), fc.array(fc.integer()), function (head, tail) {
        var arr = __spreadArrays([head], tail);
        Assert.eq('eq', Option.some(head), Arr.findMap(arr, Option.some), tOption());
    }));
});
UnitTest.test('Arr.findMap of non-empty is none if f is Option.none', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        Assert.eq('eq', Option.none(), Arr.findMap(arr, function () { return Option.none(); }), tOption());
    }));
});
UnitTest.test('Arr.findMap finds an element', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.integer(), fc.integer(), fc.array(fc.integer()), function (prefix, element, ret, suffix) {
        var arr = __spreadArrays(prefix, [element], suffix);
        Assert.eq('eq', Option.some(ret), Arr.findMap(arr, function (x) { return Options.someIf(x === element, ret); }), tOption());
    }));
});
UnitTest.test('Arr.findMap does not find an element', function () {
    fc.assert(fc.property(fc.array(fc.nat()), fc.nat(), function (arr, ret) {
        Assert.eq('eq', Option.none(), Arr.findMap(arr, function (x) { return Options.someIf(x === -1, ret); }), tOption());
    }));
});
//# sourceMappingURL=ArrFindMapTest.js.map