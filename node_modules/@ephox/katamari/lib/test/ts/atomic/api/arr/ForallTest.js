import * as Arr from 'ephox/katamari/api/Arr';
import * as Fun from 'ephox/katamari/api/Fun';
import { UnitTest, Assert } from '@ephox/bedrock-client';
import fc from 'fast-check';
UnitTest.test('Arr.forall: unit tests', function () {
    var isone = function (i) { return i === 1; };
    var check = function (expected, input, f) {
        Assert.eq('eq', expected, Arr.forall(input, f));
        Assert.eq('eq', expected, Arr.forall(Object.freeze(input.slice()), f));
    };
    check(true, [1, 1, 1], isone);
    check(false, [1, 2, 1], isone);
    check(false, [1, 2, 1], function (x, i) { return i === 0; });
    check(true, [1, 12, 3], function (x, i) { return i < 10; });
});
UnitTest.test('forall of an empty array is true', function () {
    Assert.eq('forall empty array', true, Arr.forall([], function () { throw new Error('âŠ¥'); }));
});
UnitTest.test('forall of a non-empty array with a predicate that always returns false is false', function () {
    fc.assert(fc.property(fc.array(fc.integer(), 1, 30), function (xs) {
        var output = Arr.forall(xs, Fun.constant(false));
        Assert.eq('eq', false, output);
    }));
});
UnitTest.test('forall of a non-empty array with a predicate that always returns true is true', function () {
    fc.assert(fc.property(fc.array(fc.integer(), 1, 30), function (xs) {
        var output = Arr.forall(xs, Fun.constant(true));
        Assert.eq('eq', true, output);
    }));
});
//# sourceMappingURL=ForallTest.js.map