import { Assert, UnitTest } from '@ephox/bedrock-client';
import fc from 'fast-check';
import { Result } from 'ephox/katamari/api/Result';
import { tResult } from 'ephox/katamari/api/ResultInstances';
import { Testable, Pprint } from '@ephox/dispute';
var tNumber = Testable.tNumber, tString = Testable.tString;
UnitTest.test('ResultInstances.eq: value(x) = value(x)', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        Assert.eq('results should be equal', Result.value(i), Result.value(i), tResult(tNumber, tString));
    }));
});
UnitTest.test('ResultInstances.eq: error(x) = error(x)', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        Assert.eq('results should be equal', Result.error(i), Result.error(i), tResult(tString, tNumber));
    }));
});
UnitTest.test('ResultInstances.eq: value(a) != error(e)', function () {
    fc.assert(fc.property(fc.integer(), fc.string(), function (a, e) {
        Assert.eq('results should not be equal #1', false, tResult(tNumber, tString).eq(Result.value(a), Result.error(e)));
        Assert.eq('results should not be equal #2', false, tResult(tNumber, tString).eq(Result.error(e), Result.value(a)));
    }));
});
UnitTest.test('ResultInstances.eq: (a = b) = (value(a) = value(b))', function () {
    fc.assert(fc.property(fc.integer(), fc.integer(), function (a, b) {
        Assert.eq('eq', a === b, tResult(tNumber, tString).eq(Result.value(a), Result.value(b)));
    }));
});
UnitTest.test('ResultInstances.eq: (a = b) = (error(a) = error(b))', function () {
    fc.assert(fc.property(fc.string(), fc.string(), function (a, b) {
        Assert.eq('eq', a === b, tResult(tNumber, tString).eq(Result.error(a), Result.error(b)));
    }));
});
UnitTest.test('ResultInstances.pprint', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        Assert.eq('pprint value', "Result.value(\n  " + i + "\n)", Pprint.render(Result.value(i), tResult(tNumber, tString)));
        Assert.eq('pprint error', "Result.error(\n  " + i + "\n)", Pprint.render(Result.error(i), tResult(tString, tNumber)));
    }));
});
//# sourceMappingURL=ResultInstancesTest.js.map