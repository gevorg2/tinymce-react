import * as Arr from 'ephox/katamari/api/Arr';
import { Option } from 'ephox/katamari/api/Option';
import { tOption } from 'ephox/katamari/api/OptionInstances';
import { Assert, UnitTest } from '@ephox/bedrock-client';
import { Testable } from '@ephox/dispute';
import fc from 'fast-check';
import { arbNegativeInteger } from 'ephox/katamari/test/arb/ArbDataTypes';
var tNumber = Testable.tNumber;
UnitTest.test('Arr.findIndex: unit tests', function () {
    var checkNoneHelper = function (input, pred) {
        Assert.eq('should be none', Option.none(), Arr.findIndex(input, pred), tOption(tNumber));
    };
    var checkNone = function (input, pred) {
        checkNoneHelper(input, pred);
        checkNoneHelper(Object.freeze(input.slice()), pred);
    };
    var checkHelper = function (expected, input, pred) {
        Assert.eq('should be some', Option.some(expected), Arr.findIndex(input, pred), tOption(tNumber));
    };
    var check = function (expected, input, pred) {
        checkHelper(expected, input, pred);
        checkHelper(expected, Object.freeze(input), pred);
    };
    checkNone([], function (x) { return x > 0; });
    checkNone([-1], function (x) { return x > 0; });
    check(0, [1], function (x) { return x > 0; });
    check(3, [4, 2, 10, 41, 3], function (x) { return x === 41; });
    check(5, [4, 2, 10, 41, 3, 100], function (x) { return x > 80; });
    checkNone([4, 2, 10, 412, 3], function (x) { return x === 41; });
});
UnitTest.test('Arr.findIndex: find in middle of array', function () {
    fc.assert(fc.property(fc.array(fc.nat()), arbNegativeInteger(), fc.array(fc.nat()), function (prefix, element, suffix) {
        var arr = prefix.concat([element]).concat(suffix);
        Assert.eq('Element should be found immediately after the prefix array', Option.some(prefix.length), Arr.findIndex(arr, function (x) { return x === element; }), tOption(tNumber));
    }));
});
UnitTest.test('Arr.findIndex: Element found passes predicate', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        var pred = function (x) { return x % 3 === 0; };
        return Arr.findIndex(arr, pred).forall(function (x) { return pred(arr[x]); });
    }));
});
UnitTest.test('Arr.findIndex: If predicate is always false, then index is always none', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        Assert.eq('should be none', Option.none(), Arr.findIndex(arr, function () { return false; }), tOption(tNumber));
    }));
});
UnitTest.test('Arr.findIndex: consistent with find', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        var pred = function (x) { return x % 5 === 0; };
        Assert.eq('findIndex vs find', Arr.find(arr, pred), Arr.findIndex(arr, pred).map(function (x) { return arr[x]; }), tOption(tNumber));
    }));
});
UnitTest.test('Arr.findIndex: consistent with exists', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        var pred = function (x) { return x % 6 === 0; };
        Assert.eq('findIndex vs find', Arr.exists(arr, pred), Arr.findIndex(arr, pred).isSome());
    }));
});
//# sourceMappingURL=FindIndexTest.js.map