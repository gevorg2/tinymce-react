import * as Arr from 'ephox/katamari/api/Arr';
import { UnitTest, Assert } from '@ephox/bedrock-client';
import fc from 'fast-check';
var eqc = function (x) { return function (a) { return x === a; }; };
var never = function () { return false; };
var always = function () { return true; };
var bottom = function () { throw new Error('error'); };
UnitTest.test('Arr.exists: unit test', function () {
    var check = function (expected, input, f) {
        Assert.eq('exists', expected, Arr.exists(input, f));
        Assert.eq('exists frozen', expected, Arr.exists(Object.freeze(input.slice()), f));
    };
    check(true, [1, 2, 3], eqc(1));
    check(false, [2, 3, 4], eqc(1));
    Assert.eq('Element does not exist in empty array when predicate is ‚ä•', false, Arr.exists([], bottom));
    Assert.eq('Element does not exist in empty array even when predicate always returns true', false, Arr.exists([], always));
});
UnitTest.test('Element exists in middle of array', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.integer(), fc.array(fc.integer()), function (prefix, element, suffix) {
        var arr2 = Arr.flatten([prefix, [element], suffix]);
        Assert.eq('in array', true, Arr.exists(arr2, eqc(element)));
    }));
});
UnitTest.test('Element exists in singleton array of itself', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (i) {
        Assert.eq('in array', true, Arr.exists([i], eqc(i)));
    }));
});
UnitTest.test('Element does not exist in empty array', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (i) {
        Assert.eq('not in empty array', false, Arr.exists([], eqc(i)));
    }));
});
UnitTest.test('Element not found when predicate always returns false', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) { return !Arr.exists(arr, never); }));
});
UnitTest.test('Element exists in non-empty array when predicate always returns true', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.integer(), function (xs, x) {
        var arr = Arr.flatten([xs, [x]]);
        return Arr.exists(arr, always);
    }));
});
//# sourceMappingURL=ExistsTest.js.map