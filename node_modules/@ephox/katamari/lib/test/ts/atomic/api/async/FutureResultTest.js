/* tslint:disable:no-unimported-promise */
import { Future } from 'ephox/katamari/api/Future';
import { FutureResult } from 'ephox/katamari/api/FutureResult';
import { Result } from 'ephox/katamari/api/Result';
import * as Fun from 'ephox/katamari/api/Fun';
import fc from 'fast-check';
import { tResult } from 'ephox/katamari/api/ResultInstances';
import { Testable } from '@ephox/dispute';
import { arbResult } from 'ephox/katamari/test/arb/ArbDataTypes';
import { eqAsync, promiseTest } from 'ephox/katamari/test/AsyncProps';
var tNumber = Testable.tNumber;
promiseTest('FutureResult: nu', function () {
    return fc.assert(fc.asyncProperty(arbResult(fc.integer(), fc.integer()), function (r) {
        return new Promise(function (resolve, reject) {
            FutureResult.nu(function (completer) {
                completer(r);
            }).get(function (ii) {
                eqAsync('eq', r, ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: fromFuture', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.fromFuture(Future.pure(i)).get(function (ii) {
                eqAsync('eq', Result.value(i), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: wrap get', function () {
    return fc.assert(fc.asyncProperty(arbResult(fc.integer(), fc.integer()), function (r) {
        return new Promise(function (resolve, reject) {
            FutureResult.wrap(Future.pure(r)).get(function (ii) {
                eqAsync('eq', r, ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: fromResult get', function () {
    return fc.assert(fc.asyncProperty(arbResult(fc.integer(), fc.integer()), function (r) {
        return new Promise(function (resolve, reject) {
            FutureResult.fromResult(r).get(function (ii) {
                eqAsync('eq', r, ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: pure get', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.pure(i).get(function (ii) {
                eqAsync('eq', Result.value(i), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: value get', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.value(i).get(function (ii) {
                eqAsync('eq', Result.value(i), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: error get', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.error(i).get(function (ii) {
                eqAsync('eq', Result.error(i), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: value mapResult', function () {
    var f = function (x) { return x + 3; };
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.value(i).mapResult(f).get(function (ii) {
                eqAsync('eq', Result.value(f(i)), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: error mapResult', function () {
    var f = function (x) { return x + 3; };
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.error(i).mapResult(Fun.die('⊥')).get(function (ii) {
                eqAsync('eq', Result.error(i), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: value mapError', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.value(i).mapError(Fun.die('⊥')).get(function (ii) {
                eqAsync('eq', Result.value(i), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: err mapError', function () {
    var f = function (x) { return x + 3; };
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.error(i).mapError(f).get(function (ii) {
                eqAsync('eq', Result.error(f(i)), ii, reject, tResult());
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: value bindFuture value', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            var f = function (x) { return x % 4; };
            FutureResult.value(i).bindFuture(function (x) { return FutureResult.value(f(x)); }).get(function (actual) {
                eqAsync('bind result', Result.value(f(i)), actual, reject, tResult(tNumber));
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: bindFuture: value bindFuture error', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), fc.string(), function (i, s) {
        return new Promise(function (resolve, reject) {
            FutureResult.value(i).bindFuture(function (i) { return FutureResult.error(s); }).get(function (actual) {
                eqAsync('bind result', Result.error(s), actual, reject, tResult(tNumber));
                resolve();
            });
        });
    }));
});
promiseTest('FutureResult: error bindFuture', function () {
    return fc.assert(fc.asyncProperty(fc.integer(), function (i) {
        return new Promise(function (resolve, reject) {
            FutureResult.error(i).bindFuture(Fun.die('⊥')).get(function (actual) {
                eqAsync('bind result', Result.error(i), actual, reject, tResult(tNumber));
                resolve();
            });
        });
    }));
});
//# sourceMappingURL=FutureResultTest.js.map