import * as Fun from 'ephox/katamari/api/Fun';
import { Option } from 'ephox/katamari/api/Option';
import { tOption } from 'ephox/katamari/api/OptionInstances';
import fc from 'fast-check';
import { Assert, UnitTest } from '@ephox/bedrock-client';
import { Testable } from '@ephox/dispute';
var tNumber = Testable.tNumber;
UnitTest.test('Option.none: unit tests', function () {
    var s = Option.none();
    Assert.throws('getOrDie dies', function () {
        s.getOrDie('Died!');
    });
    Assert.eq('or', 6, s.or(Option.some(6)).getOrDie());
    Assert.eq('orThunk', 6, s.orThunk(function () { return Option.some(6); }).getOrDie());
    Assert.eq('map is none', Option.none(), s.map(function (v) { return v * 2; }), tOption());
    Assert.eq('map bottom is none', Option.none(), s.map(Fun.die('boom')), tOption());
    Assert.eq('bind none some is none', Option.none(), s.bind(function (v) { return Option.some('test' + v); }), tOption());
    Assert.eq('from null is none', Option.none(), Option.from(null), tOption());
    Assert.eq('from undefined is none', Option.none(), Option.from(undefined), tOption());
    Assert.eq('none or some(7) is some(s)', true, Option.none().or(Option.some(7)).equals(Option.some(7)));
    Assert.eq('none or none is none', true, Option.none().or(Option.none()).equals(Option.none()));
    Assert.eq('none to array is empty array', [], Option.none().toArray());
    Assert.eq('fold #1', 'zz', Option.none().fold(function () { return 'zz'; }, Fun.die('boom')));
    Assert.eq('fold #2', [], Option.none().fold(function () {
        return Array.prototype.slice.call(arguments);
    }, Fun.die('boom')));
    Assert.eq('fold #3', 'b', Option.none().fold(Fun.constant('b'), Fun.die('boom')));
    Assert.eq('bind', Option.none(), Option.none().bind(Fun.die('boom')), tOption());
    Assert.eq('each', undefined, Option.none().each(Fun.die('boom')));
    Assert.eq('forall none is true', true, Option.none().forall(Fun.die('boom')));
    Assert.eq('exists none is false', false, Option.none().exists(Fun.die('boom')));
    Assert.eq('toString', 'none()', Option.none().toString());
});
UnitTest.test('Checking none.fold(_ -> x, die) === x', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        var actual = Option.none().fold(Fun.constant(i), Fun.die('Should not die'));
        Assert.eq('eq', i, actual);
    }));
});
UnitTest.test('Checking none.is === false', function () {
    fc.assert(fc.property(fc.integer(), function (v) {
        Assert.eq('none is', false, Option.none().is(v));
    }));
});
UnitTest.test('Checking none.getOr(v) === v', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        Assert.eq('eq', i, Option.none().getOr(i));
    }));
});
UnitTest.test('Checking none.getOrThunk(_ -> v) === v', function () {
    fc.assert(fc.property(fc.func(fc.integer()), function (thunk) {
        Assert.eq('eq', thunk(), Option.none().getOrThunk(thunk));
    }));
});
UnitTest.test('Checking none.getOrDie() always throws', function () {
    // Require non empty string of msg falsiness gets in the way.
    fc.assert(fc.property(fc.string(1, 40), function (s) {
        Assert.throws('getOrDie', function () {
            Option.none().getOrDie(s);
        });
    }));
});
UnitTest.test('Checking none.or(oSomeValue) === oSomeValue', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        var output = Option.none().or(Option.some(i));
        Assert.eq('eq', true, output.is(i));
    }));
});
UnitTest.test('Checking none.orThunk(_ -> v) === v', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        var output = Option.none().orThunk(function () { return Option.some(i); });
        Assert.eq('eq', true, output.is(i));
    }));
});
//# sourceMappingURL=OptionNoneTest.js.map