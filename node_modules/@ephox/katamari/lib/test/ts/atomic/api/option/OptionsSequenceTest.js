import { __spreadArrays } from "tslib";
import { Assert, UnitTest } from '@ephox/bedrock-client';
import * as Arr from 'ephox/katamari/api/Arr';
import * as Options from 'ephox/katamari/api/Options';
import { Option } from 'ephox/katamari/api/Option';
import fc from 'fast-check';
import { tOption } from 'ephox/katamari/api/OptionInstances';
UnitTest.test('Options.sequence: unit tests', function () {
    Assert.eq('eq', Option.some([]), Options.sequence([]), tOption());
    Assert.eq('eq', Option.some([3]), Options.sequence([Option.some(3)]), tOption());
    Assert.eq('eq', Option.some([1, 2]), Options.sequence([Option.some(1), Option.some(2)]), tOption());
    Assert.eq('eq', Option.none(), Options.sequence([Option.some(1), Option.none()]), tOption());
    Assert.eq('eq', Option.none(), Options.sequence([Option.none(), Option.some(343)]), tOption());
});
UnitTest.test('Options.sequence: Single some value', function () {
    fc.assert(fc.property(fc.integer(), function (n) {
        Assert.eq('eq', Option.some([n]), Options.sequence([Option.some(n)]), tOption());
    }));
});
UnitTest.test('Options.sequence: Two some values', function () {
    fc.assert(fc.property(fc.integer(), fc.integer(), function (n, m) {
        Assert.eq('eq', Option.some([n, m]), Options.sequence([Option.some(n), Option.some(m)]), tOption());
    }));
});
UnitTest.test('Options.sequence: Array of numbers', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (n) {
        var someNumbers = Arr.map(n, function (x) { return Option.some(x); });
        Assert.eq('eq', Option.some(n), Options.sequence(someNumbers), tOption());
    }));
});
UnitTest.test('Options.sequence: Some then none', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (n) {
        var someNumbers = Arr.map(n, function (x) { return Option.some(x); });
        Assert.eq('eq', Option.none(), Options.sequence(__spreadArrays(someNumbers, [Option.none()])), tOption());
    }));
});
UnitTest.test('Options.sequence: None then some', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (n) {
        var someNumbers = Arr.map(n, function (x) { return Option.some(x); });
        Assert.eq('eq', Option.none(), Options.sequence(__spreadArrays([Option.none()], someNumbers)), tOption());
    }));
});
UnitTest.test('Options.sequence: all some', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (n) {
        return Assert.eq('eq', Options.traverse(n, function (x) { return Option.some(x); }), Options.sequence(Arr.map(n, function (x) { return Option.some(x); })), tOption());
    }));
});
//# sourceMappingURL=OptionsSequenceTest.js.map