import * as Fun from 'ephox/katamari/api/Fun';
import fc from 'fast-check';
import { UnitTest, Assert } from '@ephox/bedrock-client';
UnitTest.test('Fun: unit tests', function () {
    var add2 = function (n) { return n + 2; };
    var squared = function (n) { return n * n; };
    var add2squared = Fun.compose(squared, add2);
    var f0 = function () {
        return Assert.eq('eq', 0, arguments.length);
    };
    Fun.noarg(f0)(1, 2, 3);
    Assert.eq('eq', 16, add2squared(2));
    Assert.eq('eq', undefined, Fun.identity(undefined));
    Assert.eq('eq', 10, Fun.identity(10));
    Assert.eq('eq', [1, 2, 4], Fun.identity([1, 2, 4]));
    Assert.eq('eq', { a: 'a', b: 'b' }, Fun.identity({ a: 'a', b: 'b' }));
    Assert.eq('eq', undefined, Fun.constant(undefined)());
    Assert.eq('eq', 10, Fun.constant(10)());
    Assert.eq('eq', { a: 'a' }, Fun.constant({ a: 'a' })());
    Assert.eq('eq', false, Fun.never());
    Assert.eq('eq', true, Fun.always());
    var c = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args;
    };
    Assert.eq('eq', [], Fun.curry(c)());
    Assert.eq('eq', ['a'], Fun.curry(c, 'a')());
    Assert.eq('eq', ['a', 'b'], Fun.curry(c, 'a')('b'));
    Assert.eq('eq', ['a', 'b'], Fun.curry(c)('a', 'b'));
    Assert.eq('eq', ['a', 'b', 'c'], Fun.curry(c)('a', 'b', 'c'));
    Assert.eq('eq', ['a', 'b', 'c'], Fun.curry(c, 'a', 'b')('c'));
    Assert.eq('eq', false, Fun.not(function () { return true; })());
    Assert.eq('eq', true, Fun.not(function () { return false; })());
    Assert.throws('should die', Fun.die('Died!'));
    var called = false;
    var f = function () {
        called = true;
    };
    Fun.apply(f);
    Assert.eq('eq', true, called);
    called = false;
    Fun.apply(f);
    Assert.eq('eq', true, called);
});
UnitTest.test('Check compose :: compose(f, g)(x) = f(g(x))', function () {
    fc.assert(fc.property(fc.string(), fc.func(fc.string()), fc.func(fc.string()), function (x, f, g) {
        var h = Fun.compose(f, g);
        Assert.eq('eq', f(g(x)), h(x));
    }));
});
UnitTest.test('Check constant :: constant(a)() === a', function () {
    fc.assert(fc.property(fc.json(), function (json) {
        Assert.eq('eq', json, Fun.constant(json)());
    }));
});
UnitTest.test('Check identity :: identity(a) === a', function () {
    fc.assert(fc.property(fc.json(), function (json) {
        Assert.eq('eq', json, Fun.identity(json));
    }));
});
UnitTest.test('Check always :: f(x) === true', function () {
    fc.assert(fc.property(fc.json(), function (json) {
        Assert.eq('eq', true, Fun.always(json));
    }));
});
UnitTest.test('Check never :: f(x) === false', function () {
    fc.assert(fc.property(fc.json(), function (json) {
        Assert.eq('eq', false, Fun.never(json));
    }));
});
UnitTest.test('Check curry', function () {
    fc.assert(fc.property(fc.json(), fc.json(), fc.json(), fc.json(), function (a, b, c, d) {
        var f = function (a, b, c, d) { return [a, b, c, d]; };
        Assert.eq('curry 1', Fun.curry(f, a)(b, c, d), [a, b, c, d]);
        Assert.eq('curry 2', Fun.curry(f, a, b)(c, d), [a, b, c, d]);
        Assert.eq('curry 3', Fun.curry(f, a, b, c)(d), [a, b, c, d]);
        Assert.eq('curry 4', Fun.curry(f, a, b, c, d)(), [a, b, c, d]);
    }));
});
UnitTest.test('Check not :: not(f(x)) === !f(x)', function () {
    fc.assert(fc.property(fc.json(), fc.func(fc.boolean()), function (x, f) {
        var g = Fun.not(f);
        Assert.eq('eq', f(x), !g(x));
    }));
});
UnitTest.test('Check not :: not(not(f(x))) === f(x)', function () {
    fc.assert(fc.property(fc.json(), fc.func(fc.boolean()), function (x, f) {
        var g = Fun.not(Fun.not(f));
        Assert.eq('eq', f(x), g(x));
    }));
});
UnitTest.test('Check apply :: apply(constant(a)) === a', function () {
    fc.assert(fc.property(fc.json(), function (x) {
        Assert.eq('eq', x, Fun.apply(Fun.constant(x)));
    }));
});
UnitTest.test('Check call :: apply(constant(a)) === undefined', function () {
    fc.assert(fc.property(fc.json(), function (x) {
        var hack = null;
        var output = Fun.call(function () {
            hack = x;
        });
        Assert.eq('eq', undefined, output);
        Assert.eq('eq', x, hack);
    }));
});
//# sourceMappingURL=FunTest.js.map