import { Assert, UnitTest } from '@ephox/bedrock-client';
import * as Options from 'ephox/katamari/api/Options';
import { Option } from 'ephox/katamari/api/Option';
import { tOption } from 'ephox/katamari/api/OptionInstances';
import * as Fun from 'ephox/katamari/api/Fun';
import { Testable } from '@ephox/dispute';
var tNumber = Testable.tNumber;
UnitTest.test('Options.bindFrom', function () {
    Assert.eq('bindFrom value to some', Option.some(4), Options.bindFrom(3, function (x) { return Option.some(x + 1); }), tOption(tNumber));
    Assert.eq('bindFrom value to none', Option.none(), Options.bindFrom(3, function (x) { return Option.none(); }), tOption(tNumber));
    Assert.eq('bindFrom null', Option.none(), Options.bindFrom(null, Fun.die('boom')), tOption());
    Assert.eq('bindFrom undefined', Option.none(), Options.bindFrom(undefined, Fun.die('boom')), tOption(tNumber));
});
UnitTest.test('Options.bindFrom === Options.bind().from()', function () {
    var check = function (input, f) {
        Assert.eq('bindFrom equivalent ot bind', Option.from(input).bind(f), Options.bindFrom(input, f), tOption(tNumber));
    };
    var s = function (x) { return Option.some(x + 1); };
    var n = function (x) { return Option.none(); };
    check(3, s);
    check(null, s);
    check(undefined, s);
    check(3, n);
    check(null, n);
    check(undefined, n);
});
//# sourceMappingURL=OptionsBindFromTest.js.map