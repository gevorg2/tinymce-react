import * as Arr from 'ephox/katamari/api/Arr';
import * as Obj from 'ephox/katamari/api/Obj';
import * as Struct from 'ephox/katamari/api/Struct';
import fc from 'fast-check';
import { UnitTest, Assert } from '@ephox/bedrock-client';
UnitTest.test('Struct.immutable', function () {
    var Thing = Struct.immutable('fred', 'barney');
    var thing = Thing('hello', 1);
    Assert.eq('eq', 'hello', thing.fred());
    Assert.eq('eq', 1, thing.barney());
});
var toUnique = function (array) {
    var r = {};
    Arr.each(array, function (v) {
        r[v] = {};
    });
    return Obj.keys(r);
};
UnitTest.test('Checking struct with right number of arguments', function () {
    fc.assert(fc.property(fc.array(fc.string(), 1, 40), function (rawValues) {
        // Remove duplications.
        var values = toUnique(rawValues);
        var struct = Struct.immutable.apply(undefined, values);
        var output = struct.apply(undefined, values);
        var evaluated = Obj.mapToArray(output, function (v, k) { return v(); });
        Assert.eq('eq', evaluated, values);
    }));
});
UnitTest.test('Checking struct with one fewer argument', function () {
    fc.assert(fc.property(fc.array(fc.string(), 1, 40), function (rawValues) {
        // Remove duplications.
        var values = toUnique(rawValues);
        var struct = Struct.immutable.apply(undefined, values);
        try {
            struct.apply(undefined, values.slice(1));
            return false;
        }
        catch (err) {
            return err.message.indexOf('Wrong number') > -1;
        }
    }));
});
UnitTest.test('Checking struct with fewer arguments', function () {
    fc.assert(fc.property(fc.array(fc.string(), 1, 40), fc.integer(1, 10), function (rawValues, numToExclude) {
        // Remove duplications.
        var values = toUnique(rawValues);
        var struct = Struct.immutable.apply(undefined, values);
        try {
            struct.apply(undefined, values.slice(numToExclude));
            return false;
        }
        catch (err) {
            return err.message.indexOf('Wrong number') > -1;
        }
    }));
});
UnitTest.test('Checking struct with more arguments', function () {
    fc.assert(fc.property(fc.array(fc.string(), 1, 40), fc.array(fc.string(), 1, 40), function (rawValues, extra) {
        // Remove duplications.
        var values = toUnique(rawValues);
        var struct = Struct.immutable.apply(undefined, values);
        try {
            struct.apply(undefined, values.concat(extra));
            return false;
        }
        catch (err) {
            return err.message.indexOf('Wrong number') > -1;
        }
    }));
});
//# sourceMappingURL=ImmutableTest.js.map