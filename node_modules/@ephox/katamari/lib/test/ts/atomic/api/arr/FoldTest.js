import * as Arr from 'ephox/katamari/api/Arr';
import { UnitTest, Assert } from '@ephox/bedrock-client';
import fc from 'fast-check';
UnitTest.test('fold: unit tests', function () {
    var checkl = function (expected, input, f, acc) {
        Assert.eq('foldl', expected, Arr.foldl(input, f, acc));
        Assert.eq('foldl', expected, Arr.foldl(Object.freeze(input.slice()), f, acc));
    };
    var checkr = function (expected, input, f, acc) {
        Assert.eq('foldr', expected, Arr.foldr(input, f, acc));
        Assert.eq('foldr', expected, Arr.foldr(Object.freeze(input.slice()), f, acc));
    };
    checkl(0, [], function () {
    }, 0);
    checkl(6, [1, 2, 3], function (acc, x) { return acc + x; }, 0);
    checkl(13, [1, 2, 3], function (acc, x) { return acc + x; }, 7);
    // foldl with cons and [] should reverse the list
    checkl([3, 2, 1], [1, 2, 3], function (acc, x) { return [x].concat(acc); }, []);
    checkr(0, [], function () {
    }, 0);
    checkr(6, [1, 2, 3], function (acc, x) { return acc + x; }, 0);
    checkr(13, [1, 2, 3], function (acc, x) { return acc + x; }, 7);
    // foldr with cons and [] should be identity
    checkr([1, 2, 3], [1, 2, 3], function (acc, x) { return [x].concat(acc); }, []);
});
UnitTest.test('foldl concat [ ] xs === reverse(xs)', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        var output = Arr.foldl(arr, function (b, a) { return [a].concat(b); }, []);
        Assert.eq('eq', Arr.reverse(arr), output);
    }));
});
UnitTest.test('foldr concat [ ] xs === xs', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        var output = Arr.foldr(arr, function (b, a) { return [a].concat(b); }, []);
        Assert.eq('eq', arr, output);
    }));
});
UnitTest.test('foldr concat ys xs === xs ++ ys', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.array(fc.integer()), function (xs, ys) {
        var output = Arr.foldr(xs, function (b, a) { return [a].concat(b); }, ys);
        Assert.eq('eq', xs.concat(ys), output);
    }));
});
UnitTest.test('foldl concat ys xs === reverse(xs) ++ ys', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.array(fc.integer()), function (xs, ys) {
        var output = Arr.foldl(xs, function (b, a) { return [a].concat(b); }, ys);
        Assert.eq('eq', Arr.reverse(xs).concat(ys), output);
    }));
});
//# sourceMappingURL=FoldTest.js.map