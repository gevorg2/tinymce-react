import { Assert, UnitTest } from '@ephox/bedrock-client';
import * as Options from 'ephox/katamari/api/Options';
import { Option } from 'ephox/katamari/api/Option';
import { tOption } from 'ephox/katamari/api/OptionInstances';
var assertOption = function (a, b) {
    Assert.eq('option eq', a, b, tOption());
};
var boom = function () {
    throw new Error('barf');
};
UnitTest.test('Options.lift2', function () {
    assertOption(Option.none(), Options.lift2(Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift2(Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift2(Option.some('a'), Option.none(), boom));
    assertOption(Option.some('a11'), Options.lift2(Option.some('a'), Option.some(11), function (a, b) { return a + b; }));
});
UnitTest.test('Options.lift3', function () {
    assertOption(Option.none(), Options.lift3(Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift3(Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift3(Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift3(Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift3(Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift3(Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.some('za11'), Options.lift3(Option.some('z'), Option.some('a'), Option.some(11), function (a, b, c) { return a + b + c; }));
});
UnitTest.test('Options.lift4', function () {
    assertOption(Option.none(), Options.lift4(Option.none(), Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.none(), Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift4(Option.none(), Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.none(), Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.none(), Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift4(Option.none(), Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.some(1), Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.some(1), Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift4(Option.some(1), Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.some(1), Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift4(Option.some(1), Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift4(Option.some(1), Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.some('2za11'), Options.lift4(Option.some(2), Option.some('z'), Option.some('a'), Option.some(11), function (a, b, c, d) { return a + b + c + d; }));
});
UnitTest.test('Options.lift5', function () {
    assertOption(Option.none(), Options.lift5(Option.none(), Option.none(), Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.none(), Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.none(), Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.none(), Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.none(), Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.none(), Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.some(1), Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.some(1), Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.some(1), Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.some(1), Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.some(1), Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.none(), Option.some(1), Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.none(), Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.none(), Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.none(), Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.none(), Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.none(), Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.none(), Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.some(1), Option.none(), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.some(1), Option.none(), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.some(1), Option.none(), Option.some('a'), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.some(1), Option.some('z'), Option.none(), Option.none(), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.some(1), Option.some('z'), Option.none(), Option.some(3), boom));
    assertOption(Option.none(), Options.lift5(Option.some(true), Option.some(1), Option.some('z'), Option.some('a'), Option.none(), boom));
    assertOption(Option.some('false2za11'), Options.lift5(Option.some(false), Option.some(2), Option.some('z'), Option.some('a'), Option.some(11), function (a, b, c, d, e) { return a + '' + b + c + d + e; }));
});
//# sourceMappingURL=OptionsLiftNTest.js.map