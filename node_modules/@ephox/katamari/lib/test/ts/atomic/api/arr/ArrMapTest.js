import * as Arr from 'ephox/katamari/api/Arr';
import * as Fun from 'ephox/katamari/api/Fun';
import { Assert, UnitTest } from '@ephox/bedrock-client';
import * as fc from 'fast-check';
import { Testable } from '@ephox/dispute';
var tArray = Testable.tArray, tNumber = Testable.tNumber;
var dbl = function (x) { return x * 2; };
var plus3 = function (x) { return x + 3; };
UnitTest.test('Arr.map: unit tests', function () {
    var checkA = function (expected, input, f) {
        Assert.eq('map', expected, Arr.map(input, f));
        Assert.eq('map frozen', expected, Arr.map(Object.freeze(input.slice()), f));
    };
    checkA([], [], dbl);
    checkA([2], [1], dbl);
    checkA([4, 6, 10], [2, 3, 5], dbl);
});
UnitTest.test('Arr.map: functor laws', function () {
    fc.assert(fc.property(fc.array(fc.nat()), function (xs) {
        return Assert.eq('map id = id', Fun.identity(xs), Arr.map(xs, Fun.identity), tArray(tNumber));
    }));
    var f = plus3;
    var g = dbl;
    fc.assert(fc.property(fc.array(fc.nat()), function (xs) {
        return Assert.eq('map (f . g) = map f . map g', Arr.map(xs, Fun.compose(f, g)), Arr.map(Arr.map(xs, g), f), tArray(tNumber));
    }));
});
//# sourceMappingURL=ArrMapTest.js.map