import * as Arr from 'ephox/katamari/api/Arr';
import { UnitTest, Assert } from '@ephox/bedrock-client';
import fc from 'fast-check';
UnitTest.test('Arr.groupBy: unit tests', function () {
    var check = function (input, expected) {
        var f = function (b) { return b; };
        Assert.eq('groupBy', expected, Arr.groupBy(input, f));
        Assert.eq('groupBy frozen', expected, Arr.groupBy(Object.freeze(input.slice()), f));
    };
    check([], []);
    check([true], [[true]]);
    check([false], [[false]]);
    check([true, false, false, true], [
        [true], [false, false], [true]
    ]);
    check([undefined, 1, 2, undefined, undefined, undefined, 1, 2], [
        [undefined], [1], [2], [undefined, undefined, undefined], [1], [2]
    ]);
    check([{}, 1, 2, undefined, undefined, undefined, 1, 2], [
        [{}], [1], [2], [undefined, undefined, undefined], [1], [2]
    ]);
    check([false, false, true, true, true, false, false, true, false, true], [
        [false, false], [true, true, true], [false, false], [true], [false], [true]
    ]);
});
UnitTest.test('Arr.groupBy: Adjacent groups have different hashes, and everything in a group has the same hash', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.func(fc.asciiString()), function (xs, f) {
        var groups = Arr.groupBy(xs, function (x) { return f(x); });
        /* Properties about groups
         * 1. No two adjacent groups can have the same g(..) value
         * 2. Each group must have the same g(..) value
         */
        var hasEmptyGroups = Arr.exists(groups, function (g) { return g.length === 0; });
        if (hasEmptyGroups) {
            Assert.fail('Should not have empty groups');
        }
        // No consecutive groups should have the same result of g.
        var values = Arr.map(groups, function (group) {
            var first = f(group[0]);
            var mapped = Arr.map(group, function (g) { return f(g); });
            var isSame = Arr.forall(mapped, function (m) { return m === first; });
            if (!isSame) {
                Assert.fail('Not everything in a group has the same g(..) value');
            }
            return first;
        });
        var hasSameGroup = Arr.exists(values, function (v, i) { return i > 0 ? values[i - 1] === values[i] : false; });
        if (hasSameGroup) {
            Assert.fail('A group is next to another group with the same g(..) value');
        }
        return true;
    }));
});
UnitTest.test('Flattening groups equals the original array', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.func(fc.string()), function (xs, f) {
        var groups = Arr.groupBy(xs, function (x) { return f(x); });
        var output = Arr.flatten(groups);
        Assert.eq('eq', xs, output);
    }));
});
//# sourceMappingURL=GroupByTest.js.map