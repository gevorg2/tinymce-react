import * as Arr from 'ephox/katamari/api/Arr';
import { Option } from 'ephox/katamari/api/Option';
import { tOption } from 'ephox/katamari/api/OptionInstances';
import { Assert, UnitTest } from '@ephox/bedrock-client';
import fc from 'fast-check';
import { Testable } from '@ephox/dispute';
var tNumber = Testable.tNumber;
UnitTest.test('Arr.find: Unit tests', function () {
    var checkNoneHelper = function (input, pred) {
        Assert.eq('none', Option.none(), Arr.find(input, pred), tOption(tNumber));
    };
    var checkNone = function (input, pred) {
        checkNoneHelper(input, pred);
        checkNoneHelper(Object.freeze(input), pred);
    };
    var checkArrHelper = function (expected, input, pred) {
        var actual = Arr.find(input, pred);
        Assert.eq('some', Option.some(expected), actual, tOption(tNumber));
    };
    var checkArr = function (expected, input, pred) {
        checkArrHelper(expected, input, pred);
        checkArrHelper(expected, Object.freeze(input), pred);
    };
    checkNone([], function (x) { return x > 0; });
    checkNone([], function (x) { throw new Error('should not be called'); });
    checkNone([-1], function (x) { return x > 0; });
    checkArr(1, [1], function (x) { return x > 0; });
    checkArr(41, [4, 2, 10, 41, 3], function (x) { return x === 41; });
    checkArr(100, [4, 2, 10, 41, 3, 100], function (x) { return x > 80; });
    checkNone([4, 2, 10, 412, 3], function (x) { return x === 41; });
    checkArr(10, [4, 2, 10, 412, 3], function (x, i) { return i === 2; });
});
UnitTest.test('Arr.find: finds a value in the array', function () {
    fc.assert(fc.property(fc.array(fc.integer()), fc.integer(), fc.array(fc.integer()), function (prefix, i, suffix) {
        var arr = prefix.concat([i]).concat(suffix);
        var pred = function (x) { return x === i; };
        var result = Arr.find(arr, pred);
        Assert.eq('Element found in array', Option.some(i), result, tOption(tNumber));
    }));
});
UnitTest.test('Arr.find: value not found', function () {
    fc.assert(fc.property(fc.array(fc.integer()), function (arr) {
        var result = Arr.find(arr, function () { return false; });
        Assert.eq('Element not found in array', Option.none(), result, tOption(tNumber));
    }));
});
//# sourceMappingURL=ArrFindTest.js.map