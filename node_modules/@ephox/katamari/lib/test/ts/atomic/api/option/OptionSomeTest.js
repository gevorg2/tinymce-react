import * as Fun from 'ephox/katamari/api/Fun';
import { Option } from 'ephox/katamari/api/Option';
import { tOption } from 'ephox/katamari/api/OptionInstances';
import * as ArbDataTypes from 'ephox/katamari/test/arb/ArbDataTypes';
import fc from 'fast-check';
import { Assert, UnitTest } from '@ephox/bedrock-client';
import { Testable } from '@ephox/dispute';
var tNumber = Testable.tNumber, tString = Testable.tString;
UnitTest.test('OptionSomeTest', function () {
    var boom = function () {
        throw new Error('Should not be called');
    };
    var s = Option.some(5);
    Assert.eq('getOrDie', 5, s.getOrDie('Died!'));
    Assert.eq('or', Option.some(5), s.or(Option.some(6)), tOption(tNumber));
    Assert.eq('orThunk', Option.some(5), s.orThunk(boom), tOption(tNumber));
    Assert.eq('map', 10, s.map(function (v) { return v * 2; }).getOrDie());
    Assert.eq('bind', Option.some('test5'), s.bind(function (v) { return Option.some('test' + v); }), tOption(tString));
    Assert.eq('from', Option.some(5), Option.from(5), tOption(tNumber));
    Assert.eq('toArray 1', [1], Option.some(1).toArray());
    Assert.eq('toArray 2', [{ cat: 'dog' }], Option.some({ cat: 'dog' }).toArray());
    Assert.eq('toArray 3', [[1]], Option.some([1]).toArray());
    Assert.eq('or some', true, Option.some(6).or(Option.some(7)).equals(Option.some(6)));
    Assert.eq('or none', true, Option.some(3).or(Option.none()).equals(Option.some(3)));
    Assert.eq('fold 1', 11, s.fold(boom, function (v) { return v + 6; }));
    Assert.eq('fold 2', 'a', Option.some('a').fold(Fun.die('boom'), Fun.identity));
    Assert.eq('fold 3', ['z'], Option.some('z').fold(Fun.die('boom'), function () {
        return Array.prototype.slice.call(arguments);
    }));
    Assert.eq('fold 4', 'az', Option.some('a').fold(Fun.die('boom'), function (x) { return x + 'z'; }));
});
var arbOptionSome = ArbDataTypes.arbOptionSome;
var arbOptionNone = ArbDataTypes.arbOptionNone;
UnitTest.test('Checking some(x).fold(die, id) === x', function () {
    fc.assert(fc.property(fc.integer(), function (json) {
        var opt = Option.some(json);
        var actual = opt.fold(Fun.die('Should not be none!'), Fun.identity);
        Assert.eq('eq', json, actual);
    }));
});
UnitTest.test('Checking some(x).is(x) === true', function () {
    fc.assert(fc.property(fc.integer(), function (json) {
        var opt = Option.some(json);
        Assert.eq('eq', true, opt.is(json));
    }));
});
UnitTest.test('Checking some(x).isSome === true', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) { return opt.isSome(); }));
});
UnitTest.test('Checking some(x).isNone === false', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) { return !opt.isNone(); }));
});
UnitTest.test('Checking some(x).getOr(v) === x', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), arbOptionSome(fc.integer()), function (a, b) {
        Assert.eq('eq', a, Option.some(a).getOr(b));
    }));
});
UnitTest.test('Checking some(x).getOrThunk(_ -> v) === x', function () {
    fc.assert(fc.property(fc.integer(), fc.func(fc.integer()), function (a, thunk) {
        Assert.eq('eq', a, Option.some(a).getOrThunk(thunk));
    }));
});
UnitTest.test('Checking some.getOrDie() never throws', function () {
    fc.assert(fc.property(fc.integer(), fc.string(1, 40), function (i, s) {
        var opt = Option.some(i);
        opt.getOrDie(s);
    }));
});
UnitTest.test('Checking some(x).or(oSomeValue) === some(x)', function () {
    fc.assert(fc.property(fc.integer(), arbOptionSome(fc.integer()), function (json, other) {
        var output = Option.some(json).or(other);
        Assert.eq('eq', true, output.is(json));
    }));
});
UnitTest.test('Checking some(x).orThunk(_ -> oSomeValue) === some(x)', function () {
    fc.assert(fc.property(fc.integer(), arbOptionSome(fc.integer()), function (i, other) {
        var output = Option.some(i).orThunk(function () { return other; });
        Assert.eq('eq', true, output.is(i));
    }));
});
UnitTest.test('Checking some(x).map(f) === some(f(x))', function () {
    fc.assert(fc.property(fc.integer(), fc.func(fc.integer()), function (a, f) {
        var opt = Option.some(a);
        var actual = opt.map(f);
        Assert.eq('eq', f(a), actual.getOrDie());
    }));
});
UnitTest.test('Checking some(x).each(f) === undefined and f gets x', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) {
        var hack = null;
        var actual = opt.each(function (x) {
            hack = x;
        });
        Assert.eq('eq', undefined, actual);
        Assert.eq('hack', hack, opt.getOrDie());
    }));
});
UnitTest.test('Given f :: s -> some(b), checking some(x).bind(f) === some(b)', function () {
    fc.assert(fc.property(fc.integer(), fc.func(arbOptionSome(fc.integer())), function (i, f) {
        var actual = Option.some(i).bind(f);
        Assert.eq('eq', f(i), actual, tOption(tNumber));
    }));
});
UnitTest.test('Given f :: s -> none, checking some(x).bind(f) === none', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), fc.func(arbOptionNone()), function (opt, f) {
        var actual = opt.bind(f);
        Assert.eq('eq', Option.none(), actual, tOption(tNumber));
    }));
});
UnitTest.test('Checking some(x).exists(_ -> false) === false', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) { return !opt.exists(Fun.constant(false)); }));
});
UnitTest.test('Checking some(x).exists(_ -> true) === true', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) { return opt.exists(Fun.constant(true)); }));
});
UnitTest.test('Checking some(x).exists(f) iff. f(x)', function () {
    fc.assert(fc.property(fc.integer(), fc.func(fc.boolean()), function (i, f) {
        var opt = Option.some(i);
        if (f(i)) {
            Assert.eq('eq', true, opt.exists(f));
        }
        else {
            Assert.eq('eq', false, opt.exists(f));
        }
    }));
});
UnitTest.test('Checking some(x).forall(_ -> false) === false', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) { return !opt.forall(Fun.constant(false)); }));
});
UnitTest.test('Checking some(x).forall(_ -> true) === true', function () {
    fc.assert(fc.property(arbOptionSome(fc.integer()), function (opt) { return opt.forall(Fun.constant(true)); }));
});
UnitTest.test('Checking some(x).forall(f) iff. f(x)', function () {
    fc.assert(fc.property(fc.integer(), fc.func(fc.boolean()), function (i, f) {
        var opt = Option.some(i);
        if (f(i)) {
            Assert.eq('eq', true, opt.forall(f));
        }
        else {
            Assert.eq('eq', false, opt.forall(f));
        }
    }));
});
UnitTest.test('Checking some(x).toArray equals [ x ]', function () {
    fc.assert(fc.property(fc.integer(), function (json) {
        Assert.eq('eq', [json], Option.some(json).toArray());
    }));
});
UnitTest.test('Checking some(x).toString equals "some(x)"', function () {
    fc.assert(fc.property(fc.integer(), function (json) {
        Assert.eq('toString', 'some(' + json + ')', Option.some(json).toString());
    }));
});
//# sourceMappingURL=OptionSomeTest.js.map