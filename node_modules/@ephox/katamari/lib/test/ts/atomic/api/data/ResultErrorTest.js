import * as Fun from 'ephox/katamari/api/Fun';
import { Result } from 'ephox/katamari/api/Result';
import { Option } from 'ephox/katamari/api/Option';
import { arbResultValue, arbResultError } from 'ephox/katamari/test/arb/ArbDataTypes';
import fc from 'fast-check';
import { UnitTest, Assert } from '@ephox/bedrock-client';
import { tResult } from 'ephox/katamari/api/ResultInstances';
import { tOption } from 'ephox/katamari/api/OptionInstances';
import { Testable } from '@ephox/dispute';
var tNumber = Testable.tNumber;
UnitTest.test('Result.error: unit tests', function () {
    var s = Result.error('error');
    Assert.eq('eq', false, s.is('error'));
    Assert.eq('eq', false, s.isValue());
    Assert.eq('eq', true, s.isError());
    Assert.eq('eq', 6, s.getOr(6));
    Assert.eq('eq', 6, s.getOrThunk(function () { return 6; }));
    Assert.throws('', function () {
        s.getOrDie();
    });
    Assert.eq('eq', 6, s.or(Result.value(6)).getOrDie());
    Assert.throws('', function () {
        s.orThunk(function () { return Result.error('Should not get here.'); }).getOrDie();
    });
    Assert.eq('eq', 'error!', s.fold(function (e) { return e + '!'; }, function (v) { return v + 6; }));
    Assert.throws('', function () {
        s.map(function (v) { return v * 2; }).getOrDie();
    });
    Assert.throws('', function () {
        s.bind(function (v) { return Result.value('test' + v); }).getOrDie();
    });
    Assert.eq('eq', false, s.exists(Fun.always));
    Assert.eq('eq', true, s.forall(Fun.never));
    Assert.eq('eq', Option.none(), Result.error(4).toOption(), tOption(tNumber));
});
var getErrorOrDie = function (res) { return res.fold(function (err) { return err; }, Fun.die('Was not an error!')); };
UnitTest.test('Result.error: error.is === false', function () {
    fc.assert(fc.property(fc.integer(), fc.string(), function (i, s) {
        Assert.eq('eq', false, Result.error(s).is(i));
    }));
});
UnitTest.test('Result.error: error.isValue === false', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), function (res) {
        Assert.eq('eq', false, res.isValue());
    }));
});
UnitTest.test('Result.error: error.isError === true', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), function (res) {
        Assert.eq('eq', true, res.isError());
    }));
});
UnitTest.test('Result.error: error.getOr(v) === v', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), fc.json(), function (res, json) {
        Assert.eq('eq', json, res.getOr(json));
    }));
});
UnitTest.test('Result.error: error.getOrDie() always throws', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), function (res) {
        Assert.throws('should throw', function () {
            res.getOrDie();
        });
    }));
});
UnitTest.test('Result.error: error.or(oValue) === oValue', function () {
    fc.assert(fc.property(fc.integer(), fc.string(), function (i, s) {
        Assert.eq('eq', Result.value(i), Result.error(s).or(Result.value(i)), tResult());
    }));
});
UnitTest.test('Result.error: error.orThunk(_ -> v) === v', function () {
    fc.assert(fc.property(fc.integer(), fc.string(), function (i, s) {
        Assert.eq('eq', Result.value(i), Result.error(s).orThunk(function () { return Result.value(i); }), tResult());
    }));
});
UnitTest.test('Result.error: error.fold(_ -> x, die) === x', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), fc.json(), function (res, json) {
        var actual = res.fold(Fun.constant(json), Fun.die('Should not die'));
        Assert.eq('eq', json, actual);
    }));
});
UnitTest.test('Result.error: error.map(⊥) === error', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        Assert.eq('eq', Result.error(i), Result.error(i).map(Fun.die('⊥')), tResult());
    }));
});
UnitTest.test('Result.error: error.mapError(f) === f(error)', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        var f = function (x) { return x % 3; };
        Assert.eq('eq', Result.error(f(i)), Result.error(i).mapError(f), tResult());
    }));
});
UnitTest.test('Result.error: error.each(⊥) === undefined', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), function (res) {
        var actual = res.each(Fun.die('⊥'));
        Assert.eq('eq', undefined, actual);
    }));
});
UnitTest.test('Given f :: s -> RV, Result.error: error.bind(f) === error', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), fc.func(arbResultValue(fc.integer())), function (res, f) {
        var actual = res.bind(f);
        Assert.eq('eq', true, getErrorOrDie(res) === getErrorOrDie(actual));
    }));
});
UnitTest.test('Given f :: s -> RE, Result.error: error.bind(f) === error', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), fc.func(arbResultError(fc.integer())), function (res, f) {
        var actual = res.bind(f);
        Assert.eq('eq', true, getErrorOrDie(res) === getErrorOrDie(actual));
    }));
});
UnitTest.test('Result.error: error.forall === true', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), fc.func(fc.boolean()), function (res, f) {
        Assert.eq('eq', true, res.forall(f));
    }));
});
UnitTest.test('Result.error: error.exists === false', function () {
    fc.assert(fc.property(fc.integer(), function (i) {
        Assert.eq('eq', false, Result.error(i).exists(Fun.die('⊥')));
    }));
});
UnitTest.test('Result.error: error.toOption is always none', function () {
    fc.assert(fc.property(arbResultError(fc.integer()), function (res) {
        Assert.eq('eq', Option.none(), res.toOption(), tOption());
    }));
});
//# sourceMappingURL=ResultErrorTest.js.map