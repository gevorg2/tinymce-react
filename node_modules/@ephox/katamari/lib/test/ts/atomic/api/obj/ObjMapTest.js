import * as Arr from 'ephox/katamari/api/Arr';
import * as Fun from 'ephox/katamari/api/Fun';
import * as Obj from 'ephox/katamari/api/Obj';
import { Assert, UnitTest } from '@ephox/bedrock-client';
import fc from 'fast-check';
UnitTest.test('Obj.map: unit test', function () {
    var dbl = function (x) { return x * 2; };
    var addDot = function (x) { return x + '.'; };
    var tupleF = function (x, i) { return ({
        k: i + 'b',
        v: x + 'b'
    }); };
    var check = function (expected, input, f) {
        Assert.eq('check', expected, Obj.map(input, f));
    };
    var checkT = function (expected, input, f) {
        Assert.eq(' checkt', expected, Obj.tupleMap(input, f));
    };
    check({}, {}, dbl);
    check({ a: 'a.' }, { a: 'a' }, addDot);
    check({ a: 'a.', b: 'b.', c: 'c.' }, { a: 'a', b: 'b', c: 'c' }, addDot);
    checkT({}, {}, tupleF);
    checkT({ ab: 'ab' }, { a: 'a' }, tupleF);
    checkT({ ab: 'ab', bb: 'bb', cb: 'cb' }, { a: 'a', b: 'b', c: 'c' }, tupleF);
    var stringify = function (x, i) { return i + ' :: ' + x; };
    var checkMapToArray = function (expected, input, f) {
        Assert.eq('checkMapToArray', expected, Obj.mapToArray(input, f));
    };
    checkMapToArray([], {}, stringify);
    checkMapToArray(['a :: a'], { a: 'a' }, stringify);
    checkMapToArray(['a :: a', 'b :: b', 'c :: c'], { a: 'a', b: 'b', c: 'c' }, stringify);
});
UnitTest.test('Obj.map: map id obj = obj', function () {
    fc.assert(fc.property(fc.dictionary(fc.asciiString(), fc.integer()), function (obj) {
        var actual = Obj.map(obj, Fun.identity);
        Assert.eq('map id', obj, actual);
    }));
});
UnitTest.test('map constant obj means that values(obj) are all the constant', function () {
    fc.assert(fc.property(fc.dictionary(fc.asciiString(), fc.integer()), fc.integer(), function (obj, x) {
        var output = Obj.map(obj, Fun.constant(x));
        var values = Obj.values(output);
        return Arr.forall(values, function (v) { return v === x; });
    }));
});
UnitTest.test('tupleMap obj (x, i) -> { k: i, v: x }', function () {
    fc.assert(fc.property(fc.dictionary(fc.asciiString(), fc.integer()), function (obj) {
        var output = Obj.tupleMap(obj, function (x, i) { return ({ k: i, v: x }); });
        Assert.eq('tupleMap', obj, output);
    }));
});
UnitTest.test('mapToArray is symmetric with tupleMap', function () {
    fc.assert(fc.property(fc.dictionary(fc.asciiString(), fc.integer()), function (obj) {
        var array = Obj.mapToArray(obj, function (x, i) { return ({ k: i, v: x }); });
        var aKeys = Arr.map(array, function (x) { return x.k; });
        var aValues = Arr.map(array, function (x) { return x.v; });
        var keys = Obj.keys(obj);
        var values = Obj.values(obj);
        Assert.eq('same keys', Arr.sort(keys), Arr.sort(aKeys));
        Assert.eq('same values', Arr.sort(values), Arr.sort(aValues));
    }));
});
//# sourceMappingURL=ObjMapTest.js.map