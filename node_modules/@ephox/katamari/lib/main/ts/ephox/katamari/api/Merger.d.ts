declare type DeepMergeFunc = {
    <A, B>(a: A, b: B): A & B;
    <A, B, C>(a: A, b: B, c: C): A & B & C;
    <A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;
    <A, B, C, D, E>(a: A, b: B, c: C, d: D, e: E): A & B & C & D & E;
    <A, B, C, D, E, F>(a: A, b: B, c: C, d: D, e: E, f: F): A & B & C & D & E & F;
    (...objs: Array<Record<string, any>>): Record<string, any>;
};
declare type MergeOptional<A, B> = A extends undefined ? B : Exclude<B, undefined>;
declare type ShallowMerge<A, B> = ({
    [K in keyof A]: K extends keyof B ? MergeOptional<A[K], B[K]> : A[K];
} & B);
declare type ShallowMergeFunc = {
    <A, B>(a: A, b: B): ShallowMerge<A, B>;
    <A, B, C>(a: A, b: B, c: C): ShallowMerge<ShallowMerge<A, B>, C>;
    <A, B, C, D>(a: A, b: B, c: C, d: D): ShallowMerge<ShallowMerge<ShallowMerge<A, B>, C>, D>;
    <A, B, C, D, E>(a: A, b: B, c: C, d: D, e: E): ShallowMerge<ShallowMerge<ShallowMerge<ShallowMerge<A, B>, C>, D>, E>;
    <A, B, C, D, E, F>(a: A, b: B, c: C, d: D, e: E, f: F): ShallowMerge<ShallowMerge<ShallowMerge<ShallowMerge<ShallowMerge<A, B>, C>, D>, E>, F>;
    (...objs: Array<Record<string, any>>): Record<string, any>;
};
export declare const deepMerge: DeepMergeFunc;
export declare const merge: ShallowMergeFunc;
export {};
//# sourceMappingURL=Merger.d.ts.map