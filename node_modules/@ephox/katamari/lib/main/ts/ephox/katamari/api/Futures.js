import * as Arr from './Arr';
import { Future } from './Future';
import * as AsyncValues from '../async/AsyncValues';
export var par = function (futures) {
    return AsyncValues.par(futures, Future.nu);
};
export var traverse = function (array, fn) {
    return par(Arr.map(array, fn));
};
/** Deprecated for rename to traverse */
export var mapM = traverse;
/** Kleisli composition of two functions: a -> Future b.
 *  Note the order of arguments: g is invoked first, then the result passed to f.
 *  This is in line with f . g = \x -> f (g a)
 *
 *  compose :: ((b -> Future c), (a -> Future b)) -> a -> Future c
 */
export var compose = function (f, g) { return function (a) { return g(a).bind(f); }; };
//# sourceMappingURL=Futures.js.map