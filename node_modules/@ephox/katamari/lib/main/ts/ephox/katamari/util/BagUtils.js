import * as Arr from '../api/Arr';
import * as Type from '../api/Type';
export var sort = function (arr) {
    return arr.slice(0).sort();
};
export var reqMessage = function (required, keys) {
    throw new Error('All required keys (' + sort(required).join(', ') + ') were not specified. Specified keys were: ' + sort(keys).join(', ') + '.');
};
export var unsuppMessage = function (unsupported) {
    throw new Error('Unsupported keys for object: ' + sort(unsupported).join(', '));
};
export var validateStrArr = function (label, array) {
    if (!Type.isArray(array)) {
        throw new Error('The ' + label + ' fields must be an array. Was: ' + array + '.');
    }
    Arr.each(array, function (a) {
        if (!Type.isString(a)) {
            throw new Error('The value ' + a + ' in the ' + label + ' fields was not a string.');
        }
    });
};
export var invalidTypeMessage = function (incorrect, type) {
    throw new Error('All values need to be of type: ' + type + '. Keys (' + sort(incorrect).join(', ') + ') were not.');
};
export var checkDupes = function (everything) {
    var sorted = sort(everything);
    var dupe = Arr.find(sorted, function (s, i) {
        return i < sorted.length - 1 && s === sorted[i + 1];
    });
    dupe.each(function (d) {
        throw new Error('The field: ' + d + ' occurs more than once in the combined fields: [' + sorted.join(', ') + '].');
    });
};
//# sourceMappingURL=BagUtils.js.map