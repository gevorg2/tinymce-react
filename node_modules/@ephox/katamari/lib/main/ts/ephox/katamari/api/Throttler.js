import { clearTimeout, setTimeout } from '@ephox/dom-globals';
// Run a function fn after rate ms. If another invocation occurs
// during the time it is waiting, update the arguments f will run
// with (but keep the current schedule)
export var adaptable = function (fn, rate) {
    var timer = null;
    var args = null;
    var cancel = function () {
        if (timer !== null) {
            clearTimeout(timer);
            timer = null;
            args = null;
        }
    };
    var throttle = function () {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        args = newArgs;
        if (timer === null) {
            timer = setTimeout(function () {
                var blargs = args === null ? [] : args;
                fn.apply(null, blargs);
                timer = null;
                args = null;
            }, rate);
        }
    };
    return {
        cancel: cancel,
        throttle: throttle
    };
};
// Run a function fn after rate ms. If another invocation occurs
// during the time it is waiting, ignore it completely.
export var first = function (fn, rate) {
    var timer = null;
    var cancel = function () {
        if (timer !== null) {
            clearTimeout(timer);
            timer = null;
        }
    };
    var throttle = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (timer === null) {
            timer = setTimeout(function () {
                fn.apply(null, args);
                timer = null;
            }, rate);
        }
    };
    return {
        cancel: cancel,
        throttle: throttle
    };
};
// Run a function fn after rate ms. If another invocation occurs
// during the time it is waiting, reschedule the function again
// with the new arguments.
export var last = function (fn, rate) {
    var timer = null;
    var cancel = function () {
        if (timer !== null) {
            clearTimeout(timer);
            timer = null;
        }
    };
    var throttle = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (timer !== null) {
            clearTimeout(timer);
        }
        timer = setTimeout(function () {
            fn.apply(null, args);
            timer = null;
        }, rate);
    };
    return {
        cancel: cancel,
        throttle: throttle
    };
};
//# sourceMappingURL=Throttler.js.map