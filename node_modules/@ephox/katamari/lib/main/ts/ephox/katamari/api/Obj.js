import { Option } from './Option';
import * as Fun from './Fun';
// There are many variations of Object iteration that are faster than the 'for-in' style:
// http://jsperf.com/object-keys-iteration/107
//
// Use the native keys if it is available (IE9+), otherwise fall back to manually filtering
export var keys = Object.keys;
export var hasOwnProperty = Object.hasOwnProperty;
export var each = function (obj, f) {
    var props = keys(obj);
    for (var k = 0, len = props.length; k < len; k++) {
        var i = props[k];
        var x = obj[i];
        f(x, i);
    }
};
export var map = function (obj, f) {
    return tupleMap(obj, function (x, i) { return ({
        k: i,
        v: f(x, i)
    }); });
};
export var tupleMap = function (obj, f) {
    var r = {};
    each(obj, function (x, i) {
        var tuple = f(x, i);
        r[tuple.k] = tuple.v;
    });
    return r;
};
var objAcc = function (r) { return function (x, i) {
    r[i] = x;
}; };
var internalFilter = function (obj, pred, onTrue, onFalse) {
    var r = {};
    each(obj, function (x, i) {
        (pred(x, i) ? onTrue : onFalse)(x, i);
    });
    return r;
};
export var bifilter = function (obj, pred) {
    var t = {};
    var f = {};
    internalFilter(obj, pred, objAcc(t), objAcc(f));
    return { t: t, f: f };
};
export var filter = function (obj, pred) {
    var t = {};
    internalFilter(obj, pred, objAcc(t), Fun.noop);
    return t;
};
export var mapToArray = function (obj, f) {
    var r = [];
    each(obj, function (value, name) {
        r.push(f(value, name));
    });
    return r;
};
export var find = function (obj, pred) {
    var props = keys(obj);
    for (var k = 0, len = props.length; k < len; k++) {
        var i = props[k];
        var x = obj[i];
        if (pred(x, i, obj)) {
            return Option.some(x);
        }
    }
    return Option.none();
};
export var values = function (obj) {
    return mapToArray(obj, function (v) {
        return v;
    });
};
export var size = function (obj) {
    return keys(obj).length;
};
export var get = function (obj, key) {
    return has(obj, key) ? Option.from(obj[key]) : Option.none();
};
export var has = function (obj, key) {
    return hasOwnProperty.call(obj, key);
};
export var hasNonNullableKey = function (obj, key) {
    return has(obj, key) && obj[key] !== undefined && obj[key] !== null;
};
export var isEmpty = function (r) {
    for (var x in r) {
        if (hasOwnProperty.call(r, x)) {
            return false;
        }
    }
    return true;
};
//# sourceMappingURL=Obj.js.map