import { Option } from './Option';
export declare const keys: {
    (o: object): string[];
    (o: {}): string[];
};
export declare const hasOwnProperty: (v: string | number | symbol) => boolean;
export declare const each: <T>(obj: T, f: (value: T[keyof T], key: string) => void) => void;
export declare const map: <T, R>(obj: T, f: (value: T[keyof T], key: string) => R) => { [k in keyof T]: R; };
export declare const tupleMap: <R, T>(obj: T, f: (value: T[keyof T], key: string) => {
    k: string;
    v: any;
}) => R;
export declare const bifilter: <V>(obj: Record<string, V>, pred: (value: V, key: string) => boolean) => {
    t: Record<string, V>;
    f: Record<string, V>;
};
export declare const filter: <V>(obj: Record<string, V>, pred: (value: V, key: string) => boolean) => Record<string, V>;
export declare const mapToArray: <T, R>(obj: T, f: (value: T[keyof T], key: string) => R) => R[];
export declare const find: <T>(obj: T, pred: (value: T[keyof T], key: string, obj: T) => boolean) => Option<T[keyof T]>;
export declare const values: <T>(obj: T) => T[keyof T][];
export declare const size: (obj: {}) => number;
export declare const get: <T, K extends keyof T>(obj: T, key: K) => Option<NonNullable<T[K]>>;
export declare const has: <T, K extends keyof T>(obj: T, key: K) => boolean;
export declare const hasNonNullableKey: <T, K extends keyof T>(obj: T, key: K) => boolean;
export declare const isEmpty: (r: Record<any, any>) => boolean;
//# sourceMappingURL=Obj.d.ts.map