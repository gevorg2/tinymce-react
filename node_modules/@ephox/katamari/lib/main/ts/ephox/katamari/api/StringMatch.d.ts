declare type StringMapper = (str: string) => string;
export interface StringMatch {
    fold: <T>(starts: (value: string, f: StringMapper) => T, pattern: (regex: RegExp, f: StringMapper) => T, contains: (value: string, f: StringMapper) => T, exact: (value: string, f: StringMapper) => T, all: () => T, not: (other: StringMatch) => T) => T;
    match: <T>(branches: {
        starts: (value: string, f: StringMapper) => T;
        pattern: (regex: RegExp, f: StringMapper) => T;
        contains: (value: string, f: StringMapper) => T;
        exact: (value: string, f: StringMapper) => T;
        all: () => T;
        not: (other: StringMatch) => T;
    }) => T;
    log: (label: string) => void;
}
export declare const StringMatch: {
    starts: (value: string, f: StringMapper) => StringMatch;
    pattern: (regex: RegExp, f: StringMapper) => StringMatch;
    contains: (value: string, f: StringMapper) => StringMatch;
    exact: (value: string, f: StringMapper) => StringMatch;
    all: () => StringMatch;
    not: (stringMatch: StringMatch) => StringMatch;
    cata: <T>(subject: StringMatch, s: (value: string, f: StringMapper) => T, p: (regex: RegExp, f: StringMapper) => T, c: (value: string, f: StringMapper) => T, e: (value: string, f: StringMapper) => T, a: () => T, n: (other: StringMatch) => T) => T;
    matches: (subject: StringMatch, str: string) => boolean;
    caseSensitive: (val: string) => string;
    caseInsensitive: (val: string) => string;
};
export {};
//# sourceMappingURL=StringMatch.d.ts.map