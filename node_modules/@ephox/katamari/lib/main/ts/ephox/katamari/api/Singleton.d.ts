export declare const destroyable: <T extends {
    destroy: () => void;
}>() => {
    clear: () => void;
    isSet: () => boolean;
    set: (s: T) => void;
};
export declare const unbindable: <T extends {
    unbind: () => void;
}>() => {
    clear: () => void;
    isSet: () => boolean;
    set: (s: T) => void;
};
export declare const api: <T extends {
    destroy: () => void;
}>() => {
    clear: () => void;
    isSet: () => boolean;
    set: (s: T) => void;
    run: (f: (data: T) => void) => void;
};
export declare const value: <T>() => {
    clear: () => void;
    set: (s: T) => void;
    isSet: () => boolean;
    on: (f: (data: T) => void) => void;
};
//# sourceMappingURL=Singleton.d.ts.map