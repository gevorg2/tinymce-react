"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const Attempt_1 = require("../../main/ts/bedrock/core/Attempt");
const AttemptUtils_1 = require("./AttemptUtils");
const Validation = require("../../main/ts/bedrock/cli/Validation");
const Extraction = require("../../main/ts/bedrock/cli/Extraction");
const checkErrors = function (label, expected, definitions, settings) {
    mocha_1.it(label, function () {
        const actual = Validation.scan(definitions, settings);
        AttemptUtils_1.assertErrors(expected, actual);
    });
};
const checkResult = function (label, expected, definitions, settings) {
    mocha_1.it(label, function () {
        const actual = Validation.scan(definitions, settings);
        AttemptUtils_1.assertResult(expected, actual);
    });
};
mocha_1.describe('Validation', () => {
    checkErrors('Testing a single file that does not exist', [
        'Property [file] has value: [test/resources/test.file1.not.existing]. This file does not exist'
    ], [
        { name: 'file', validate: Extraction.file, description: 'blah' }
    ], {
        file: 'test/resources/test.file1.not.existing'
    });
    checkErrors('Testing a directory -> files where the directory does not exist', [
        '[test/resources.not.existing] is not a directory'
    ], [
        { name: 'testdir', validate: Extraction.files(['Test.js']), description: 'blah' }
    ], {
        testdir: 'test/resources.not.existing'
    });
    checkResult('Testing a directory -> files where the directory does exist, but no files matching pattern', {
        /* no files matching pattern */
        other: []
    }, [
        { name: 'testdir', validate: Extraction.files(['Test.js']), output: 'other', description: 'blah' }
    ], {
        testdir: 'src/test/resources'
    });
    checkResult('Testing a directory -> files where the directory does exist, but has a file matching pattern', {
        other: [
            'src/test/resources/html/screen.html',
            'src/test/resources/test.file1',
            'src/test/resources/tsconfig.sample.json'
        ]
    }, [
        { name: 'testdir', validate: Extraction.files(['']), output: 'other', description: 'blah' }
    ], {
        testdir: 'src/test/resources'
    });
    checkResult('Testing more than one definition, but there is not a setting for it', {
        alpha: 'Alpha'
    }, [
        { name: 'alpha', validate: Extraction.any, description: 'blah' },
        { name: 'beta', validate: (x) => Attempt_1.Attempt.failed([x]), description: 'blah' }
    ], {
        alpha: 'Alpha'
    });
    checkErrors('Testing more than one definition, but there is a setting for it', [
        'Invalid value for property: beta. Actual value: Beta. Required value: one of ["gamma"]'
    ], [
        { name: 'alpha', validate: Extraction.any, description: 'blah' },
        { name: 'beta', validate: Extraction.inSet(['gamma']), description: 'blah' }
    ], {
        alpha: 'Alpha',
        beta: 'Beta'
    });
    checkResult('Testing more than one definition, all should pass', {
        alpha: 'Alpha',
        'new.beta': 'Beta',
        gamma: ['src/test/resources/html/screen.html', 'src/test/resources/test.file1', 'src/test/resources/tsconfig.sample.json'],
        delta: 'src/test/resources'
    }, [
        { name: 'alpha', validate: Extraction.any, description: 'blah' },
        { name: 'beta', validate: Extraction.any, output: 'new.beta', description: 'blah' },
        { name: 'gamma', validate: Extraction.files(['']), description: 'blah' },
        { name: 'delta', validate: Extraction.directory, description: 'blah' }
    ], {
        alpha: 'Alpha',
        beta: 'Beta',
        gamma: 'src/test/resources',
        delta: 'src/test/resources'
    });
    checkErrors('Testing more than one definition, several fail, so the whole thing should return combined failures', [
        'Invalid value for property: alpha. Actual value: Alpha. Required value: one of ["a"]',
        '[test/resources.fake] is not a directory'
    ], [
        { name: 'alpha', validate: Extraction.inSet(['a']), description: 'blah' },
        { name: 'beta', validate: Extraction.any, output: 'new.beta', description: 'blah' },
        { name: 'gamma', validate: Extraction.files(['']), description: 'blah' },
        { name: 'delta', validate: Extraction.inSet(['Delta']), description: 'blah' },
        { name: 'epsilon', validate: Extraction.directory, description: 'blah' },
        { name: 'rho', validate: Extraction.any, description: 'blah' }
    ], {
        alpha: 'Alpha',
        beta: 'Beta',
        gamma: 'src/test/resources',
        delta: 'Delta',
        epsilon: 'test/resources.fake',
        rho: 'Rho'
    });
});
//# sourceMappingURL=ValidationTest.js.map