"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const Clis = require("../../main/ts/bedrock/cli/Clis");
const AttemptUtils = require("./AttemptUtils");
const Attempt_1 = require("../../main/ts/bedrock/core/Attempt");
const directories = {
    current: process.cwd(),
    bin: __dirname
};
const exclude = (fields) => (obj) => {
    const r = {};
    for (const k in obj) {
        if (obj.hasOwnProperty(k)) {
            if (fields.indexOf(k) === -1)
                r[k] = obj[k];
        }
    }
    return r;
};
const cleanError = (result) => Attempt_1.Attempt.cata(result, (err) => Attempt_1.Attempt.failed(err.errors), Attempt_1.Attempt.passed);
const cleanResult = (result) => Attempt_1.Attempt.cata(result, Attempt_1.Attempt.failed, (v) => Attempt_1.Attempt.passed(exclude(['projectdir', 'basedir'])(v)));
mocha_1.describe('cli', () => {
    mocha_1.it('Minimal specification of bedrock-auto', () => {
        const args = [
            "--browser", "MicrosoftEdge",
            "--files", "src/test/resources/test.file1",
            "--config", "src/test/resources/tsconfig.sample.json"
        ];
        const actual = Clis.forAuto(directories, args);
        AttemptUtils.assertResult({
            browser: 'MicrosoftEdge',
            bundler: 'webpack',
            config: 'src/test/resources/tsconfig.sample.json',
            name: 'bedrock-run',
            output: 'scratch',
            help: false,
            testfiles: [
                'src/test/resources/test.file1'
            ],
            debuggingPort: 9000,
            delayExit: false,
            singleTimeout: 30000,
            stopOnFailure: false,
            overallTimeout: 600000,
            loglevel: 'advanced',
            version: false,
            chunk: 100,
            retries: 0,
            useSandboxForHeadless: false,
            skipResetMousePosition: false,
            wipeBrowserCache: false
        }, cleanResult(actual));
    });
    mocha_1.it('Specification of bedrock-auto missing required field: browser', () => {
        const args = [
            "--files", "src/test/resources/test.file1",
            "--config", "src/test/resources/tsconfig.sample.json"
        ];
        const actual = Clis.forAuto(directories, args);
        AttemptUtils.assertErrors([
            'The *required* output property [browser] from [browser] must be specified'
        ], cleanError(actual));
    });
    mocha_1.it('Minimal specification of bedrock-manual', () => {
        const args = [
            "--files", "src/test/resources/test.file1",
            "--config", "src/test/resources/tsconfig.sample.json"
        ];
        const actual = Clis.forManual(directories, args);
        AttemptUtils.assertResult({
            config: 'src/test/resources/tsconfig.sample.json',
            testfiles: [
                'src/test/resources/test.file1'
            ],
            help: false,
            bundler: 'webpack',
            singleTimeout: 30000,
            stopOnFailure: false,
            overallTimeout: 600000,
            loglevel: 'advanced',
            version: false,
            chunk: 100
        }, Attempt_1.Attempt.map(actual, exclude(['projectdir', 'basedir'])));
    });
});
//# sourceMappingURL=ClisTest.js.map