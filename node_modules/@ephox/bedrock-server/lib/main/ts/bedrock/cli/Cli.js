"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commandLineArgs = require("command-line-args");
const Attempt_1 = require("../core/Attempt");
const Version = require("../core/Version");
const Validation = require("./Validation");
const CliUsage = require("./CliUsage");
const ExitCodes_1 = require("../util/ExitCodes");
const parseCommandLine = (definitions, argv) => {
    try {
        const settings = commandLineArgs(definitions, { argv });
        return Attempt_1.Attempt.passed(settings);
    }
    catch (err) {
        return Attempt_1.Attempt.failed([err.message !== undefined ? err.message : err]);
    }
};
exports.extract = (command, desc, definitions, argv) => {
    const parsed = parseCommandLine(definitions, argv);
    Attempt_1.Attempt.cata(parsed, () => {
        // TODO: this should report an error
    }, (s) => {
        if (s.help === true) {
            // Print usage information if used with --help or -h.
            console.log(CliUsage.generateUsage(command, desc, definitions));
            process.exit(ExitCodes_1.ExitCodes.success);
        }
        else if (s.version === true) {
            console.log(command + ' version: ' + Version.get());
            process.exit(ExitCodes_1.ExitCodes.success);
        }
    });
    const extracted = Attempt_1.Attempt.list(parsed, [
        (settings) => Validation.scan(definitions, settings),
        (results) => Validation.scanRequired(definitions, results)
    ]);
    return Attempt_1.Attempt.cata(extracted, (errs) => {
        return Attempt_1.Attempt.failed({
            command: command,
            errors: errs,
            usage: CliUsage.generateUsage(command, desc, definitions)
        });
    }, Attempt_1.Attempt.passed);
};
//# sourceMappingURL=Cli.js.map