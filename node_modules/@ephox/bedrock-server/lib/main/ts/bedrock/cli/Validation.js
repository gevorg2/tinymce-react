"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Attempt_1 = require("../core/Attempt");
const Arr = require("../util/Arr");
const validateOne = (defn, settings) => {
    return defn.validate(defn.name, settings[defn.name]);
};
const validateMany = (defn, settings) => {
    const validations = settings[defn.name].map((f) => {
        return defn.validate(defn.name, f);
    });
    return Attempt_1.Attempt.concat(validations);
};
const validateRequired = (defn, settings) => {
    const output = defn.output !== undefined ? defn.output : defn.name;
    return defn.required === true && settings[output] === undefined ? Attempt_1.Attempt.failed([
        'The *required* output property [' + output + '] from [' + defn.name + '] must be specified'
    ]) : Attempt_1.Attempt.passed(defn);
};
exports.scanRequired = (definitions, settings) => {
    const requiredInfo = definitions.map((defn) => {
        return validateRequired(defn, settings);
    });
    const outcome = Attempt_1.Attempt.concat(requiredInfo);
    return Attempt_1.Attempt.cata(outcome, Attempt_1.Attempt.failed, () => {
        return Attempt_1.Attempt.passed(settings);
    });
};
// Returns either a Failure of an array of error messages, or a Success of the settings object
exports.scan = (definitions, settings) => {
    return definitions.reduce((rest, defn) => {
        if (settings[defn.name] === undefined)
            return rest;
        const newValue = defn.multiple === true ? validateMany(defn, settings) : validateOne(defn, settings);
        return Attempt_1.Attempt.carry(rest, newValue, (result, v) => {
            const output = defn.output !== undefined ? defn.output : defn.name;
            if (Object.prototype.hasOwnProperty.call(rest, output)) {
                return Attempt_1.Attempt.failed(['Incompatible']);
            }
            return Attempt_1.Attempt.passed({
                ...result,
                [output]: defn.flatten === true ? Arr.flatten(v) : v
            });
        });
    }, Attempt_1.Attempt.passed({}));
};
//# sourceMappingURL=Validation.js.map