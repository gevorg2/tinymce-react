"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-var-requires */
const rollup = require("rollup");
const path = require("path");
const fs = require("fs");
const mkdirp = require("mkdirp");
const Imports = require("./Imports");
const ExitCodes_1 = require("../util/ExitCodes");
const FileUtils = require("../util/FileUtils");
exports.compile = (tsConfigFile, scratchDir, exitOnCompileError, srcFiles, success) => {
    const scratchFile = path.join(scratchDir, 'compiled/tests.ts');
    const dest = path.join(scratchDir, 'compiled/tests.js');
    const outputOptions = {
        name: 'ephoxTests',
        file: dest,
        format: 'iife',
        sourcemap: true
    };
    const tsConfig = FileUtils.readFileAsJson(tsConfigFile);
    const include = tsConfig.include ? tsConfig.include : [];
    mkdirp.sync(path.dirname(scratchFile));
    fs.writeFileSync(scratchFile, Imports.generateImports(false, scratchFile, srcFiles));
    const typescript = require('rollup-plugin-typescript2');
    const resolve = require('rollup-plugin-node-resolve');
    const sourcemaps = require('rollup-plugin-sourcemaps');
    rollup.rollup({
        input: scratchFile,
        treeshake: false,
        plugins: [
            resolve({
                jsnext: true,
                customResolveOptions: {
                    moduleDirectory: path.join(path.dirname(tsConfigFile), 'node_modules')
                }
            }),
            typescript({
                cacheRoot: path.join(scratchDir, 'rts2_cache'),
                tsconfig: tsConfigFile,
                verbosity: 2,
                check: false,
                // clean: true,
                tsconfigOverride: {
                    compilerOptions: {
                        declaration: false
                    },
                    include: include.concat([
                        path.resolve(scratchFile)
                    ])
                }
            }),
            sourcemaps()
        ]
    }).then((bundle) => {
        return bundle.write(outputOptions);
    }).then(() => {
        success(dest);
    }).catch((err) => {
        console.log(err);
        if (exitOnCompileError) {
            process.exit(ExitCodes_1.ExitCodes.failures.error);
        }
        success(dest);
    });
};
//# sourceMappingURL=Rollup.js.map