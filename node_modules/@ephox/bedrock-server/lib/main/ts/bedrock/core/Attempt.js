"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const failed = (err) => {
    return {
        foldAttempt: (onFailed, onPassed) => {
            return onFailed(err);
        }
    };
};
const passed = (value) => {
    return {
        foldAttempt: (onFailed, onPassed) => {
            return onPassed(value);
        }
    };
};
const cata = (attempt, onFailed, onPassed) => {
    return attempt.foldAttempt(onFailed, onPassed);
};
const bind = (firstAttempt, f) => {
    return firstAttempt.foldAttempt(failed, f);
};
const map = (firstAttempt, f) => {
    return firstAttempt.foldAttempt(failed, (v) => passed(f(v)));
};
const list = (firstAttempt, fs) => {
    return fs.reduce((rest, x) => {
        return bind(rest, x);
    }, firstAttempt);
};
const carry = (firstAttempt, secondAttempt, f) => {
    return cata(firstAttempt, (errs) => {
        return cata(secondAttempt, (sErrs) => {
            return failed(errs.concat(sErrs));
        }, (_) => {
            return failed(errs);
        });
    }, (fValue) => {
        return cata(secondAttempt, (sErrs) => {
            return failed(sErrs);
        }, (sValue) => {
            return f(fValue, sValue);
        });
    });
};
const concat = (attempts) => {
    // take a list of attempts, and turn them info an attempt of a list.
    return attempts.reduce((rest, b) => {
        return carry(rest, b, (x, y) => {
            return passed(x.concat([y]));
        });
    }, passed([]));
};
const toString = (attempt) => {
    return cata(attempt, (errs) => {
        return 'attempt.failed(' + JSON.stringify(errs) + ')';
    }, (value) => {
        return 'attempt.passed(' + JSON.stringify(value) + ')';
    });
};
const hasPassed = (attempt) => {
    return cata(attempt, () => false, () => true);
};
exports.Attempt = {
    failed,
    passed,
    cata,
    bind,
    map,
    list,
    carry,
    concat,
    toString,
    hasPassed
};
//# sourceMappingURL=Attempt.js.map