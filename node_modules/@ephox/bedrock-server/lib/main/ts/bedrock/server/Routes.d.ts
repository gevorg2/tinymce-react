/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import * as Matchers from './Matchers';
declare type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS';
export declare type RouteGoFunc = (request: IncomingMessage, response: ServerResponse, done: () => void) => void;
export interface Route {
    matches: Matchers.Matcher[];
    go: RouteGoFunc;
}
export declare const routing: (method: HTTPMethod, prefix: string, source: string) => Route;
export declare const json: (method: HTTPMethod, prefix: string, data: any) => Route;
export declare const asyncJs: (method: HTTPMethod, url: string, fn: (data: any) => void) => Route;
export declare const effect: <D>(method: HTTPMethod, prefix: string, action: (data: D) => Promise<void>) => Route;
export declare const rewrite: (method: HTTPMethod, root: string, input: string, output: string) => Route;
export declare const constant: (method: HTTPMethod, root: string, url: string) => Route;
export declare const host: (method: HTTPMethod, root: string) => Route;
export declare const hostOn: (method: HTTPMethod, prefix: string, root: string) => Route;
export declare const unsupported: (method: HTTPMethod, root: string, label: string) => Route;
export declare const route: (routes: Route[], fallback: Route, request: IncomingMessage, response: ServerResponse, done: (err?: any) => void) => void;
export {};
