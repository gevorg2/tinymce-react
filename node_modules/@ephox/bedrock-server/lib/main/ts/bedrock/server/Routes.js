"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const server = require("serve-static");
const RouteUtils = require("../util/RouteUtils");
const Matchers = require("./Matchers");
const createServer = (root) => {
    // Note: The serve-static types appear to be wrong here, so just force it back to what it should be
    return server(root);
};
const doResponse = (request, response, status, contentType, data) => {
    response.setHeader('ETag', RouteUtils.generateETag(data));
    if (status === 304 || RouteUtils.isCachable(status) && RouteUtils.isFresh(request, response)) {
        response.writeHead(304, {});
        response.end();
    }
    else {
        response.writeHead(status, {
            'Content-Type': contentType,
            'Cache-Control': 'public, max-age=0'
        });
        response.end(data);
    }
};
exports.routing = (method, prefix, source) => {
    const router = createServer(source);
    const go = (request, response, done) => {
        if (request.url) {
            request.url = request.url.substring(prefix.length);
        }
        router(request, response, done);
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(prefix)],
        go
    };
};
const concludeJson = (request, response, status, info) => {
    doResponse(request, response, status, 'application/json', JSON.stringify(info));
};
exports.json = (method, prefix, data) => {
    const go = (request, response /* , done */) => {
        concludeJson(request, response, 200, data);
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(prefix)],
        go
    };
};
exports.asyncJs = (method, url, fn) => {
    const go = (request, response /* , done */) => {
        fn((data) => {
            doResponse(request, response, 200, 'application/javascript', data);
        });
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.urlMatch(url)],
        go
    };
};
exports.effect = (method, prefix, action) => {
    const go = (request, response /* , done */) => {
        let body = '';
        request.on('data', (data) => {
            body += data;
        });
        request.on('end', () => {
            const parsed = JSON.parse(body);
            action(parsed).then(() => {
                concludeJson(request, response, 200, {});
            }).catch((err) => {
                console.error('Executing effect failed: \n** ' + body);
                console.error('Error: ', err, '\n');
                concludeJson(request, response, 500, {});
            });
        });
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(prefix)],
        go
    };
};
exports.rewrite = (method, root, input, output) => {
    const base = createServer(root);
    const go = (request, response, done) => {
        request.url = output;
        base(request, response, done);
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(input)],
        go
    };
};
exports.constant = (method, root, url) => {
    const base = createServer(root);
    const go = (request, response, done) => {
        request.url = url;
        base(request, response, done);
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(root)],
        go
    };
};
exports.host = (method, root) => {
    const base = createServer(root);
    const go = (request, response, done) => {
        base(request, response, done);
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(root)],
        go
    };
};
exports.hostOn = (method, prefix, root) => {
    const base = createServer(root);
    const go = (request, response, done) => {
        if (request.url) {
            request.url = request.url.substring((prefix + '/').length);
        }
        base(request, response, done);
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(prefix)],
        go
    };
};
exports.unsupported = (method, root, label) => {
    const go = (request, response /* , done */) => {
        concludeJson(request, response, 404, { error: label });
    };
    return {
        matches: [Matchers.methodMatch(method), Matchers.prefixMatch(root)],
        go
    };
};
exports.route = (routes, fallback, request, response, done) => {
    request.originalUrl = request.url;
    const match = routes.find((candidate) => {
        return candidate.matches.every((match) => {
            return match(request);
        });
    });
    const matching = match === undefined ? fallback : match;
    matching.go(request, response, done);
};
//# sourceMappingURL=Routes.js.map