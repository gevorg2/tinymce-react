"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const frameSelected = (driver, frame) => {
    return () => {
        return driver.switchToFrame(frame).then(() => {
            return true;
        }).catch((e) => {
            if (!(e.name && e.name === 'no such frame')) {
                throw e;
            }
            return false;
        });
    };
};
const getTargetFromFrame = (driver, selector) => {
    const sections = selector.split('=>');
    const frameSelector = sections[0];
    const targetSelector = sections[1];
    // Note: Don't use driver.$() here to lookup the frame as the object reference
    // returned doesn't work when passed to driver.switchToFrame() on Edge.
    return driver.findElement('css selector', frameSelector).then((frame) => {
        return driver.waitUntil(frameSelected(driver, frame), 100).then(() => {
            return driver.$(targetSelector).then((target) => {
                return target.waitForDisplayed(100).then(() => {
                    return target;
                });
            });
        });
    });
};
const performActionOnFrame = (driver, selector, action) => {
    return getTargetFromFrame(driver, selector).then((target) => {
        return action(target).then((result) => {
            return driver.switchToFrame(null).then(() => {
                return result;
            });
        });
    }).catch((err) => {
        return driver.switchToFrame(null).then(() => {
            return Promise.reject(err);
        });
    });
};
const getTargetFromMain = (driver, selector) => {
    return driver.$(selector);
};
const performActionOnMain = (driver, selector, action) => {
    return getTargetFromMain(driver, selector).then((target) => {
        return action(target);
    });
};
exports.getTarget = (driver, data) => {
    const selector = data.selector;
    const getter = selector.indexOf('=>') > -1 ? getTargetFromFrame : getTargetFromMain;
    return getter(driver, selector);
};
exports.performActionOnTarget = (driver, data, action) => {
    const selector = data.selector;
    const performer = selector.indexOf('=>') > -1 ? performActionOnFrame : performActionOnMain;
    return performer(driver, selector, action);
};
//# sourceMappingURL=EffectUtils.js.map