/// <reference types="node" />
import * as http from 'http';
import { BrowserObject } from 'webdriverio';
import { Attempt } from '../core/Attempt';
import { DriverMaster } from './DriverMaster';
import { TestResults } from './Controller';
interface Server {
    listen: (port: number) => http.Server;
    close: (callback?: () => void) => void;
}
export interface ServeSettings {
    basedir: string;
    customRoutes: string;
    driver: Attempt<string, BrowserObject>;
    loglevel: 'simple' | 'advanced';
    master: DriverMaster | null;
    overallTimeout: number;
    projectdir: string;
    runner: any;
    singleTimeout: number;
    skipResetMousePosition: boolean;
    stickyFirstSession: boolean;
    testfiles: string[];
}
export interface ServeService {
    port: number;
    server: Server;
    markLoaded: () => void;
    enableHud: () => void;
    awaitDone: () => Promise<TestResults>;
    shutdown: () => Promise<void>;
}
export declare const startCustom: (settings: ServeSettings, createServer: (listener: http.RequestListener) => Server) => Promise<ServeService>;
export declare const start: (settings: ServeSettings) => Promise<ServeService>;
export {};
