"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const KeyEffects = require("./KeyEffects");
const EffectUtils = require("./EffectUtils");
const MouseEffects = require("./MouseEffects");
const ClipboardEffects = require("./ClipboardEffects");
const Routes = require("./Routes");
const Controller = require("./Controller");
const Attempt_1 = require("../core/Attempt");
const Waiter = require("../util/Waiter");
const Coverage = require("../core/Coverage");
// This is how long to wait before checking if the driver is ready again
const pollRate = 200;
// This is how many times to fail the driver check before the process fails
const maxInvalidAttempts = 300;
// TODO: Do not use files here.
exports.create = (master, maybeDriver, projectdir, basedir, stickyFirstSession, singleTimeout, overallTimeout, testfiles, loglevel, resetMousePosition) => {
    let pageHasLoaded = false;
    // On IE, the webdriver seems to load the page before it's ready to start
    // responding to commands. If the testing page itself tries to interact with
    // effects before driver.get has returned properly, it throws "UnsupportedOperationErrors"
    // This code is designed to allow the driver.get promise launched in bedrock-auto to
    // let the server known when it is able to use driver when responding to effect ajax calls.
    const waitForDriverReady = (attempts, f) => {
        if (pageHasLoaded && master !== null)
            return master.waitForIdle(f, 'effect');
        else if (attempts === 0)
            return Promise.reject('Driver never appeared to be ready');
        else {
            return Waiter.delay({}, pollRate).then(() => {
                return waitForDriverReady(attempts - 1, f);
            });
        }
    };
    const effect = (executor, driver) => {
        return (data) => {
            return waitForDriverReady(maxInvalidAttempts, () => {
                return executor(driver)(data);
            });
        };
    };
    const setInitialMousePosition = (driver) => {
        return () => {
            // TODO re-enable resetting the mouse on other browsers when mouseMove gets fixed on Firefox/IE
            if (driver.capabilities.browserName === 'chrome') {
                return EffectUtils.getTarget(driver, { selector: '.bedrock-mouse-reset' }).then((target) => {
                    return target.moveTo();
                });
            }
            else {
                return Promise.resolve();
            }
        };
    };
    const driverRouter = (url, apiLabel, executor) => {
        return Attempt_1.Attempt.cata(maybeDriver, () => {
            return Routes.unsupported('POST', url, apiLabel + ' API not supported without webdriver running. Use bedrock-auto to get this feature.');
        }, (driver) => {
            return Routes.effect('POST', url, effect(executor, driver));
        });
    };
    const markLoaded = () => {
        pageHasLoaded = true;
    };
    const c = Controller.create(stickyFirstSession, singleTimeout, overallTimeout, testfiles, loglevel);
    const routers = [
        driverRouter('/keys', 'Keys', KeyEffects.executor),
        driverRouter('/mouse', 'Mouse', MouseEffects.executor),
        Routes.effect('POST', '/tests/alive', (data) => {
            c.recordAlive(data.session);
            return Promise.resolve();
        }),
        Routes.effect('POST', '/tests/start', (data) => {
            c.recordTestStart(data.session, data.name, data.file, data.totalTests);
            if (resetMousePosition) {
                return Attempt_1.Attempt.cata(maybeDriver, () => {
                    return Promise.reject('Resetting mouse position not supported without webdriver running. Use bedrock-auto to get this feature.');
                }, (driver) => {
                    return effect(setInitialMousePosition, driver)({});
                });
            }
            else {
                return Promise.resolve();
            }
        }),
        Routes.effect('POST', '/tests/result', (data) => {
            c.recordTestResult(data.session, data.name, data.file, data.passed, data.time, data.error);
            return Promise.resolve();
        }),
        Routes.effect('POST', '/tests/done', (data) => {
            Coverage.writeCoverageData(data.coverage);
            c.recordDone(data.session);
            return Promise.resolve();
        }),
        // This does not need the webdriver.
        Routes.effect('POST', '/clipboard', ClipboardEffects.route(basedir, projectdir))
    ];
    return {
        routers,
        markLoaded: markLoaded,
        enableHud: c.enableHud,
        awaitDone: c.awaitDone
    };
};
//# sourceMappingURL=Apis.js.map