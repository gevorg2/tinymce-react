"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Serve = require("./bedrock/server/Serve");
const Reporter = require("./bedrock/core/Reporter");
const Attempt_1 = require("./bedrock/core/Attempt");
const Version = require("./bedrock/core/Version");
const DriverMaster = require("./bedrock/server/DriverMaster");
const Driver = require("./bedrock/auto/Driver");
const PageRoutes = require("./bedrock/server/PageRoutes");
const Lifecycle = require("./bedrock/core/Lifecycle");
/* eslint-disable no-undef */
exports.go = (settings) => {
    const master = DriverMaster.create();
    const runner = PageRoutes.generate(settings.projectdir, settings.basedir);
    Driver.create({
        browser: settings.browser,
        basedir: settings.basedir,
        debuggingPort: settings.debuggingPort,
        useSandboxForHeadless: false
    }).then((driver) => {
        const webdriver = driver.webdriver;
        const serveSettings = {
            projectdir: settings.projectdir,
            basedir: settings.basedir,
            driver: Attempt_1.Attempt.passed(webdriver),
            testfiles: [],
            master: master,
            runner: runner,
            loglevel: settings.loglevel,
            customRoutes: settings.customRoutes,
            stickyFirstSession: true,
            overallTimeout: settings.overallTimeout,
            singleTimeout: settings.singleTimeout,
            skipResetMousePosition: false
        };
        const addFramework = (framework) => {
            const source = path.join('/page', 'src', 'resources', framework + '-wrapper.js');
            return webdriver.execute((src) => {
                const script = document.createElement('script');
                script.setAttribute('src', src);
                document.head.appendChild(script);
            }, source);
        };
        const isPhantom = settings.browser === 'phantomjs';
        return Serve.start(serveSettings).then((service) => {
            if (!isPhantom)
                console.log('bedrock-framework ' + Version.get() + ' available at: http://localhost:' + service.port);
            const result = webdriver.url('http://localhost:' + service.port + '/' + settings.page).then(() => {
                console.log(isPhantom ? '\nPhantom tests loading ...\n' : '\n ... Initial page has loaded ...');
                service.markLoaded();
                return addFramework(settings.framework).then(() => {
                    return service.awaitDone().then((data) => {
                        return Reporter.write({
                            name: settings.name,
                            output: settings.output
                        })(data);
                    }).catch((pollExit) => {
                        return Reporter.writePollExit({
                            name: settings.name,
                            output: settings.output
                        }, pollExit);
                    });
                });
            });
            // TODO: where should this setting come from? Is it used?
            const delayExiting = false;
            const gruntDone = settings.gruntDone !== undefined ? settings.gruntDone : null;
            const done = () => Promise.all([service.shutdown(), driver.shutdown()]);
            return Lifecycle.shutdown(result, webdriver, done, gruntDone, delayExiting);
        });
    });
};
exports.mode = 'forFramework';
//# sourceMappingURL=BedrockFramework.js.map