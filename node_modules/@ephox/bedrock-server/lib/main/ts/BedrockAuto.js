"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Serve = require("./bedrock/server/Serve");
const Attempt_1 = require("./bedrock/core/Attempt");
const Version = require("./bedrock/core/Version");
const RunnerRoutes = require("./bedrock/server/RunnerRoutes");
const Reporter = require("./bedrock/core/Reporter");
const DriverMaster = require("./bedrock/server/DriverMaster");
const Driver = require("./bedrock/auto/Driver");
const Lifecycle = require("./bedrock/core/Lifecycle");
const ExitCodes_1 = require("./bedrock/util/ExitCodes");
const ConsoleReporter = require("./bedrock/core/ConsoleReporter");
exports.go = (settings) => {
    const master = DriverMaster.create();
    const isPhantom = settings.browser === 'phantomjs';
    const basePage = 'src/resources/html/' + (isPhantom ? 'bedrock-phantom.html' : 'bedrock.html');
    const routes = RunnerRoutes.generate('auto', settings.projectdir, settings.basedir, settings.config, settings.bundler, settings.testfiles, settings.chunk, settings.retries, settings.singleTimeout, settings.stopOnFailure, basePage, settings.coverage);
    console.log('bedrock-auto ' + Version.get() + ' starting...');
    routes.then((runner) => {
        Driver.create({
            browser: settings.browser,
            basedir: settings.basedir,
            debuggingPort: settings.debuggingPort,
            useSandboxForHeadless: settings.useSandboxForHeadless,
            wipeBrowserCache: settings.wipeBrowserCache
        }).then((driver) => {
            const webdriver = driver.webdriver;
            const serveSettings = {
                projectdir: settings.projectdir,
                basedir: settings.basedir,
                testfiles: settings.testfiles,
                driver: Attempt_1.Attempt.passed(webdriver),
                master: master,
                runner: runner,
                loglevel: settings.loglevel,
                customRoutes: settings.customRoutes,
                stickyFirstSession: true,
                overallTimeout: settings.overallTimeout,
                singleTimeout: settings.singleTimeout,
                skipResetMousePosition: settings.skipResetMousePosition
            };
            return Serve.start(serveSettings).then((service) => {
                if (!isPhantom)
                    console.log('bedrock-auto ' + Version.get() + ' available at: http://localhost:' + service.port);
                const result = webdriver.url('http://localhost:' + service.port).then(() => {
                    console.log(isPhantom ? '\nPhantom tests loading ...\n' : '\nInitial page has loaded ...\n');
                    service.markLoaded();
                    service.enableHud();
                    return service.awaitDone().then((data) => {
                        ConsoleReporter.printReport(data);
                        return Reporter.write({
                            name: settings.name,
                            output: settings.output
                        })(data);
                    }).catch((data) => {
                        ConsoleReporter.printReport(data);
                        return Reporter.writePollExit({
                            name: settings.name,
                            output: settings.output
                        }, data);
                    });
                });
                const delayExit = settings.delayExit !== undefined ? settings.delayExit : false;
                const gruntDone = settings.gruntDone !== undefined ? settings.gruntDone : null;
                const done = () => Promise.all([service.shutdown(), driver.shutdown()]);
                return Lifecycle.shutdown(result, webdriver, done, gruntDone, delayExit);
            });
        }).catch((err) => {
            console.error(err);
            if (settings.gruntDone !== undefined)
                settings.gruntDone(false);
            else
                process.exit(ExitCodes_1.ExitCodes.failures.unexpected);
        });
    });
};
exports.mode = 'forAuto';
//# sourceMappingURL=BedrockAuto.js.map