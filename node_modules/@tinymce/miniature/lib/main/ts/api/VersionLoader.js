import { Pipeline, Step } from '@ephox/agar';
import { TinyLoader } from '@ephox/mcagar';
import { readPlugins, registerPlugins, sRegisterPlugins } from '../loader/Plugins';
import * as TinyVersions from '../loader/Versions';
export var setupVersion = function (version, testPlugins, callback, settings, success, failure, logs) {
    var plugins = readPlugins(testPlugins);
    Pipeline.async({}, [
        TinyVersions.sWithVersion(version, Step.raw(function (_, next, die, initLogs) {
            registerPlugins(plugins);
            TinyLoader.setup(function (e, s, f) { return callback(e, s, f, initLogs); }, settings, function (v, nextLogs) { return next(v, nextLogs || initLogs); }, function (e, nextLogs) { return die(e, nextLogs || initLogs); });
        })),
        sRegisterPlugins(plugins)
    ], success, failure, logs);
};
export var sSetupVersion = function (version, testPlugins, callback, settings) {
    return Step.raw(function (_, next, die, initLogs) {
        return setupVersion(version, testPlugins, function (editor, onSuccess, onError, logs) {
            Pipeline.async({}, [callback(editor)], onSuccess, onError, logs);
        }, settings, next, die, initLogs);
    });
};
export var sWithVersion = TinyVersions.sWithVersion;
//# sourceMappingURL=VersionLoader.js.map